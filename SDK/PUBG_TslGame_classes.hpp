#pragma once

// PlayerUnknown's Battlegrounds (2.4.24) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class TslGame.TslBaseHUD
// 0x0130 (0x0600 - 0x04D0)
class ATslBaseHUD : public AHUD
{
public:
	class UClass*                                      MainUMGHudClass;                                          // 0x04D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UAkAudioBank*>                        AutoLoadAudioBanks;                                       // 0x04D8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET
	TMap<struct FString, struct FTslWidgetState>       WidgetStateMap;                                           // 0x04F0(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UActionInputEventHolder*>             ActionInputEventHolderArray;                              // 0x0540(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UUserWidget*                                 MainUMGHud;                                               // 0x0550(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UBlockInputUserWidget*>               BlockInputWidgetList;                                     // 0x0558(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FString>                             UseMouseWidgetStack;                                      // 0x0568(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      IsTimelineMaximize : 1;                                   // 0x0578(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7B];                                      // 0x0579(0x007B) MISSED OFFSET
	float                                              DebugLineActorNameNear;                                   // 0x05F4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DebugLineActorNameMiddle;                                 // 0x05F8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DebugLineActorNameFar;                                    // 0x05FC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBaseHUD");
		return ptr;
	}


	void WidgetToggle(const struct FString& WidgetName);
	void WidgetShow(const struct FString& WidgetName, class UObject* OptionalParam);
	void WidgetCreate(const struct FString& WidgetName, const struct FTslWidgetConfig& Config);
	void UpdateKillcamDisplayCode();
	void UpdateHud();
	bool UpdateHighlightDisplayBool();
	void UnbindActionKeyDelegateEvent(const struct FName& ActionName, TEnumAsByte<EInputEvent> InputEvent);
	void TestShowDialog(const struct FString& Message);
	void ShowPopupDialog(const struct FString& PopupWidgetName, const struct FText& Message, const struct FScriptDelegate& PressedDelegate);
	void ShowDefaultHud();
	void RemoveInternalHudsExplicitly(class AActor* HudActor);
	void ReceivePostBeginPlay();
	void PrintShowWidgetList();
	void PrintCreatedWidgetList();
	void OnClickedKillcamPlay();
	void OnClickedHighlightPlay();
	bool IsWidgetShow(const struct FString& WidgetName);
	bool IsMouseUse();
	bool IsEnableHighlightShortcut();
	bool HideWidgetByEscape();
	void HidePopupDialog(const struct FString& PopupWidgetName);
	class UUserWidget* GetWidget(const struct FString& WidgetName);
	class UUserWidget* GetMainUMGHud();
	void GetLastKillcamDisplayCode();
	struct FText GetKillcamCountingText(const struct FText& InCountingTextFormat);
	void ForceHidePopupHandler();
	void DisplayActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance);
	void DestroyAllWidgets();
	void BindActionKeyDelegateEvent(const struct FName& ActionName, TEnumAsByte<EInputEvent> InputEvent, const struct FScriptDelegate& ActionKeyDelegate);
	void ApplicationActivationStateChangedEvent(bool IsActive);
	void AddTestScreenResolutions(int Width, int Height);
};


// Class TslGame.TslWelcomeBaseHUD
// 0x0060 (0x0660 - 0x0600)
class ATslWelcomeBaseHUD : public ATslBaseHUD
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0600(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStateChanged;                                           // 0x0610(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0620(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWelcomeBaseHUD.WelcomeState
	unsigned char                                      UnknownData02[0x2F];                                      // 0x0621(0x002F) MISSED OFFSET
	struct FString                                     EntitlementsRequestUrl;                                   // 0x0650(0x0010) (CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWelcomeBaseHUD");
		return ptr;
	}


	void OnPressedPopupCommon();
};


// Class TslGame.TslBaseLobbyLevelScriptActor
// 0x0000 (0x03F0 - 0x03F0)
class ATslBaseLobbyLevelScriptActor : public ALevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBaseLobbyLevelScriptActor");
		return ptr;
	}


	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void LevelReset();
};


// Class TslGame.TslLobbyLevelScriptActor
// 0x0010 (0x0400 - 0x03F0)
class ATslLobbyLevelScriptActor : public ATslBaseLobbyLevelScriptActor
{
public:
	struct FName                                       MainMenuStreamingLevelName;                               // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       CustomizationStreamingLevelName;                          // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLobbyLevelScriptActor");
		return ptr;
	}


	void LatentLoadCustomizationLevel();
};


// Class TslGame.TslLobbyLevelScriptCustom
// 0x0000 (0x03F0 - 0x03F0)
class ATslLobbyLevelScriptCustom : public ATslBaseLobbyLevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLobbyLevelScriptCustom");
		return ptr;
	}


	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void LevelReset();
};


// Class TslGame.TslLobbyLevelScriptMainMenu
// 0x0000 (0x03F0 - 0x03F0)
class ATslLobbyLevelScriptMainMenu : public ATslBaseLobbyLevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLobbyLevelScriptMainMenu");
		return ptr;
	}


	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void LevelReset();
};


// Class TslGame.TslBaseLobbySceneTravel
// 0x0098 (0x0480 - 0x03E8)
class ATslBaseLobbySceneTravel : public AActor
{
public:
	class ACameraActor*                                MainCamera;                                               // 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ACameraActor*                                CurrentSceneCamera;                                       // 0x03F0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ACameraActor*                                NextSceneCamera;                                          // 0x03F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FString                                     NextSceneName;                                            // 0x0400(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0410(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTslLobbySceneUpdate;                                    // 0x0418(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTslLobbySceneTravelFinished;                            // 0x0428(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0438(0x0008) MISSED OFFSET
	struct FTransform                                  CurrentCameraStartTM;                                     // 0x0440(0x0030) (CPF_Transient, CPF_IsPlainOldData)
	float                                              CurrentCameraStartFieldOfView;                            // 0x0470(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0474(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBaseLobbySceneTravel");
		return ptr;
	}


	void UpdateScene();
	void SetMainCameraTransformAndFieldOfView(const struct FTransform& TM, float FieldOfView);
	void OnStartTravel();
	void GetNextSceneCameraTransformAndFieldOfView(struct FTransform* TM, float* FieldOfView);
	void GetCurrentSceneCameraTransformAndFieldOfView(struct FTransform* TM, float* FieldOfView);
	void FinishTravel(bool bUpdateScene);
};


// Class TslGame.TslBasePlayerController
// 0x0010 (0x0758 - 0x0748)
class ATslBasePlayerController : public APlayerController
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0748(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBasePlayerController");
		return ptr;
	}


	bool WasInputKeyJustReleased(const struct FKey& Key);
	bool WasInputKeyJustPressed(const struct FKey& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void SwitchLevel(const struct FString& URL);
	void StopHapticEffect();
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetMouseLocation(int X, int Y);
	void SetHapticsByValue(float Frequency, float Amplitude);
	void SetControllerLightColor(const struct FColor& Color);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities);
	void ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& NewMode);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, struct FVector2D* ScreenLocation);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, float Scale, bool bLoop);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void OnRep_TargetViewRotation();
	void LocalTravel(const struct FString& URL);
	bool IsInputKeyDown(const struct FKey& Key);
	void IncDISPSharpness();
	void GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(const struct FKey& Key);
	void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FKey& Key);
	void GetInputAnalogStickStateRaw(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableTAA();
	void EnableDLSS();
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void DecDISPSharpness();
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(const struct FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(const struct FString& InHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag);
	void ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void Camera(const struct FName& NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};


// Class TslGame.TslEntryPlayerController
// 0x0010 (0x0768 - 0x0758)
class ATslEntryPlayerController : public ATslBasePlayerController
{
public:
	class UVoiceLobbyComponent*                        VoiceComponent;                                           // 0x0758(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FVector2D                                   CaptureMousePosition;                                     // 0x0760(0x0008) (CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEntryPlayerController");
		return ptr;
	}


	void LoadReplay(const struct FString& SessionName);
	void HandleLobbySystemMenu();
};


// Class TslGame.TslPlayerController
// 0x06C8 (0x0E20 - 0x0758)
class ATslPlayerController : public ATslBasePlayerController
{
public:
	unsigned char                                      bProcessingInput : 1;                                     // 0x0758(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0759(0x0002) MISSED OFFSET
	unsigned char                                      bPlayWinnerWinnerChickenDinnerAnimationAtMatchFinished : 1;// 0x075B(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x075C(0x0004) MISSED OFFSET
	class UTslGamepadPCInputComponent*                 TslGamepadInputComponent;                                 // 0x0760(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0768(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnShowReplayTimeline;                                     // 0x0770(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData03[0x1A0];                                     // 0x0780(0x01A0) MISSED OFFSET
	struct FVector                                     CameraPeekLeftMove;                                       // 0x0920(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     CameraPeekRightMove;                                      // 0x092C(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0938(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData05[0x1];                                       // 0x0938(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslPlayerController.CameraViewBehaviour
	unsigned char                                      UnknownData06[0x7];                                       // 0x0949(0x0007) MISSED OFFSET
	class ATslTracerManager*                           TracerManager;                                            // 0x0950(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x0958(0x000C) MISSED OFFSET
	struct FVector_NetQuantizeNormal                   SpectatorAccumViewRotation;                               // 0x0964(0x000C) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData08[0x1];                                       // 0x0970(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslPlayerController.ObserverAuthorityType
	unsigned char                                      UnknownData09[0x17];                                      // 0x0971(0x0017) MISSED OFFSET
	TArray<struct FRankingInfo>                        RankingInfos;                                             // 0x0988(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UActorComponent*                             InteractionTargetComponent;                               // 0x0998(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class ATslCharacter*                               SpectatorViewCharacter;                                   // 0x09A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x10];                                      // 0x09A8(0x0010) MISSED OFFSET
	class ATslAchievement*                             Achievement;                                              // 0x09B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMeshComponent*                              SpectatorScopeMesh;                                       // 0x09C0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x54];                                      // 0x09C8(0x0054) MISSED OFFSET
	struct FRotator                                    SpectatorVehicleViewRotation;                             // 0x0A1C(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FNearClippingLevelOverZ>             NearClippingLevelsOverZ;                                  // 0x0A28(0x0010) (CPF_ZeroConstructor, CPF_Config)
	float                                              MaxValidPing;                                             // 0x0A38(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultFOV;                                               // 0x0A3C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InteractGamepadHoldTime;                                  // 0x0A40(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0xC];                                       // 0x0A44(0x000C) MISSED OFFSET
	class UVoiceComponent*                             VoiceComponent;                                           // 0x0A50(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class ATeam*>                               Teams;                                                    // 0x0A58(0x0010) (CPF_Net, CPF_ZeroConstructor)
	TArray<class ATeam*>                               KillerTeams;                                              // 0x0A68(0x0010) (CPF_Net, CPF_ZeroConstructor)
	class ATeam*                                       CachedOwningTeam;                                         // 0x0A78(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<TWeakObjectPtr<class ATslCharacter>>        ReplicateTeamMembers;                                     // 0x0A80(0x0010) (CPF_ZeroConstructor)
	TArray<TWeakObjectPtr<class ATslCharacter>>        ReplicateKillerTeamMembers;                               // 0x0A90(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData13[0x50];                                      // 0x0AA0(0x0050) MISSED OFFSET
	TArray<TWeakObjectPtr<class ATslCharacter>>        ReplicateCharacter;                                       // 0x0AF0(0x0010) (CPF_ZeroConstructor)
	TArray<TWeakObjectPtr<class ACarePackageItem>>     ReplicateCarePackageItemList;                             // 0x0B00(0x0010) (CPF_ZeroConstructor)
	class UBluezoneInOutComponent*                     BluezoneInOut;                                            // 0x0B10(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBluezoneInOutSoundEffectComponent*          BluezoneInOutSoundEffect;                                 // 0x0B18(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class UClass*                                      OutSidePlayerAreaEffectClass;                             // 0x0B20(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	class ATslPostProcessEffect*                       OutSidePlayerAreaEffect;                                  // 0x0B28(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DBNOEffectClass;                                          // 0x0B30(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	class ATslPostProcessEffect*                       DBNOEffect;                                               // 0x0B38(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0B40(0x0008) MISSED OFFSET
	class UTimelineComponent*                          DBNOReviveTimeLine;                                       // 0x0B48(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x20];                                      // 0x0B50(0x0020) MISSED OFFSET
	float                                              DeathResultDelaySeconds;                                  // 0x0B70(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0xE1];                                      // 0x0B74(0x00E1) MISSED OFFSET
	unsigned char                                      bEnablePopupXboxUnautorizedDevice : 1;                    // 0x0C55(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData17[0x32];                                      // 0x0C56(0x0032) MISSED OFFSET
	TArray<class ATslCharacter*>                       AIBots;                                                   // 0x0C88(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0C98(0x0008) MISSED OFFSET
	unsigned char                                      bIsClientReplayRecordable : 1;                            // 0x0CA0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsKillcamRecordable : 1;                                 // 0x0CA1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseTPAntibotClient : 1;                                  // 0x0CA2(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData19[0x15];                                      // 0x0CA3(0x0015) MISSED OFFSET
	class UClass*                                      OutlineEffectClass;                                       // 0x0CB8(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FStringAssetReference                       MaterialParameterCollection;                              // 0x0CC0(0x0010) (CPF_Config)
	class ATslPostProcessEffect*                       OutlineEffect;                                            // 0x0CD0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslPostProcessEffect*                       ItemInteractionOutlineEffect;                             // 0x0CD8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UMaterialParameterCollection*                LoadedMaterialParameterCollection;                        // 0x0CE0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsAllLv3EquippedAlready : 1;                             // 0x0CE8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsRankingAlreadyUpdated : 1;                             // 0x0CE9(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x3E];                                      // 0x0CEA(0x003E) MISSED OFFSET
	TArray<class UClass*>                              DistributedLoadoutItemArray;                              // 0x0D28(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData21[0xC8];                                      // 0x0D38(0x00C8) MISSED OFFSET
	class APlayerState*                                SavedViewTargetPlayerState;                               // 0x0E00(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bNeedScreenCheck : 1;                                     // 0x0E08(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bAllowVoiceChatInput : 1;                                 // 0x0E09(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bCapturingAudioInputHere : 1;                             // 0x0E0A(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsingDebugCameraController : 1;                          // 0x0E0B(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEnableGVoice : 1;                                        // 0x0E0C(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData22[0x13];                                      // 0x0E0D(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPlayerController");
		return ptr;
	}


	void UpdateHud();
	void UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void UnreliablePing(int SeqID, int64_t DateTimeTick);
	void TracerProjectileModeType(int InMode, int InType);
	void TracerBulletModeType(int InMode, int InType);
	void ToggleTracerManger();
	void ToggleReport();
	void TogglePopupXBoxXIMAPI();
	void ToggleMissionList();
	void ToggleInventory();
	void TestUserProfile(float TotalPlayTime);
	void Test_SpawnVehicle();
	void Test_FirstCharacterKill();
	void Suicide();
	void SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ShutdownTracerManager();
	void ShowTslDebugInfomation();
	void ShowTeamDeathPopup();
	void ShowPlayerControllerBindActions_Admin();
	void ShowMatchResult();
	void ShowInGameMenu_Gamepad();
	void ShowInGameMenu();
	void ShowGotoLobbyPopUp();
	void ShowEmoteWheel();
	void SetVoiceComponent(class UVoiceComponent* Component);
	void SetDefaultFOV(float NewFOV);
	void SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void ServerViewTargetReplicateUpdate();
	void ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void ServerSuicide();
	void ServerStopOtherPlayersTestCheat();
	void ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void ServerSteamNetworkStatusLog(int CountPerGame);
	void ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void ServerStartHoldRotation(const struct FRotator& Current);
	void ServerSpawnVehicle();
	void ServerSetViewTarget(class AActor* NewViewTarget);
	void ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void ServerSetSpawnKit(int Index);
	void ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void ServerSetControlRotation(const struct FRotator& Rotation);
	void ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void ServerSendPacketReliable(TArray<unsigned char> Packet);
	void ServerSendLogMissionListOpen_Unreliable();
	void ServerSendLogMissionListOpen_Reliable();
	void ServerSay(const struct FString& Msg);
	void ServerResumeNpc(class APawn* InPawn);
	void ServerResetWheeledVehicleTransform();
	void ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPauseNpc(class APawn* InPawn);
	void ServerPauseAfterTick();
	void ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void ServerNextSetViewTarget(bool bIsPrev);
	void ServerNextFollowCharacter(bool bIsPrev);
	void ServerMoveToVehicleSeat(int SeatIndex);
	void ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void ServerMapLoadFinishedOnClient();
	void ServerLogXboxUnautorizedDevice();
	void ServerLeaveVehicle();
	void ServerLeaveMatchIntentionally();
	void ServerLeaveDebugPC();
	void ServerKnockdownNpc(class APawn* InPawn);
	void ServerKnockbackNpc(class APawn* InPawn);
	void ServerKillNpc(class APawn* InPawn);
	void ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void ServerJoinDebugPC();
	void ServerEACClientConnected();
	void ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void ServerCheatDestroyActors();
	void ServerCheat(const struct FString& Msg);
	void ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ServerBroadCastCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void ServerAIPath(class APawn* InPawn);
	void ServerAdmin(const struct FString& AdminCommand);
	void Server_UpdateTracerManager(bool bTracerOn);
	void Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void Server_ToggleTracerManger();
	void Server_ShutdownTracerManager();
	void Server_SendWheelTrackInfo(const struct FString& Info);
	void Server_BroadCastMidGameBanMessageForUncheater();
	void SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void SendSystemMessage(const struct FText& Message, float MessageDuration);
	void Say(const struct FString& Msg);
	void SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void SaveGearProfile(int ProfileIndex, TArray<class UClass*> inArray);
	void SaveDistributedLoadout(TArray<class UClass*> InItemArray);
	void ResetMinimapSize();
	void ResetEmoteWheelPadLBRB();
	void ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void ReliablePing(int SeqID, int64_t DateTimeTick);
	void PrevMinimapSize();
	void PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool OnToggleMissionListPad();
	bool OnToggleMapPad();
	bool OnToggleInventoryPad();
	bool OnToggleInGameMenuPad();
	bool OnToggleExtendedMinimapPad();
	bool OnToggleCameraPad();
	void OnToggleCamera();
	bool OnStopHoldThrowableItemWheel();
	bool OnStopHoldRotationPad();
	bool OnStopHoldHealItemWheel();
	bool OnStartToggleCameraPadRB();
	bool OnStartToggleCameraPadLB();
	bool OnStartHoldThrowableItemWheel();
	bool OnStartHoldRotationPad();
	bool OnStartHoldHealItemWheel();
	void OnShowCastingBarWidget(float CastTime, const struct FText& CastName, bool OnOff);
	void OnRep_TracerManager();
	void OnRep_Team();
	void OnRep_TargetViewRotation();
	void OnRep_CameraViewBehaviour();
	void OnRep_bUseTPAntibotClient();
	void OnRep_bEnableGVoice();
	void OnRep_AllowVoiceChatInput();
	void OnMoveToVehicleSeat(unsigned char idx);
	void OnItemStackCountHandlingMode();
	bool OnInteractInVehiclePad();
	bool OnInteractGamepad();
	void OnFinishInteractionCastOnServer(class UObject* CastObject);
	void OnFinishInteractionCastOnClient(class UObject* CastObject);
	void OnExecuteExitCommand();
	bool OnEndToggleCameraPadRB();
	bool OnEndToggleCameraPadLB();
	void OnEmoteAnimation(unsigned char InIndex);
	void OnClickedReportButton(const struct FString& NetId);
	void OnCancelInteractionCast(class UObject* CastObject);
	void OnBeginningOptimizationStateChanged();
	void OnAutomatedTesting();
	void OffItemStackCountHandlingMode();
	void ObserverTeleportTo(const struct FVector& Location);
	void NextSetViewTarget();
	void NextMinimapSize();
	void MobileBodiesStatistics();
	void KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	bool IsTeleportModeOn();
	bool IsSpectatorState();
	bool IsSpectating();
	bool IsSameObservingCameraMode();
	bool IsReplayingKillcam();
	bool IsReplaying();
	bool IsObserving();
	bool IsMissionListDisplayable();
	bool IsLiveReplaying();
	bool IsKillerSpectating();
	bool IsItemStackCountHandlingMode();
	bool IsHighPing();
	bool IsHighlightPlaying();
	bool IsHighlightFadeOut();
	bool IsGroggying();
	bool IsGamepadHoldProcessing();
	bool IsGameInputAllowed();
	void HideTslDebugInfomation();
	void HideMatchResult();
	void HideEmoteWheel();
	bool HasNextSpectateCharacter();
	void HandleReviveProgress(float Value);
	void HandleReviveFinish();
	class UVoiceComponent* GetVoiceComponent();
	class ATslCharacter* GetViewTargetTslCharacter();
	class ATeam* GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> GetTslPlayerMatchResultInfos();
	class ATslCharacter* GetTslCharacter();
	TArray<class ATslPlayerState*> GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int GetTeamOverallKillCountAtObserving();
	int GetTeamMemberCount();
	int GetTeamIdAtObserving();
	struct FRotator GetTargetViewRotation();
	TArray<class ATslPlayerState*> GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString GetSpectatingPlayerName();
	struct FString GetSpectatingOrFollowingTslCharacterNetId();
	TArray<class UClass*> GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> GetReplicateTeamMembers();
	TArray<class ATslCharacter*> GetReplicateKillerTeamMembers();
	TArray<class ATslCharacter*> GetReplicateCharacters();
	TArray<class ACarePackageItem*> GetReplicateCarePackageItems();
	float GetOtherElapsedCastTime();
	float GetOtherCastTime();
	struct FText GetOtherCastingName();
	void GetObserverCameraMode();
	void GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> GetKeysForAction(const struct FName& ActionName);
	struct FText GetHudDebugText();
	TArray<class UClass*> GetGearProfile(int ProfileIndex);
	TArray<class ATslPlayerState*> GetDeadPlayerStates();
	float GetCurrentHoldProgressRate();
	TArray<class ATeam*> GetClientTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientSquadInTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool GetCanAllSpectate();
	class ATeam* GetCachedTeam();
	TArray<struct FTslReportUserInfo> GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> GetAllPlayerStates();
	int GetAliveTeamMemberCount(bool bIncludeQuitter);
	void ForceGotoLobbyPopUpHandler();
	void DumpActorDetailByRaycast();
	void DropItem(const struct FString& ItemTypeName);
	void DeleteMapMarker();
	bool CompleteReportKiller();
	void CloseKickPlayerWarningPopupAndTerminate();
	void CloseKickPlayerWarningPopup();
	void ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void ClientWasKickedAndExitTP(const struct FText& KickReason);
	void ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void ClientUpdateDropPackageAchievement();
	void ClientUpdateCollisionResponseToPawn(bool bActive);
	void ClientUpdateCarePackageAchievement();
	void ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void ClientTestCheat(int InIndex, int InLoopingCounter);
	void ClientStopTestCheat();
	void ClientStartOnlineGame();
	void ClientShowMatchResult();
	void ClientShowCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void ClientSetCanAllSpectate(bool InbCanSpectate);
	void ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void ClientSendPacketReliable(TArray<unsigned char> Packet);
	void ClientRestoreSpectatorOnReconnection();
	void ClientProcessRevive();
	void ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount);
	void ClientOnCharacterRestart();
	void ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbCanReport);
	void ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void ClientNpcCount(int InCount);
	void ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void ClientNotifySpeedBoost(float Boost);
	void ClientNotifyRestrictingPlayArea();
	void ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void ClientNotifyHealAmount_Unreliable(float Heal);
	void ClientNotifyHealAmount_Reliable(float Heal);
	void ClientNotifyHealAmount(float Heal);
	void ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void ClientInteractByComponent(class UActorComponent* TargetComponent);
	void ClientInteract(class AActor* TargetObject);
	void ClientGameStarted();
	void ClientEndOnlineGame();
	void ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void ClientAdminCopyString(const struct FString& inString);
	void Client_TakeScreenshot();
	void Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void CheatSpawnActor(int InClassIndex, int InHeight);
	void CheatDestroyActors();
	void Cheat_ServerSpawnVehicle(int VehicleIndex);
	void ChangeMeshCommand(int Parameter, float Time);
	void CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool CanSeeTerrainThroughFogInTheAir();
	bool CanReport();
	void BP_Test_SpawnVehicle(int VehicleIndex);
	void BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void BEClient(const struct FString& Command);
	void AllowVoiceChatInput(bool bAllow);
	void Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.PerfBotPlayerController
// 0x0060 (0x0E80 - 0x0E20)
class APerfBotPlayerController : public ATslPlayerController
{
public:
	class UClass*                                      WeaponType;                                               // 0x0E20(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0E28(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.PerfBotPlayerController");
		return ptr;
	}


	void ServerMoveToLocation(const struct FVector& Location);
	void ClientQuit();
};


// Class TslGame.TslBattleRoyalePlayerController
// 0x0000 (0x0E20 - 0x0E20)
class ATslBattleRoyalePlayerController : public ATslPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBattleRoyalePlayerController");
		return ptr;
	}


	void UpdateHud();
	void UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void UnreliablePing(int SeqID, int64_t DateTimeTick);
	void TracerProjectileModeType(int InMode, int InType);
	void TracerBulletModeType(int InMode, int InType);
	void ToggleTracerManger();
	void ToggleReport();
	void TogglePopupXBoxXIMAPI();
	void ToggleMissionList();
	void ToggleInventory();
	void TestUserProfile(float TotalPlayTime);
	void Test_SpawnVehicle();
	void Test_FirstCharacterKill();
	void Suicide();
	void SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ShutdownTracerManager();
	void ShowTslDebugInfomation();
	void ShowTeamDeathPopup();
	void ShowPlayerControllerBindActions_Admin();
	void ShowMatchResult();
	void ShowInGameMenu_Gamepad();
	void ShowInGameMenu();
	void ShowGotoLobbyPopUp();
	void ShowEmoteWheel();
	void SetVoiceComponent(class UVoiceComponent* Component);
	void SetDefaultFOV(float NewFOV);
	void SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void ServerViewTargetReplicateUpdate();
	void ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void ServerSuicide();
	void ServerStopOtherPlayersTestCheat();
	void ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void ServerSteamNetworkStatusLog(int CountPerGame);
	void ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void ServerStartHoldRotation(const struct FRotator& Current);
	void ServerSpawnVehicle();
	void ServerSetViewTarget(class AActor* NewViewTarget);
	void ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void ServerSetSpawnKit(int Index);
	void ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void ServerSetControlRotation(const struct FRotator& Rotation);
	void ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void ServerSendPacketReliable(TArray<unsigned char> Packet);
	void ServerSendLogMissionListOpen_Unreliable();
	void ServerSendLogMissionListOpen_Reliable();
	void ServerSay(const struct FString& Msg);
	void ServerResumeNpc(class APawn* InPawn);
	void ServerResetWheeledVehicleTransform();
	void ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPauseNpc(class APawn* InPawn);
	void ServerPauseAfterTick();
	void ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void ServerNextSetViewTarget(bool bIsPrev);
	void ServerNextFollowCharacter(bool bIsPrev);
	void ServerMoveToVehicleSeat(int SeatIndex);
	void ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void ServerMapLoadFinishedOnClient();
	void ServerLogXboxUnautorizedDevice();
	void ServerLeaveVehicle();
	void ServerLeaveMatchIntentionally();
	void ServerLeaveDebugPC();
	void ServerKnockdownNpc(class APawn* InPawn);
	void ServerKnockbackNpc(class APawn* InPawn);
	void ServerKillNpc(class APawn* InPawn);
	void ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void ServerJoinDebugPC();
	void ServerEACClientConnected();
	void ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void ServerCheatDestroyActors();
	void ServerCheat(const struct FString& Msg);
	void ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ServerBroadCastCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void ServerAIPath(class APawn* InPawn);
	void ServerAdmin(const struct FString& AdminCommand);
	void Server_UpdateTracerManager(bool bTracerOn);
	void Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void Server_ToggleTracerManger();
	void Server_ShutdownTracerManager();
	void Server_SendWheelTrackInfo(const struct FString& Info);
	void Server_BroadCastMidGameBanMessageForUncheater();
	void SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void SendSystemMessage(const struct FText& Message, float MessageDuration);
	void Say(const struct FString& Msg);
	void SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void SaveGearProfile(int ProfileIndex, TArray<class UClass*> inArray);
	void SaveDistributedLoadout(TArray<class UClass*> InItemArray);
	void ResetMinimapSize();
	void ResetEmoteWheelPadLBRB();
	void ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void ReliablePing(int SeqID, int64_t DateTimeTick);
	void PrevMinimapSize();
	void PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool OnToggleMissionListPad();
	bool OnToggleMapPad();
	bool OnToggleInventoryPad();
	bool OnToggleInGameMenuPad();
	bool OnToggleExtendedMinimapPad();
	bool OnToggleCameraPad();
	void OnToggleCamera();
	bool OnStopHoldThrowableItemWheel();
	bool OnStopHoldRotationPad();
	bool OnStopHoldHealItemWheel();
	bool OnStartToggleCameraPadRB();
	bool OnStartToggleCameraPadLB();
	bool OnStartHoldThrowableItemWheel();
	bool OnStartHoldRotationPad();
	bool OnStartHoldHealItemWheel();
	void OnShowCastingBarWidget(float CastTime, const struct FText& CastName, bool OnOff);
	void OnRep_TracerManager();
	void OnRep_Team();
	void OnRep_TargetViewRotation();
	void OnRep_CameraViewBehaviour();
	void OnRep_bUseTPAntibotClient();
	void OnRep_bEnableGVoice();
	void OnRep_AllowVoiceChatInput();
	void OnMoveToVehicleSeat(unsigned char idx);
	void OnItemStackCountHandlingMode();
	bool OnInteractInVehiclePad();
	bool OnInteractGamepad();
	void OnFinishInteractionCastOnServer(class UObject* CastObject);
	void OnFinishInteractionCastOnClient(class UObject* CastObject);
	void OnExecuteExitCommand();
	bool OnEndToggleCameraPadRB();
	bool OnEndToggleCameraPadLB();
	void OnEmoteAnimation(unsigned char InIndex);
	void OnClickedReportButton(const struct FString& NetId);
	void OnCancelInteractionCast(class UObject* CastObject);
	void OnBeginningOptimizationStateChanged();
	void OnAutomatedTesting();
	void OffItemStackCountHandlingMode();
	void ObserverTeleportTo(const struct FVector& Location);
	void NextSetViewTarget();
	void NextMinimapSize();
	void MobileBodiesStatistics();
	void KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	bool IsTeleportModeOn();
	bool IsSpectatorState();
	bool IsSpectating();
	bool IsSameObservingCameraMode();
	bool IsReplayingKillcam();
	bool IsReplaying();
	bool IsObserving();
	bool IsMissionListDisplayable();
	bool IsLiveReplaying();
	bool IsKillerSpectating();
	bool IsItemStackCountHandlingMode();
	bool IsHighPing();
	bool IsHighlightPlaying();
	bool IsHighlightFadeOut();
	bool IsGroggying();
	bool IsGamepadHoldProcessing();
	bool IsGameInputAllowed();
	void HideTslDebugInfomation();
	void HideMatchResult();
	void HideEmoteWheel();
	bool HasNextSpectateCharacter();
	void HandleReviveProgress(float Value);
	void HandleReviveFinish();
	class UVoiceComponent* GetVoiceComponent();
	class ATslCharacter* GetViewTargetTslCharacter();
	class ATeam* GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> GetTslPlayerMatchResultInfos();
	class ATslCharacter* GetTslCharacter();
	TArray<class ATslPlayerState*> GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int GetTeamOverallKillCountAtObserving();
	int GetTeamMemberCount();
	int GetTeamIdAtObserving();
	struct FRotator GetTargetViewRotation();
	TArray<class ATslPlayerState*> GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString GetSpectatingPlayerName();
	struct FString GetSpectatingOrFollowingTslCharacterNetId();
	TArray<class UClass*> GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> GetReplicateTeamMembers();
	TArray<class ATslCharacter*> GetReplicateKillerTeamMembers();
	TArray<class ATslCharacter*> GetReplicateCharacters();
	TArray<class ACarePackageItem*> GetReplicateCarePackageItems();
	float GetOtherElapsedCastTime();
	float GetOtherCastTime();
	struct FText GetOtherCastingName();
	void GetObserverCameraMode();
	void GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> GetKeysForAction(const struct FName& ActionName);
	struct FText GetHudDebugText();
	TArray<class UClass*> GetGearProfile(int ProfileIndex);
	TArray<class ATslPlayerState*> GetDeadPlayerStates();
	float GetCurrentHoldProgressRate();
	TArray<class ATeam*> GetClientTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientSquadInTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool GetCanAllSpectate();
	class ATeam* GetCachedTeam();
	TArray<struct FTslReportUserInfo> GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> GetAllPlayerStates();
	int GetAliveTeamMemberCount(bool bIncludeQuitter);
	void ForceGotoLobbyPopUpHandler();
	void DumpActorDetailByRaycast();
	void DropItem(const struct FString& ItemTypeName);
	void DeleteMapMarker();
	bool CompleteReportKiller();
	void CloseKickPlayerWarningPopupAndTerminate();
	void CloseKickPlayerWarningPopup();
	void ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void ClientWasKickedAndExitTP(const struct FText& KickReason);
	void ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void ClientUpdateDropPackageAchievement();
	void ClientUpdateCollisionResponseToPawn(bool bActive);
	void ClientUpdateCarePackageAchievement();
	void ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void ClientTestCheat(int InIndex, int InLoopingCounter);
	void ClientStopTestCheat();
	void ClientStartOnlineGame();
	void ClientShowMatchResult();
	void ClientShowCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void ClientSetCanAllSpectate(bool InbCanSpectate);
	void ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void ClientSendPacketReliable(TArray<unsigned char> Packet);
	void ClientRestoreSpectatorOnReconnection();
	void ClientProcessRevive();
	void ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount);
	void ClientOnCharacterRestart();
	void ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbCanReport);
	void ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void ClientNpcCount(int InCount);
	void ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void ClientNotifySpeedBoost(float Boost);
	void ClientNotifyRestrictingPlayArea();
	void ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void ClientNotifyHealAmount_Unreliable(float Heal);
	void ClientNotifyHealAmount_Reliable(float Heal);
	void ClientNotifyHealAmount(float Heal);
	void ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void ClientInteractByComponent(class UActorComponent* TargetComponent);
	void ClientInteract(class AActor* TargetObject);
	void ClientGameStarted();
	void ClientEndOnlineGame();
	void ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void ClientAdminCopyString(const struct FString& inString);
	void Client_TakeScreenshot();
	void Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void CheatSpawnActor(int InClassIndex, int InHeight);
	void CheatDestroyActors();
	void Cheat_ServerSpawnVehicle(int VehicleIndex);
	void ChangeMeshCommand(int Parameter, float Time);
	void CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool CanSeeTerrainThroughFogInTheAir();
	bool CanReport();
	void BP_Test_SpawnVehicle(int VehicleIndex);
	void BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void BEClient(const struct FString& Command);
	void AllowVoiceChatInput(bool bAllow);
	void Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslPlayerController_ESports
// 0x0000 (0x0E20 - 0x0E20)
class ATslPlayerController_ESports : public ATslBattleRoyalePlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPlayerController_ESports");
		return ptr;
	}


	void UpdateHud();
	void UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void UnreliablePing(int SeqID, int64_t DateTimeTick);
	void TracerProjectileModeType(int InMode, int InType);
	void TracerBulletModeType(int InMode, int InType);
	void ToggleTracerManger();
	void ToggleReport();
	void TogglePopupXBoxXIMAPI();
	void ToggleMissionList();
	void ToggleInventory();
	void TestUserProfile(float TotalPlayTime);
	void Test_SpawnVehicle();
	void Test_FirstCharacterKill();
	void Suicide();
	void SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ShutdownTracerManager();
	void ShowTslDebugInfomation();
	void ShowTeamDeathPopup();
	void ShowPlayerControllerBindActions_Admin();
	void ShowMatchResult();
	void ShowInGameMenu_Gamepad();
	void ShowInGameMenu();
	void ShowGotoLobbyPopUp();
	void ShowEmoteWheel();
	void SetVoiceComponent(class UVoiceComponent* Component);
	void SetDefaultFOV(float NewFOV);
	void SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void ServerViewTargetReplicateUpdate();
	void ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void ServerSuicide();
	void ServerStopOtherPlayersTestCheat();
	void ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void ServerSteamNetworkStatusLog(int CountPerGame);
	void ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void ServerStartHoldRotation(const struct FRotator& Current);
	void ServerSpawnVehicle();
	void ServerSetViewTarget(class AActor* NewViewTarget);
	void ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void ServerSetSpawnKit(int Index);
	void ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void ServerSetControlRotation(const struct FRotator& Rotation);
	void ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void ServerSendPacketReliable(TArray<unsigned char> Packet);
	void ServerSendLogMissionListOpen_Unreliable();
	void ServerSendLogMissionListOpen_Reliable();
	void ServerSay(const struct FString& Msg);
	void ServerResumeNpc(class APawn* InPawn);
	void ServerResetWheeledVehicleTransform();
	void ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPauseNpc(class APawn* InPawn);
	void ServerPauseAfterTick();
	void ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void ServerNextSetViewTarget(bool bIsPrev);
	void ServerNextFollowCharacter(bool bIsPrev);
	void ServerMoveToVehicleSeat(int SeatIndex);
	void ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void ServerMapLoadFinishedOnClient();
	void ServerLogXboxUnautorizedDevice();
	void ServerLeaveVehicle();
	void ServerLeaveMatchIntentionally();
	void ServerLeaveDebugPC();
	void ServerKnockdownNpc(class APawn* InPawn);
	void ServerKnockbackNpc(class APawn* InPawn);
	void ServerKillNpc(class APawn* InPawn);
	void ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void ServerJoinDebugPC();
	void ServerEACClientConnected();
	void ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void ServerCheatDestroyActors();
	void ServerCheat(const struct FString& Msg);
	void ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ServerBroadCastCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void ServerAIPath(class APawn* InPawn);
	void ServerAdmin(const struct FString& AdminCommand);
	void Server_UpdateTracerManager(bool bTracerOn);
	void Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void Server_ToggleTracerManger();
	void Server_ShutdownTracerManager();
	void Server_SendWheelTrackInfo(const struct FString& Info);
	void Server_BroadCastMidGameBanMessageForUncheater();
	void SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void SendSystemMessage(const struct FText& Message, float MessageDuration);
	void Say(const struct FString& Msg);
	void SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void SaveGearProfile(int ProfileIndex, TArray<class UClass*> inArray);
	void SaveDistributedLoadout(TArray<class UClass*> InItemArray);
	void ResetMinimapSize();
	void ResetEmoteWheelPadLBRB();
	void ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void ReliablePing(int SeqID, int64_t DateTimeTick);
	void PrevMinimapSize();
	void PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool OnToggleMissionListPad();
	bool OnToggleMapPad();
	bool OnToggleInventoryPad();
	bool OnToggleInGameMenuPad();
	bool OnToggleExtendedMinimapPad();
	bool OnToggleCameraPad();
	void OnToggleCamera();
	bool OnStopHoldThrowableItemWheel();
	bool OnStopHoldRotationPad();
	bool OnStopHoldHealItemWheel();
	bool OnStartToggleCameraPadRB();
	bool OnStartToggleCameraPadLB();
	bool OnStartHoldThrowableItemWheel();
	bool OnStartHoldRotationPad();
	bool OnStartHoldHealItemWheel();
	void OnShowCastingBarWidget(float CastTime, const struct FText& CastName, bool OnOff);
	void OnRep_TracerManager();
	void OnRep_Team();
	void OnRep_TargetViewRotation();
	void OnRep_CameraViewBehaviour();
	void OnRep_bUseTPAntibotClient();
	void OnRep_bEnableGVoice();
	void OnRep_AllowVoiceChatInput();
	void OnMoveToVehicleSeat(unsigned char idx);
	void OnItemStackCountHandlingMode();
	bool OnInteractInVehiclePad();
	bool OnInteractGamepad();
	void OnFinishInteractionCastOnServer(class UObject* CastObject);
	void OnFinishInteractionCastOnClient(class UObject* CastObject);
	void OnExecuteExitCommand();
	bool OnEndToggleCameraPadRB();
	bool OnEndToggleCameraPadLB();
	void OnEmoteAnimation(unsigned char InIndex);
	void OnClickedReportButton(const struct FString& NetId);
	void OnCancelInteractionCast(class UObject* CastObject);
	void OnBeginningOptimizationStateChanged();
	void OnAutomatedTesting();
	void OffItemStackCountHandlingMode();
	void ObserverTeleportTo(const struct FVector& Location);
	void NextSetViewTarget();
	void NextMinimapSize();
	void MobileBodiesStatistics();
	void KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	bool IsTeleportModeOn();
	bool IsSpectatorState();
	bool IsSpectating();
	bool IsSameObservingCameraMode();
	bool IsReplayingKillcam();
	bool IsReplaying();
	bool IsObserving();
	bool IsMissionListDisplayable();
	bool IsLiveReplaying();
	bool IsKillerSpectating();
	bool IsItemStackCountHandlingMode();
	bool IsHighPing();
	bool IsHighlightPlaying();
	bool IsHighlightFadeOut();
	bool IsGroggying();
	bool IsGamepadHoldProcessing();
	bool IsGameInputAllowed();
	void HideTslDebugInfomation();
	void HideMatchResult();
	void HideEmoteWheel();
	bool HasNextSpectateCharacter();
	void HandleReviveProgress(float Value);
	void HandleReviveFinish();
	class UVoiceComponent* GetVoiceComponent();
	class ATslCharacter* GetViewTargetTslCharacter();
	class ATeam* GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> GetTslPlayerMatchResultInfos();
	class ATslCharacter* GetTslCharacter();
	TArray<class ATslPlayerState*> GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int GetTeamOverallKillCountAtObserving();
	int GetTeamMemberCount();
	int GetTeamIdAtObserving();
	struct FRotator GetTargetViewRotation();
	TArray<class ATslPlayerState*> GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString GetSpectatingPlayerName();
	struct FString GetSpectatingOrFollowingTslCharacterNetId();
	TArray<class UClass*> GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> GetReplicateTeamMembers();
	TArray<class ATslCharacter*> GetReplicateKillerTeamMembers();
	TArray<class ATslCharacter*> GetReplicateCharacters();
	TArray<class ACarePackageItem*> GetReplicateCarePackageItems();
	float GetOtherElapsedCastTime();
	float GetOtherCastTime();
	struct FText GetOtherCastingName();
	void GetObserverCameraMode();
	void GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> GetKeysForAction(const struct FName& ActionName);
	struct FText GetHudDebugText();
	TArray<class UClass*> GetGearProfile(int ProfileIndex);
	TArray<class ATslPlayerState*> GetDeadPlayerStates();
	float GetCurrentHoldProgressRate();
	TArray<class ATeam*> GetClientTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientSquadInTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool GetCanAllSpectate();
	class ATeam* GetCachedTeam();
	TArray<struct FTslReportUserInfo> GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> GetAllPlayerStates();
	int GetAliveTeamMemberCount(bool bIncludeQuitter);
	void ForceGotoLobbyPopUpHandler();
	void DumpActorDetailByRaycast();
	void DropItem(const struct FString& ItemTypeName);
	void DeleteMapMarker();
	bool CompleteReportKiller();
	void CloseKickPlayerWarningPopupAndTerminate();
	void CloseKickPlayerWarningPopup();
	void ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void ClientWasKickedAndExitTP(const struct FText& KickReason);
	void ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void ClientUpdateDropPackageAchievement();
	void ClientUpdateCollisionResponseToPawn(bool bActive);
	void ClientUpdateCarePackageAchievement();
	void ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void ClientTestCheat(int InIndex, int InLoopingCounter);
	void ClientStopTestCheat();
	void ClientStartOnlineGame();
	void ClientShowMatchResult();
	void ClientShowCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void ClientSetCanAllSpectate(bool InbCanSpectate);
	void ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void ClientSendPacketReliable(TArray<unsigned char> Packet);
	void ClientRestoreSpectatorOnReconnection();
	void ClientProcessRevive();
	void ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount);
	void ClientOnCharacterRestart();
	void ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbCanReport);
	void ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void ClientNpcCount(int InCount);
	void ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void ClientNotifySpeedBoost(float Boost);
	void ClientNotifyRestrictingPlayArea();
	void ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void ClientNotifyHealAmount_Unreliable(float Heal);
	void ClientNotifyHealAmount_Reliable(float Heal);
	void ClientNotifyHealAmount(float Heal);
	void ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void ClientInteractByComponent(class UActorComponent* TargetComponent);
	void ClientInteract(class AActor* TargetObject);
	void ClientGameStarted();
	void ClientEndOnlineGame();
	void ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void ClientAdminCopyString(const struct FString& inString);
	void Client_TakeScreenshot();
	void Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void CheatSpawnActor(int InClassIndex, int InHeight);
	void CheatDestroyActors();
	void Cheat_ServerSpawnVehicle(int VehicleIndex);
	void ChangeMeshCommand(int Parameter, float Time);
	void CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool CanSeeTerrainThroughFogInTheAir();
	bool CanReport();
	void BP_Test_SpawnVehicle(int VehicleIndex);
	void BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void BEClient(const struct FString& Command);
	void AllowVoiceChatInput(bool bAllow);
	void Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslDemoSpectator
// 0x0040 (0x0E60 - 0x0E20)
class ATslDemoSpectator : public ATslPlayerController
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0E20(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDemoSpectator");
		return ptr;
	}


	void UpdateHud();
	void UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void UnreliablePing(int SeqID, int64_t DateTimeTick);
	void TracerProjectileModeType(int InMode, int InType);
	void TracerBulletModeType(int InMode, int InType);
	void ToggleTracerManger();
	void ToggleReport();
	void TogglePopupXBoxXIMAPI();
	void ToggleMissionList();
	void ToggleInventory();
	void TestUserProfile(float TotalPlayTime);
	void Test_SpawnVehicle();
	void Test_FirstCharacterKill();
	void Suicide();
	void SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ShutdownTracerManager();
	void ShowTslDebugInfomation();
	void ShowTeamDeathPopup();
	void ShowPlayerControllerBindActions_Admin();
	void ShowMatchResult();
	void ShowInGameMenu_Gamepad();
	void ShowInGameMenu();
	void ShowGotoLobbyPopUp();
	void ShowEmoteWheel();
	void SetVoiceComponent(class UVoiceComponent* Component);
	void SetDefaultFOV(float NewFOV);
	void SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void ServerViewTargetReplicateUpdate();
	void ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void ServerSuicide();
	void ServerStopOtherPlayersTestCheat();
	void ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void ServerSteamNetworkStatusLog(int CountPerGame);
	void ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void ServerStartHoldRotation(const struct FRotator& Current);
	void ServerSpawnVehicle();
	void ServerSetViewTarget(class AActor* NewViewTarget);
	void ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void ServerSetSpawnKit(int Index);
	void ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void ServerSetControlRotation(const struct FRotator& Rotation);
	void ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void ServerSendPacketReliable(TArray<unsigned char> Packet);
	void ServerSendLogMissionListOpen_Unreliable();
	void ServerSendLogMissionListOpen_Reliable();
	void ServerSay(const struct FString& Msg);
	void ServerResumeNpc(class APawn* InPawn);
	void ServerResetWheeledVehicleTransform();
	void ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPauseNpc(class APawn* InPawn);
	void ServerPauseAfterTick();
	void ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void ServerNextSetViewTarget(bool bIsPrev);
	void ServerNextFollowCharacter(bool bIsPrev);
	void ServerMoveToVehicleSeat(int SeatIndex);
	void ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void ServerMapLoadFinishedOnClient();
	void ServerLogXboxUnautorizedDevice();
	void ServerLeaveVehicle();
	void ServerLeaveMatchIntentionally();
	void ServerLeaveDebugPC();
	void ServerKnockdownNpc(class APawn* InPawn);
	void ServerKnockbackNpc(class APawn* InPawn);
	void ServerKillNpc(class APawn* InPawn);
	void ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void ServerJoinDebugPC();
	void ServerEACClientConnected();
	void ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void ServerCheatDestroyActors();
	void ServerCheat(const struct FString& Msg);
	void ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ServerBroadCastCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void ServerAIPath(class APawn* InPawn);
	void ServerAdmin(const struct FString& AdminCommand);
	void Server_UpdateTracerManager(bool bTracerOn);
	void Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void Server_ToggleTracerManger();
	void Server_ShutdownTracerManager();
	void Server_SendWheelTrackInfo(const struct FString& Info);
	void Server_BroadCastMidGameBanMessageForUncheater();
	void SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void SendSystemMessage(const struct FText& Message, float MessageDuration);
	void Say(const struct FString& Msg);
	void SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void SaveGearProfile(int ProfileIndex, TArray<class UClass*> inArray);
	void SaveDistributedLoadout(TArray<class UClass*> InItemArray);
	void ResetMinimapSize();
	void ResetEmoteWheelPadLBRB();
	void ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void ReliablePing(int SeqID, int64_t DateTimeTick);
	void PrevMinimapSize();
	void PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool OnToggleMissionListPad();
	bool OnToggleMapPad();
	bool OnToggleInventoryPad();
	bool OnToggleInGameMenuPad();
	bool OnToggleExtendedMinimapPad();
	bool OnToggleCameraPad();
	void OnToggleCamera();
	bool OnStopHoldThrowableItemWheel();
	bool OnStopHoldRotationPad();
	bool OnStopHoldHealItemWheel();
	bool OnStartToggleCameraPadRB();
	bool OnStartToggleCameraPadLB();
	bool OnStartHoldThrowableItemWheel();
	bool OnStartHoldRotationPad();
	bool OnStartHoldHealItemWheel();
	void OnShowCastingBarWidget(float CastTime, const struct FText& CastName, bool OnOff);
	void OnRep_TracerManager();
	void OnRep_Team();
	void OnRep_TargetViewRotation();
	void OnRep_CameraViewBehaviour();
	void OnRep_bUseTPAntibotClient();
	void OnRep_bEnableGVoice();
	void OnRep_AllowVoiceChatInput();
	void OnMoveToVehicleSeat(unsigned char idx);
	void OnItemStackCountHandlingMode();
	bool OnInteractInVehiclePad();
	bool OnInteractGamepad();
	void OnFinishInteractionCastOnServer(class UObject* CastObject);
	void OnFinishInteractionCastOnClient(class UObject* CastObject);
	void OnExecuteExitCommand();
	bool OnEndToggleCameraPadRB();
	bool OnEndToggleCameraPadLB();
	void OnEmoteAnimation(unsigned char InIndex);
	void OnClickedReportButton(const struct FString& NetId);
	void OnCancelInteractionCast(class UObject* CastObject);
	void OnBeginningOptimizationStateChanged();
	void OnAutomatedTesting();
	void OffItemStackCountHandlingMode();
	void ObserverTeleportTo(const struct FVector& Location);
	void NextSetViewTarget();
	void NextMinimapSize();
	void MobileBodiesStatistics();
	void KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	bool IsTeleportModeOn();
	bool IsSpectatorState();
	bool IsSpectating();
	bool IsSameObservingCameraMode();
	bool IsReplayingKillcam();
	bool IsReplaying();
	bool IsObserving();
	bool IsMissionListDisplayable();
	bool IsLiveReplaying();
	bool IsKillerSpectating();
	bool IsItemStackCountHandlingMode();
	bool IsHighPing();
	bool IsHighlightPlaying();
	bool IsHighlightFadeOut();
	bool IsGroggying();
	bool IsGamepadHoldProcessing();
	bool IsGameInputAllowed();
	void HideTslDebugInfomation();
	void HideMatchResult();
	void HideEmoteWheel();
	bool HasNextSpectateCharacter();
	void HandleReviveProgress(float Value);
	void HandleReviveFinish();
	class UVoiceComponent* GetVoiceComponent();
	class ATslCharacter* GetViewTargetTslCharacter();
	class ATeam* GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> GetTslPlayerMatchResultInfos();
	class ATslCharacter* GetTslCharacter();
	TArray<class ATslPlayerState*> GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int GetTeamOverallKillCountAtObserving();
	int GetTeamMemberCount();
	int GetTeamIdAtObserving();
	struct FRotator GetTargetViewRotation();
	TArray<class ATslPlayerState*> GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString GetSpectatingPlayerName();
	struct FString GetSpectatingOrFollowingTslCharacterNetId();
	TArray<class UClass*> GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> GetReplicateTeamMembers();
	TArray<class ATslCharacter*> GetReplicateKillerTeamMembers();
	TArray<class ATslCharacter*> GetReplicateCharacters();
	TArray<class ACarePackageItem*> GetReplicateCarePackageItems();
	float GetOtherElapsedCastTime();
	float GetOtherCastTime();
	struct FText GetOtherCastingName();
	void GetObserverCameraMode();
	void GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> GetKeysForAction(const struct FName& ActionName);
	struct FText GetHudDebugText();
	TArray<class UClass*> GetGearProfile(int ProfileIndex);
	TArray<class ATslPlayerState*> GetDeadPlayerStates();
	float GetCurrentHoldProgressRate();
	TArray<class ATeam*> GetClientTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientSquadInTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool GetCanAllSpectate();
	class ATeam* GetCachedTeam();
	TArray<struct FTslReportUserInfo> GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> GetAllPlayerStates();
	int GetAliveTeamMemberCount(bool bIncludeQuitter);
	void ForceGotoLobbyPopUpHandler();
	void DumpActorDetailByRaycast();
	void DropItem(const struct FString& ItemTypeName);
	void DeleteMapMarker();
	bool CompleteReportKiller();
	void CloseKickPlayerWarningPopupAndTerminate();
	void CloseKickPlayerWarningPopup();
	void ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void ClientWasKickedAndExitTP(const struct FText& KickReason);
	void ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void ClientUpdateDropPackageAchievement();
	void ClientUpdateCollisionResponseToPawn(bool bActive);
	void ClientUpdateCarePackageAchievement();
	void ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void ClientTestCheat(int InIndex, int InLoopingCounter);
	void ClientStopTestCheat();
	void ClientStartOnlineGame();
	void ClientShowMatchResult();
	void ClientShowCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void ClientSetCanAllSpectate(bool InbCanSpectate);
	void ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void ClientSendPacketReliable(TArray<unsigned char> Packet);
	void ClientRestoreSpectatorOnReconnection();
	void ClientProcessRevive();
	void ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount);
	void ClientOnCharacterRestart();
	void ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbCanReport);
	void ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void ClientNpcCount(int InCount);
	void ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void ClientNotifySpeedBoost(float Boost);
	void ClientNotifyRestrictingPlayArea();
	void ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void ClientNotifyHealAmount_Unreliable(float Heal);
	void ClientNotifyHealAmount_Reliable(float Heal);
	void ClientNotifyHealAmount(float Heal);
	void ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void ClientInteractByComponent(class UActorComponent* TargetComponent);
	void ClientInteract(class AActor* TargetObject);
	void ClientGameStarted();
	void ClientEndOnlineGame();
	void ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void ClientAdminCopyString(const struct FString& inString);
	void Client_TakeScreenshot();
	void Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void CheatSpawnActor(int InClassIndex, int InHeight);
	void CheatDestroyActors();
	void Cheat_ServerSpawnVehicle(int VehicleIndex);
	void ChangeMeshCommand(int Parameter, float Time);
	void CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool CanSeeTerrainThroughFogInTheAir();
	bool CanReport();
	void BP_Test_SpawnVehicle(int VehicleIndex);
	void BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void BEClient(const struct FString& Command);
	void AllowVoiceChatInput(bool bAllow);
	void Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslPlayerController_Menu
// 0x0000 (0x0E20 - 0x0E20)
class ATslPlayerController_Menu : public ATslPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPlayerController_Menu");
		return ptr;
	}


	void UpdateHud();
	void UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void UnreliablePing(int SeqID, int64_t DateTimeTick);
	void TracerProjectileModeType(int InMode, int InType);
	void TracerBulletModeType(int InMode, int InType);
	void ToggleTracerManger();
	void ToggleReport();
	void TogglePopupXBoxXIMAPI();
	void ToggleMissionList();
	void ToggleInventory();
	void TestUserProfile(float TotalPlayTime);
	void Test_SpawnVehicle();
	void Test_FirstCharacterKill();
	void Suicide();
	void SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ShutdownTracerManager();
	void ShowTslDebugInfomation();
	void ShowTeamDeathPopup();
	void ShowPlayerControllerBindActions_Admin();
	void ShowMatchResult();
	void ShowInGameMenu_Gamepad();
	void ShowInGameMenu();
	void ShowGotoLobbyPopUp();
	void ShowEmoteWheel();
	void SetVoiceComponent(class UVoiceComponent* Component);
	void SetDefaultFOV(float NewFOV);
	void SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void ServerViewTargetReplicateUpdate();
	void ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void ServerSuicide();
	void ServerStopOtherPlayersTestCheat();
	void ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void ServerSteamNetworkStatusLog(int CountPerGame);
	void ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void ServerStartHoldRotation(const struct FRotator& Current);
	void ServerSpawnVehicle();
	void ServerSetViewTarget(class AActor* NewViewTarget);
	void ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void ServerSetSpawnKit(int Index);
	void ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void ServerSetControlRotation(const struct FRotator& Rotation);
	void ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void ServerSendPacketReliable(TArray<unsigned char> Packet);
	void ServerSendLogMissionListOpen_Unreliable();
	void ServerSendLogMissionListOpen_Reliable();
	void ServerSay(const struct FString& Msg);
	void ServerResumeNpc(class APawn* InPawn);
	void ServerResetWheeledVehicleTransform();
	void ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPauseNpc(class APawn* InPawn);
	void ServerPauseAfterTick();
	void ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void ServerNextSetViewTarget(bool bIsPrev);
	void ServerNextFollowCharacter(bool bIsPrev);
	void ServerMoveToVehicleSeat(int SeatIndex);
	void ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void ServerMapLoadFinishedOnClient();
	void ServerLogXboxUnautorizedDevice();
	void ServerLeaveVehicle();
	void ServerLeaveMatchIntentionally();
	void ServerLeaveDebugPC();
	void ServerKnockdownNpc(class APawn* InPawn);
	void ServerKnockbackNpc(class APawn* InPawn);
	void ServerKillNpc(class APawn* InPawn);
	void ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void ServerJoinDebugPC();
	void ServerEACClientConnected();
	void ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void ServerCheatDestroyActors();
	void ServerCheat(const struct FString& Msg);
	void ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ServerBroadCastCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void ServerAIPath(class APawn* InPawn);
	void ServerAdmin(const struct FString& AdminCommand);
	void Server_UpdateTracerManager(bool bTracerOn);
	void Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void Server_ToggleTracerManger();
	void Server_ShutdownTracerManager();
	void Server_SendWheelTrackInfo(const struct FString& Info);
	void Server_BroadCastMidGameBanMessageForUncheater();
	void SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void SendSystemMessage(const struct FText& Message, float MessageDuration);
	void Say(const struct FString& Msg);
	void SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void SaveGearProfile(int ProfileIndex, TArray<class UClass*> inArray);
	void SaveDistributedLoadout(TArray<class UClass*> InItemArray);
	void ResetMinimapSize();
	void ResetEmoteWheelPadLBRB();
	void ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void ReliablePing(int SeqID, int64_t DateTimeTick);
	void PrevMinimapSize();
	void PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool OnToggleMissionListPad();
	bool OnToggleMapPad();
	bool OnToggleInventoryPad();
	bool OnToggleInGameMenuPad();
	bool OnToggleExtendedMinimapPad();
	bool OnToggleCameraPad();
	void OnToggleCamera();
	bool OnStopHoldThrowableItemWheel();
	bool OnStopHoldRotationPad();
	bool OnStopHoldHealItemWheel();
	bool OnStartToggleCameraPadRB();
	bool OnStartToggleCameraPadLB();
	bool OnStartHoldThrowableItemWheel();
	bool OnStartHoldRotationPad();
	bool OnStartHoldHealItemWheel();
	void OnShowCastingBarWidget(float CastTime, const struct FText& CastName, bool OnOff);
	void OnRep_TracerManager();
	void OnRep_Team();
	void OnRep_TargetViewRotation();
	void OnRep_CameraViewBehaviour();
	void OnRep_bUseTPAntibotClient();
	void OnRep_bEnableGVoice();
	void OnRep_AllowVoiceChatInput();
	void OnMoveToVehicleSeat(unsigned char idx);
	void OnItemStackCountHandlingMode();
	bool OnInteractInVehiclePad();
	bool OnInteractGamepad();
	void OnFinishInteractionCastOnServer(class UObject* CastObject);
	void OnFinishInteractionCastOnClient(class UObject* CastObject);
	void OnExecuteExitCommand();
	bool OnEndToggleCameraPadRB();
	bool OnEndToggleCameraPadLB();
	void OnEmoteAnimation(unsigned char InIndex);
	void OnClickedReportButton(const struct FString& NetId);
	void OnCancelInteractionCast(class UObject* CastObject);
	void OnBeginningOptimizationStateChanged();
	void OnAutomatedTesting();
	void OffItemStackCountHandlingMode();
	void ObserverTeleportTo(const struct FVector& Location);
	void NextSetViewTarget();
	void NextMinimapSize();
	void MobileBodiesStatistics();
	void KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	bool IsTeleportModeOn();
	bool IsSpectatorState();
	bool IsSpectating();
	bool IsSameObservingCameraMode();
	bool IsReplayingKillcam();
	bool IsReplaying();
	bool IsObserving();
	bool IsMissionListDisplayable();
	bool IsLiveReplaying();
	bool IsKillerSpectating();
	bool IsItemStackCountHandlingMode();
	bool IsHighPing();
	bool IsHighlightPlaying();
	bool IsHighlightFadeOut();
	bool IsGroggying();
	bool IsGamepadHoldProcessing();
	bool IsGameInputAllowed();
	void HideTslDebugInfomation();
	void HideMatchResult();
	void HideEmoteWheel();
	bool HasNextSpectateCharacter();
	void HandleReviveProgress(float Value);
	void HandleReviveFinish();
	class UVoiceComponent* GetVoiceComponent();
	class ATslCharacter* GetViewTargetTslCharacter();
	class ATeam* GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> GetTslPlayerMatchResultInfos();
	class ATslCharacter* GetTslCharacter();
	TArray<class ATslPlayerState*> GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int GetTeamOverallKillCountAtObserving();
	int GetTeamMemberCount();
	int GetTeamIdAtObserving();
	struct FRotator GetTargetViewRotation();
	TArray<class ATslPlayerState*> GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString GetSpectatingPlayerName();
	struct FString GetSpectatingOrFollowingTslCharacterNetId();
	TArray<class UClass*> GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> GetReplicateTeamMembers();
	TArray<class ATslCharacter*> GetReplicateKillerTeamMembers();
	TArray<class ATslCharacter*> GetReplicateCharacters();
	TArray<class ACarePackageItem*> GetReplicateCarePackageItems();
	float GetOtherElapsedCastTime();
	float GetOtherCastTime();
	struct FText GetOtherCastingName();
	void GetObserverCameraMode();
	void GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> GetKeysForAction(const struct FName& ActionName);
	struct FText GetHudDebugText();
	TArray<class UClass*> GetGearProfile(int ProfileIndex);
	TArray<class ATslPlayerState*> GetDeadPlayerStates();
	float GetCurrentHoldProgressRate();
	TArray<class ATeam*> GetClientTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientSquadInTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool GetCanAllSpectate();
	class ATeam* GetCachedTeam();
	TArray<struct FTslReportUserInfo> GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> GetAllPlayerStates();
	int GetAliveTeamMemberCount(bool bIncludeQuitter);
	void ForceGotoLobbyPopUpHandler();
	void DumpActorDetailByRaycast();
	void DropItem(const struct FString& ItemTypeName);
	void DeleteMapMarker();
	bool CompleteReportKiller();
	void CloseKickPlayerWarningPopupAndTerminate();
	void CloseKickPlayerWarningPopup();
	void ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void ClientWasKickedAndExitTP(const struct FText& KickReason);
	void ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void ClientUpdateDropPackageAchievement();
	void ClientUpdateCollisionResponseToPawn(bool bActive);
	void ClientUpdateCarePackageAchievement();
	void ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void ClientTestCheat(int InIndex, int InLoopingCounter);
	void ClientStopTestCheat();
	void ClientStartOnlineGame();
	void ClientShowMatchResult();
	void ClientShowCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void ClientSetCanAllSpectate(bool InbCanSpectate);
	void ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void ClientSendPacketReliable(TArray<unsigned char> Packet);
	void ClientRestoreSpectatorOnReconnection();
	void ClientProcessRevive();
	void ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount);
	void ClientOnCharacterRestart();
	void ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbCanReport);
	void ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void ClientNpcCount(int InCount);
	void ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void ClientNotifySpeedBoost(float Boost);
	void ClientNotifyRestrictingPlayArea();
	void ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void ClientNotifyHealAmount_Unreliable(float Heal);
	void ClientNotifyHealAmount_Reliable(float Heal);
	void ClientNotifyHealAmount(float Heal);
	void ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void ClientInteractByComponent(class UActorComponent* TargetComponent);
	void ClientInteract(class AActor* TargetObject);
	void ClientGameStarted();
	void ClientEndOnlineGame();
	void ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void ClientAdminCopyString(const struct FString& inString);
	void Client_TakeScreenshot();
	void Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void CheatSpawnActor(int InClassIndex, int InHeight);
	void CheatDestroyActors();
	void Cheat_ServerSpawnVehicle(int VehicleIndex);
	void ChangeMeshCommand(int Parameter, float Time);
	void CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool CanSeeTerrainThroughFogInTheAir();
	bool CanReport();
	void BP_Test_SpawnVehicle(int VehicleIndex);
	void BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void BEClient(const struct FString& Command);
	void AllowVoiceChatInput(bool bAllow);
	void Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslTrainingPlayerController
// 0x0000 (0x0E20 - 0x0E20)
class ATslTrainingPlayerController : public ATslPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTrainingPlayerController");
		return ptr;
	}


	void UpdateHud();
	void UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void UnreliablePing(int SeqID, int64_t DateTimeTick);
	void TracerProjectileModeType(int InMode, int InType);
	void TracerBulletModeType(int InMode, int InType);
	void ToggleTracerManger();
	void ToggleReport();
	void TogglePopupXBoxXIMAPI();
	void ToggleMissionList();
	void ToggleInventory();
	void TestUserProfile(float TotalPlayTime);
	void Test_SpawnVehicle();
	void Test_FirstCharacterKill();
	void Suicide();
	void SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ShutdownTracerManager();
	void ShowTslDebugInfomation();
	void ShowTeamDeathPopup();
	void ShowPlayerControllerBindActions_Admin();
	void ShowMatchResult();
	void ShowInGameMenu_Gamepad();
	void ShowInGameMenu();
	void ShowGotoLobbyPopUp();
	void ShowEmoteWheel();
	void SetVoiceComponent(class UVoiceComponent* Component);
	void SetDefaultFOV(float NewFOV);
	void SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void ServerViewTargetReplicateUpdate();
	void ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void ServerSuicide();
	void ServerStopOtherPlayersTestCheat();
	void ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void ServerSteamNetworkStatusLog(int CountPerGame);
	void ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void ServerStartHoldRotation(const struct FRotator& Current);
	void ServerSpawnVehicle();
	void ServerSetViewTarget(class AActor* NewViewTarget);
	void ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void ServerSetSpawnKit(int Index);
	void ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void ServerSetControlRotation(const struct FRotator& Rotation);
	void ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void ServerSendPacketReliable(TArray<unsigned char> Packet);
	void ServerSendLogMissionListOpen_Unreliable();
	void ServerSendLogMissionListOpen_Reliable();
	void ServerSay(const struct FString& Msg);
	void ServerResumeNpc(class APawn* InPawn);
	void ServerResetWheeledVehicleTransform();
	void ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void ServerPauseNpc(class APawn* InPawn);
	void ServerPauseAfterTick();
	void ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void ServerNextSetViewTarget(bool bIsPrev);
	void ServerNextFollowCharacter(bool bIsPrev);
	void ServerMoveToVehicleSeat(int SeatIndex);
	void ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void ServerMapLoadFinishedOnClient();
	void ServerLogXboxUnautorizedDevice();
	void ServerLeaveVehicle();
	void ServerLeaveMatchIntentionally();
	void ServerLeaveDebugPC();
	void ServerKnockdownNpc(class APawn* InPawn);
	void ServerKnockbackNpc(class APawn* InPawn);
	void ServerKillNpc(class APawn* InPawn);
	void ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void ServerJoinDebugPC();
	void ServerEACClientConnected();
	void ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void ServerCheatDestroyActors();
	void ServerCheat(const struct FString& Msg);
	void ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ServerBroadCastCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void ServerAIPath(class APawn* InPawn);
	void ServerAdmin(const struct FString& AdminCommand);
	void Server_UpdateTracerManager(bool bTracerOn);
	void Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void Server_ToggleTracerManger();
	void Server_ShutdownTracerManager();
	void Server_SendWheelTrackInfo(const struct FString& Info);
	void Server_BroadCastMidGameBanMessageForUncheater();
	void SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void SendSystemMessage(const struct FText& Message, float MessageDuration);
	void Say(const struct FString& Msg);
	void SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void SaveGearProfile(int ProfileIndex, TArray<class UClass*> inArray);
	void SaveDistributedLoadout(TArray<class UClass*> InItemArray);
	void ResetMinimapSize();
	void ResetEmoteWheelPadLBRB();
	void ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void ReliablePing(int SeqID, int64_t DateTimeTick);
	void PrevMinimapSize();
	void PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool OnToggleMissionListPad();
	bool OnToggleMapPad();
	bool OnToggleInventoryPad();
	bool OnToggleInGameMenuPad();
	bool OnToggleExtendedMinimapPad();
	bool OnToggleCameraPad();
	void OnToggleCamera();
	bool OnStopHoldThrowableItemWheel();
	bool OnStopHoldRotationPad();
	bool OnStopHoldHealItemWheel();
	bool OnStartToggleCameraPadRB();
	bool OnStartToggleCameraPadLB();
	bool OnStartHoldThrowableItemWheel();
	bool OnStartHoldRotationPad();
	bool OnStartHoldHealItemWheel();
	void OnShowCastingBarWidget(float CastTime, const struct FText& CastName, bool OnOff);
	void OnRep_TracerManager();
	void OnRep_Team();
	void OnRep_TargetViewRotation();
	void OnRep_CameraViewBehaviour();
	void OnRep_bUseTPAntibotClient();
	void OnRep_bEnableGVoice();
	void OnRep_AllowVoiceChatInput();
	void OnMoveToVehicleSeat(unsigned char idx);
	void OnItemStackCountHandlingMode();
	bool OnInteractInVehiclePad();
	bool OnInteractGamepad();
	void OnFinishInteractionCastOnServer(class UObject* CastObject);
	void OnFinishInteractionCastOnClient(class UObject* CastObject);
	void OnExecuteExitCommand();
	bool OnEndToggleCameraPadRB();
	bool OnEndToggleCameraPadLB();
	void OnEmoteAnimation(unsigned char InIndex);
	void OnClickedReportButton(const struct FString& NetId);
	void OnCancelInteractionCast(class UObject* CastObject);
	void OnBeginningOptimizationStateChanged();
	void OnAutomatedTesting();
	void OffItemStackCountHandlingMode();
	void ObserverTeleportTo(const struct FVector& Location);
	void NextSetViewTarget();
	void NextMinimapSize();
	void MobileBodiesStatistics();
	void KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	bool IsTeleportModeOn();
	bool IsSpectatorState();
	bool IsSpectating();
	bool IsSameObservingCameraMode();
	bool IsReplayingKillcam();
	bool IsReplaying();
	bool IsObserving();
	bool IsMissionListDisplayable();
	bool IsLiveReplaying();
	bool IsKillerSpectating();
	bool IsItemStackCountHandlingMode();
	bool IsHighPing();
	bool IsHighlightPlaying();
	bool IsHighlightFadeOut();
	bool IsGroggying();
	bool IsGamepadHoldProcessing();
	bool IsGameInputAllowed();
	void HideTslDebugInfomation();
	void HideMatchResult();
	void HideEmoteWheel();
	bool HasNextSpectateCharacter();
	void HandleReviveProgress(float Value);
	void HandleReviveFinish();
	class UVoiceComponent* GetVoiceComponent();
	class ATslCharacter* GetViewTargetTslCharacter();
	class ATeam* GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> GetTslPlayerMatchResultInfos();
	class ATslCharacter* GetTslCharacter();
	TArray<class ATslPlayerState*> GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int GetTeamOverallKillCountAtObserving();
	int GetTeamMemberCount();
	int GetTeamIdAtObserving();
	struct FRotator GetTargetViewRotation();
	TArray<class ATslPlayerState*> GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString GetSpectatingPlayerName();
	struct FString GetSpectatingOrFollowingTslCharacterNetId();
	TArray<class UClass*> GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> GetReplicateTeamMembers();
	TArray<class ATslCharacter*> GetReplicateKillerTeamMembers();
	TArray<class ATslCharacter*> GetReplicateCharacters();
	TArray<class ACarePackageItem*> GetReplicateCarePackageItems();
	float GetOtherElapsedCastTime();
	float GetOtherCastTime();
	struct FText GetOtherCastingName();
	void GetObserverCameraMode();
	void GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> GetKeysForAction(const struct FName& ActionName);
	struct FText GetHudDebugText();
	TArray<class UClass*> GetGearProfile(int ProfileIndex);
	TArray<class ATslPlayerState*> GetDeadPlayerStates();
	float GetCurrentHoldProgressRate();
	TArray<class ATeam*> GetClientTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientSquadInTeam(bool IncludeSelf);
	TArray<class ATeam*> GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool GetCanAllSpectate();
	class ATeam* GetCachedTeam();
	TArray<struct FTslReportUserInfo> GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> GetAllPlayerStates();
	int GetAliveTeamMemberCount(bool bIncludeQuitter);
	void ForceGotoLobbyPopUpHandler();
	void DumpActorDetailByRaycast();
	void DropItem(const struct FString& ItemTypeName);
	void DeleteMapMarker();
	bool CompleteReportKiller();
	void CloseKickPlayerWarningPopupAndTerminate();
	void CloseKickPlayerWarningPopup();
	void ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void ClientWasKickedAndExitTP(const struct FText& KickReason);
	void ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void ClientUpdateDropPackageAchievement();
	void ClientUpdateCollisionResponseToPawn(bool bActive);
	void ClientUpdateCarePackageAchievement();
	void ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void ClientTestCheat(int InIndex, int InLoopingCounter);
	void ClientStopTestCheat();
	void ClientStartOnlineGame();
	void ClientShowMatchResult();
	void ClientShowCastingBar(float CastTime, const struct FText& CastName, bool OnOff);
	void ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void ClientSetCanAllSpectate(bool InbCanSpectate);
	void ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void ClientSendPacketReliable(TArray<unsigned char> Packet);
	void ClientRestoreSpectatorOnReconnection();
	void ClientProcessRevive();
	void ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount);
	void ClientOnCharacterRestart();
	void ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbCanReport);
	void ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void ClientNpcCount(int InCount);
	void ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void ClientNotifySpeedBoost(float Boost);
	void ClientNotifyRestrictingPlayArea();
	void ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void ClientNotifyHealAmount_Unreliable(float Heal);
	void ClientNotifyHealAmount_Reliable(float Heal);
	void ClientNotifyHealAmount(float Heal);
	void ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void ClientInteractByComponent(class UActorComponent* TargetComponent);
	void ClientInteract(class AActor* TargetObject);
	void ClientGameStarted();
	void ClientEndOnlineGame();
	void ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void ClientAdminCopyString(const struct FString& inString);
	void Client_TakeScreenshot();
	void Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void CheatSpawnActor(int InClassIndex, int InHeight);
	void CheatDestroyActors();
	void Cheat_ServerSpawnVehicle(int VehicleIndex);
	void ChangeMeshCommand(int Parameter, float Time);
	void CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool CanSeeTerrainThroughFogInTheAir();
	bool CanReport();
	void BP_Test_SpawnVehicle(int VehicleIndex);
	void BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void BEClient(const struct FString& Command);
	void AllowVoiceChatInput(bool bAllow);
	void Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslWarPlayerController
// 0x00F0 (0x0F10 - 0x0E20)
class ATslWarPlayerController : public ATslPlayerController
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0E20(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMyTeamScoreChangedAtClient;                             // 0x0E28(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHighEnemyScoreChangedAtClient;                          // 0x0E38(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerStateReplicatedAtClient;                          // 0x0E48(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x0E58(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWarPlayerController");
		return ptr;
	}


	void UpdateTeamScoreUI();
	void OnScoreChanged();
};


// Class TslGame.TslConquestPlayerController
// 0x0000 (0x0F10 - 0x0F10)
class ATslConquestPlayerController : public ATslWarPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConquestPlayerController");
		return ptr;
	}


	void UpdateTeamScoreUI();
	void OnScoreChanged();
};


// Class TslGame.TslZombiePlayerController
// 0x0030 (0x0E50 - 0x0E20)
class ATslZombiePlayerController : public ATslPlayerController
{
public:
	class ATslPostProcessEffect*                       ZombiePOVPP;                                              // 0x0E20(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0E28(0x0020) MISSED OFFSET
	unsigned char                                      UnknownData01[0x1];                                       // 0x0E28(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslZombiePlayerController.TeamChangeZombieMode

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslZombiePlayerController");
		return ptr;
	}


	void ServerZombieRevive();
	void ServerRequestJoinTeam();
	void OnRep_TeamChangeZombieMode();
	TArray<struct FTslPlayerMatchResultInfo> GetTslZombieMatchResultInfos();
	TArray<struct FTslPlayerMatchResultInfo> GetTslHumanMatchResultInfos();
};


// Class TslGame.TslBlueZoneCreateArea
// 0x0020 (0x0408 - 0x03E8)
class ATslBlueZoneCreateArea : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FString                                     Name;                                                     // 0x03F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate)
	float                                              Radius;                                                   // 0x0400(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	int                                                Weight;                                                   // 0x0404(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBlueZoneCreateArea");
		return ptr;
	}

};


// Class TslGame.TslBotAIController
// 0x0058 (0x0558 - 0x0500)
class ATslBotAIController : public AAIController
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0500(0x0038) MISSED OFFSET
	class ATslWheeledVehicle*                          MyVehicle;                                                // 0x0538(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class APawn*                                       FollowTarget;                                             // 0x0540(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0548(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBotAIController");
		return ptr;
	}

};


// Class TslGame.TslBreakableObject
// 0x0000 (0x03F8 - 0x03F8)
class ATslBreakableObject : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBreakableObject");
		return ptr;
	}

};


// Class TslGame.TslBuff
// 0x0070 (0x0458 - 0x03E8)
class ATslBuff : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	struct FName                                       OverlapId;                                                // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03F8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslBuff.OverlapSolveMethod
	unsigned char                                      UnknownData02[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	float                                              BuffTickInterval;                                         // 0x03FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BuffTickFirstDelay;                                       // 0x0400(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BuffDuration;                                             // 0x0404(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      Infinite : 1;                                             // 0x0408(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	struct FName                                       AttachSocket;                                             // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      AttachServerPaticleClass;                                 // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      IsDebuff : 1;                                             // 0x0420(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	struct FVector                                     BuffInstigatorLocation;                                   // 0x0424(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBuffComponet*                               OwnerBuffComponent;                                       // 0x0430(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0438(0x0010) MISSED OFFSET
	class ATslServerParticle*                          AttachedServerPaticle;                                    // 0x0448(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0450(0x0004) MISSED OFFSET
	unsigned char                                      bClientNotifyStartBuff : 1;                               // 0x0454(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bClientNotifyStopBuff : 1;                                // 0x0455(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBuff");
		return ptr;
	}


	void TickBuff();
	void StopBuffBlueprint(bool bCanceled);
	void StartBuffBlueprint();
	void LeaveGameLogHeal(class ATslCharacter* InCharacter, float InHealAmount);
	class APawn* GetOwnerPawn();
	class ATslCharacter* GetOwnerCharacter();
	struct FAttackId GetAttackId();
	bool CanApplyBuff();
};


// Class TslGame.CharacterBreathBuff
// 0x0010 (0x0468 - 0x0458)
class ACharacterBreathBuff : public ATslBuff
{
public:
	float                                              BreathPerTick;                                            // 0x0458(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	class UCharacterBreathComponent*                   SpawnerComponent;                                         // 0x0460(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CharacterBreathBuff");
		return ptr;
	}


	class ATslCharacter* GetCharacter();
	class UCharacterBreathComponent* GetBreathComponent();
};


// Class TslGame.HealOverTimeBuff
// 0x0010 (0x0468 - 0x0458)
class AHealOverTimeBuff : public ATslBuff
{
public:
	float                                              HealPerTick;                                              // 0x0458(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HealLimit;                                                // 0x045C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                BuffCount;                                                // 0x0460(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.HealOverTimeBuff");
		return ptr;
	}

};


// Class TslGame.TslReplicatedBuff
// 0x0008 (0x0460 - 0x0458)
class ATslReplicatedBuff : public ATslBuff
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReplicatedBuff");
		return ptr;
	}


	void TickBuff();
	void StopBuffBlueprint(bool bCanceled);
	void StartBuffBlueprint();
	void LeaveGameLogHeal(class ATslCharacter* InCharacter, float InHealAmount);
	class APawn* GetOwnerPawn();
	class ATslCharacter* GetOwnerCharacter();
	struct FAttackId GetAttackId();
	bool CanApplyBuff();
};


// Class TslGame.TslFlashbangDebuff
// 0x0090 (0x04F0 - 0x0460)
class ATslFlashbangDebuff : public ATslReplicatedBuff
{
public:
	class UFlashbangDebuffCurve*                       DebuffCurve;                                              // 0x0460(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_NoClear, CPF_IsPlainOldData)
	TArray<class UAkAudioEvent*>                       TinnitusLevels;                                           // 0x0468(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_NoClear)
	TArray<struct FPostProcessEffectParameter>         PostProcessEffectParametersArray;                         // 0x0478(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UClass*                                      EffectActorClass;                                         // 0x0488(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CaptureDelay;                                             // 0x0490(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DebuffDistance;                                           // 0x0494(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0498(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFlashbangDebuff");
		return ptr;
	}


	void ClearScopeSettings();
};


// Class TslGame.TslMolotovFireDebuff
// 0x0020 (0x0480 - 0x0460)
class ATslMolotovFireDebuff : public ATslReplicatedBuff
{
public:
	float                                              PerTickDamage;                                            // 0x0460(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	class UClass*                                      DamageTypeClass;                                          // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystemComponent*                    ParticleSystem;                                           // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class UParticleSystem*                             KoreanRatingParticlesOverride;                            // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMolotovFireDebuff");
		return ptr;
	}

};


// Class TslGame.TslBuoyancyForceComponent
// 0x0000 (0x0530 - 0x0530)
class UTslBuoyancyForceComponent : public UBuoyancyForceComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBuoyancyForceComponent");
		return ptr;
	}

};


// Class TslGame.TslCameraComponent
// 0x0010 (0x0A50 - 0x0A40)
class UTslCameraComponent : public UCameraComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0A40(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCameraComponent");
		return ptr;
	}


	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class TslGame.TslCharacterPropertyOverrider
// 0x0018 (0x0040 - 0x0028)
class UTslCharacterPropertyOverrider : public UObject
{
public:
	class ATslGameMode*                                TslGameMode;                                              // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslPlayerState*                             CachedTslPlayerState;                                     // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslCharacter*                               CachedTslCharacter;                                       // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCharacterPropertyOverrider");
		return ptr;
	}

};


// Class TslGame.TslBattleRoyaleCharacterPropertyOverrider
// 0x0000 (0x0040 - 0x0040)
class UTslBattleRoyaleCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBattleRoyaleCharacterPropertyOverrider");
		return ptr;
	}

};


// Class TslGame.TslTrainingCharacterPropertyOverrider
// 0x0000 (0x0040 - 0x0040)
class UTslTrainingCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTrainingCharacterPropertyOverrider");
		return ptr;
	}

};


// Class TslGame.TslWarCharacterPropertyOverrider
// 0x0008 (0x0048 - 0x0040)
class UTslWarCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:
	class UGroggyDamageCalculator*                     GroggyDamageCalculator;                                   // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWarCharacterPropertyOverrider");
		return ptr;
	}

};


// Class TslGame.TslConquestCharacterPropertyOverrider
// 0x0000 (0x0048 - 0x0048)
class UTslConquestCharacterPropertyOverrider : public UTslWarCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConquestCharacterPropertyOverrider");
		return ptr;
	}

};


// Class TslGame.TslZombieCharacterPropertyOverrider
// 0x0000 (0x0040 - 0x0040)
class UTslZombieCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslZombieCharacterPropertyOverrider");
		return ptr;
	}

};


// Class TslGame.TslCharacterProxy
// 0x0080 (0x0890 - 0x0810)
class ATslCharacterProxy : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0810(0x0008) MISSED OFFSET
	TArray<class UWeaponClone*>                        ArmedWeapons;                                             // 0x0818(0x0010) (CPF_ZeroConstructor)
	class UWeaponAnimInfoComponent*                    WeaponAnimInfoComponent;                                  // 0x0828(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              WeaponUpdateIntervalSeconds;                              // 0x0830(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0834(0x000C) MISSED OFFSET
	class UTslAccessoryComponent*                      AccessoryCom_Primary;                                     // 0x0840(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Primary;                             // 0x0848(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Secondary;                                   // 0x0850(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Secondary;                           // 0x0858(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Sidearm;                                     // 0x0860(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Sidearm;                             // 0x0868(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Melee;                                       // 0x0870(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Melee;                               // 0x0878(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Thrown;                                      // 0x0880(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Thrown;                              // 0x0888(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCharacterProxy");
		return ptr;
	}


	void UpdateEquippedWeapons();
	void UpdateCharacterAppearance();
	void SetAccessorySlot(class UTslAccessoryComponent* AccessoryComponent);
	class UTslAccessoryComponent* GetAccessorySlot();
};


// Class TslGame.TslCharacterSpringArmComponent
// 0x0210 (0x0720 - 0x0510)
class UTslCharacterSpringArmComponent : public USpringArmComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0510(0x0004) MISSED OFFSET
	struct FVector                                     DefaultSocketOffset;                                      // 0x0514(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     IndoorSocketOffset;                                       // 0x0520(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeanLeftDefaultSocketOffsetAddition;                      // 0x052C(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeanRightDefaultSocketOffsetAddition;                     // 0x0538(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeftShoulderAimingSocketOffset;                           // 0x0544(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     RightShoulderAimingSocketOffset;                          // 0x0550(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeanLeftAimedSocketOffsetAddition;                        // 0x055C(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeanRightAimedSocketOffsetAddition;                       // 0x0568(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     SprintSocketOffsetAddition;                               // 0x0574(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	float                                              CrouchSocketOffsetZAddition;                              // 0x0580(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CrouchSocketOffsetMovementZAddition;                      // 0x0584(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ProneScoketOffsetZAddition;                               // 0x0588(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SocketOffsetInterpSpeed;                                  // 0x058C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     ParachuteSocketOffset;                                    // 0x0590(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     FreefallSocketOffset;                                     // 0x059C(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     DefaultTargetOffset;                                      // 0x05A8(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     IndoorTargetOffset;                                       // 0x05B4(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     AimingTargetOffset;                                       // 0x05C0(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     ParachuteTargetOffset;                                    // 0x05CC(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     FreefallTargetOffset;                                     // 0x05D8(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	float                                              ParachuteTargetOffsetLength;                              // 0x05E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TargetOffsetInterpSpeed;                                  // 0x05E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TargetOffsetInterpSpeed_Vaulting;                         // 0x05EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultSpringArmLength;                                   // 0x05F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              IndoorSpringArmLength;                                    // 0x05F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AimingSpringArmLength;                                    // 0x05F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlockingCompressOffset;                                   // 0x05FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlockingCompressCrouchOffset;                             // 0x0600(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringArmLengthInterpSpeed;                               // 0x0604(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AimingSpringArmLengthInterpSpeed;                         // 0x0608(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultingSpringArmLengthInterpSpeed;                       // 0x060C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallArmLength;                                        // 0x0610(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParachuteArmLength;                                       // 0x0614(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   RightBlockInMap;                                          // 0x0618(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   RightBlockOutMap;                                         // 0x0620(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     RightBlockVectorStand;                                    // 0x0628(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     RightBlockVectorCrouch;                                   // 0x0634(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     RightBlockVectorCrouchMove;                               // 0x0640(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   LeftBlockInMap;                                           // 0x064C(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   LeftBlockOutMap;                                          // 0x0654(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeftBlockVectorStand;                                     // 0x065C(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeftBlockVectorCrouch;                                    // 0x0668(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     LeftBlockVectorCrouchMove;                                // 0x0674(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   TargetBlockInMap;                                         // 0x0680(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   TargetBlockOutMap;                                        // 0x0688(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     TargetBlockVectorStand;                                   // 0x0690(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     TargetBlockVectorCrouch;                                  // 0x069C(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector                                     TargetBlockVectorCrouchMove;                              // 0x06A8(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchHipMapIn;                                // 0x06B4(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchHipMapOut;                               // 0x06BC(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchAimMapIn;                                // 0x06C4(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchAimMapOut;                               // 0x06CC(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x06D4(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CurveSpringarmOffsetVault;                                // 0x06D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 CurveSpringarmOffsetClimb;                                // 0x06E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SocketOffset_YawLimitLow;                                 // 0x06E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SocketOffset_YawLimitHigh;                                // 0x06EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SocketOffset_PitchLowScalar;                              // 0x06F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SocketOffset_PitchHighScalar;                             // 0x06F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SocketOffset_PitchLimitHigh;                              // 0x06F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SocketOffset_PitchLimitLow;                               // 0x06FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0700(0x0010) MISSED OFFSET
	float                                              SpringArmRestoreInterpSpeed;                              // 0x0710(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0714(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCharacterSpringArmComponent");
		return ptr;
	}

};


// Class TslGame.TslCharacterValidateLocationComponent
// 0x0060 (0x0240 - 0x01E0)
class UTslCharacterValidateLocationComponent : public UActorComponent
{
public:
	float                                              ValidLocationCacheInterval;                               // 0x01E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x01E4(0x0010) MISSED OFFSET
	float                                              InvalidUndergroundCheckInterval;                          // 0x01F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01F8(0x0004) MISSED OFFSET
	float                                              InvalidUndergroundCheckLength;                            // 0x01FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxAdjustRange;                                           // 0x0200(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                MaxAdjustCount;                                           // 0x0204(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ValidLocationForVehicleEjectionCacheInterval;             // 0x0208(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x34];                                      // 0x020C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCharacterValidateLocationComponent");
		return ptr;
	}

};


// Class TslGame.TslCharmAnimInstance
// 0x0070 (0x0400 - 0x0390)
class UTslCharmAnimInstance : public UAnimInstance
{
public:
	unsigned char                                      bCalculateAnimDynamics : 1;                               // 0x0390(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCalculateAnimDynamicsDrag : 1;                           // 0x0391(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCalculateAnimDynamicsGravity : 1;                        // 0x0392(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAnimDynamicsCalcInComponentSpace : 1;                    // 0x0393(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ForceScale;                                               // 0x0394(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DragScale;                                                // 0x0398(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DragClamp;                                                // 0x039C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FullForceClamp;                                           // 0x03A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GravityScale;                                             // 0x03A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RBBlendInTime;                                            // 0x03A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RigidBodyForce;                                           // 0x03AC(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              RBAlpha;                                                  // 0x03B8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     CharmAttachLocation;                                      // 0x03BC(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    CharmAttachRotation;                                      // 0x03C8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     CharmAttachScale;                                         // 0x03D4(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCharmAnimInstance");
		return ptr;
	}

};


// Class TslGame.TslChatWidgetStyle
// 0x0988 (0x09B8 - 0x0030)
class UTslChatWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslChatStyle                               ChatStyle;                                                // 0x0030(0x0988) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslChatWidgetStyle");
		return ptr;
	}

};


// Class TslGame.TslCoherentWidget
// 0x0010 (0x04A0 - 0x0490)
class UTslCoherentWidget : public UCoherentUIGTWidget
{
public:
	class UClass*                                      WidgetBinderClass;                                        // 0x0490(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCoherentWidgetBinder*                       WidgetBinder;                                             // 0x0498(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCoherentWidget");
		return ptr;
	}


	void GoBack();
};


// Class TslGame.TslComponentRegistrationManager
// 0x0238 (0x0620 - 0x03E8)
class ATslComponentRegistrationManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x03E8(0x0060) MISSED OFFSET
	unsigned char                                      bActivateWhenStartup : 1;                                 // 0x0448(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	float                                              PhysicsStateTimeLimitMS;                                  // 0x044C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RenderStateTimeLimitMS;                                   // 0x0450(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                RenderStateCallCountLimit;                                // 0x0454(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RenderStateResourceSizeLimit;                             // 0x0458(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PostLoadObjectThresholdMS;                                // 0x045C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                BucketBoundSize;                                          // 0x0460(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                TickBucketDistanceLimit;                                  // 0x0464(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1B8];                                     // 0x0468(0x01B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslComponentRegistrationManager");
		return ptr;
	}

};


// Class TslGame.TslConsole
// 0x0008 (0x0138 - 0x0130)
class UTslConsole : public UConsole
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0130(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConsole");
		return ptr;
	}

};


// Class TslGame.TslConsoleSetting
// 0x00B0 (0x0120 - 0x0070)
class UTslConsoleSetting : public UConsoleSettings
{
public:
	TArray<struct FString>                             AutoCompleteItemPaths;                                    // 0x0070(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteItemKinds;                                    // 0x0080(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteEquipKinds;                                   // 0x0090(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoVehicleTablePaths;                                    // 0x00A0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteVehiclePaths;                                 // 0x00B0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteMaleBody;                                     // 0x00C0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteMaleHair;                                     // 0x00D0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteMaleFace;                                     // 0x00E0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteFemaleBody;                                   // 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteFemaleHair;                                   // 0x0100(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             AutoCompleteFemaleFace;                                   // 0x0110(0x0010) (CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConsoleSetting");
		return ptr;
	}

};


// Class TslGame.TslCustomizableSkeletalComponent
// 0x0000 (0x04D0 - 0x04D0)
class UTslCustomizableSkeletalComponent : public UCustomizableSkeletalComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCustomizableSkeletalComponent");
		return ptr;
	}


	void UpdateSkeletalMeshAsync(bool bNeverSkipUpdate);
};


// Class TslGame.TslSimpleCollisionManager
// 0x0048 (0x0430 - 0x03E8)
class ATslSimpleCollisionManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x03E8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSimpleCollisionManager");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslDamageField
// 0x0080 (0x0468 - 0x03E8)
class ATslDamageField : public AActor
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x03E8(0x000C) MISSED OFFSET
	float                                              DamageRadius;                                             // 0x03F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             DamageFieldFX;                                            // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0400(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslDamageField.DamageFieldType
	unsigned char                                      UnknownData02[0xB];                                       // 0x0401(0x000B) MISSED OFFSET
	int                                                Damage;                                                   // 0x040C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DamageInterval;                                           // 0x0410(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x0418(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0420(0x0010) MISSED OFFSET
	class UClass*                                      DebuffTemplate;                                           // 0x0430(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class USphereComponent*                            SphereCollision;                                          // 0x0438(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslSimpleCollisionReceiver*                 SimpleCollision;                                          // 0x0440(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0448(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDamageField");
		return ptr;
	}


	void OnCollision(struct FSimpleCollisionEvent* Event);
};


// Class TslGame.TslDamageFieldContainer
// 0x0050 (0x0438 - 0x03E8)
class ATslDamageFieldContainer : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<struct FDamageFieldLayout>                  DamageFieldLayouts;                                       // 0x03F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0400(0x0008) MISSED OFFSET
	class UClass*                                      DamageFieldTemplate;                                      // 0x0408(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      FlameInWall : 1;                                          // 0x0410(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	int                                                FlameMaxCountInWall;                                      // 0x0414(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlameDelayInWall;                                         // 0x0418(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x041C(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDamageFieldContainer");
		return ptr;
	}

};


// Class TslGame.TslDeathCameraComponent
// 0x0060 (0x0240 - 0x01E0)
class UTslDeathCameraComponent : public UActorComponent
{
public:
	struct FName                                       FollowBone;                                               // 0x01E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxCameraDistance;                                        // 0x01E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CollisionDistanceFactor;                                  // 0x01EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeathFollowBlendTime;                                     // 0x01F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TEnumAsByte<EViewTargetBlendFunction>              DeathFollowBlendFunc;                                     // 0x01F4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01F5(0x0003) MISSED OFFSET
	float                                              DeathFollowBlendExp;                                      // 0x01F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeathFollowTime;                                          // 0x01FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultFreeCameraArmLength;                               // 0x0200(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_IsPlainOldData)
	struct FVector                                     DeathLocationOffset;                                      // 0x0204(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class ATslCharacter*                               DeathCharacter;                                           // 0x0210(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0218(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDeathCameraComponent");
		return ptr;
	}

};


// Class TslGame.TslDecalEmitter
// 0x0010 (0x03F8 - 0x03E8)
class ATslDecalEmitter : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDecalEmitter");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslDestructibleComponent
// 0x0000 (0x0C40 - 0x0C40)
class UTslDestructibleComponent : public UDestructibleComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDestructibleComponent");
		return ptr;
	}


	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* GetDestructibleMesh();
	void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
};


// Class TslGame.TslDestructibleContainer
// 0x0008 (0x03F0 - 0x03E8)
class ATslDestructibleContainer : public AActor
{
public:
	unsigned char                                      bFlag : 1;                                                // 0x03E8(0x0001) (CPF_Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDestructibleContainer");
		return ptr;
	}


	void OnRep_Flag();
};


// Class TslGame.TslDoor
// 0x0288 (0x0680 - 0x03F8)
class ATslDoor : public AStaticMeshActor
{
public:
	class UStaticMeshComponent*                        DoorMeshComponent;                                        // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AkSound;                                                  // 0x0400(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UInteractionComponent*                       Interaction;                                              // 0x0408(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0410(0x0020) MISSED OFFSET
	class UDestructibleMesh*                           DoorDestructibleMesh;                                     // 0x0430(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDoorOpened : 1;                                          // 0x0438(0x0001) (CPF_Net)
	unsigned char                                      bReverseRotation : 1;                                     // 0x0438(0x0001) (CPF_Net)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	float                                              OpenAngle;                                                // 0x043C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               OpenSound;                                                // 0x0440(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               CloseSound;                                               // 0x0448(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 OpenCurve;                                                // 0x0450(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OpenCurveDuration;                                        // 0x0458(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CloseCurve;                                               // 0x0460(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CloseCurveDuration;                                       // 0x0468(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PointDamageImpulse;                                       // 0x046C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PointDamageRadius;                                        // 0x0470(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BreakingRadius;                                           // 0x0474(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BreakingImpulse;                                          // 0x0478(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BreakingMinDamage;                                        // 0x047C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DamageAccumulateTimeout;                                  // 0x0480(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	struct FName                                       TopImpactSoketName;                                       // 0x0488(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       CenterImpactSoketName;                                    // 0x0490(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BottomImpactSoketName;                                    // 0x0498(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1C0];                                     // 0x04A0(0x01C0) MISSED OFFSET
	struct FDoorBreakingStateLegacy                    DoorBreakingState;                                        // 0x0660(0x0001) (CPF_Net)
	unsigned char                                      UnknownData05[0x1F];                                      // 0x0661(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDoor");
		return ptr;
	}


	void OnRep_DoorOpened();
	void OnRep_DoorBreakingState();
	void OnInteractBy(class ATslCharacter* OtherCharacter);
	void ClientTakeDamage(float Damage, const struct FVector_NetQuantize& HitLocation, float DamageRadius, float Impulse);
};


// Class TslGame.TslDropMagazine
// 0x0010 (0x03F8 - 0x03E8)
class ATslDropMagazine : public AActor
{
public:
	class UStaticMeshComponent*                        MagMeshComp;                                              // 0x03E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslFPPShadowSupportComponent*               FPPShadowSupportComponent;                                // 0x03F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDropMagazine");
		return ptr;
	}

};


// Class TslGame.TslDynamicWeather
// 0x0048 (0x0430 - 0x03E8)
class ATslDynamicWeather : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class ATslWeatherParticle*                         WeatherParticle;                                          // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	class UCurveFloat*                                 SpawnScale;                                               // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	class ATslWetEffect*                               WetEffect;                                                // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	class APostProcessVolume*                          PPVolume;                                                 // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	class UMaterialInterface*                          PPMaterial;                                               // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	class ATslFog*                                     Fog;                                                      // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              CustomFogIntensity;                                       // 0x0420(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	class ATslGlobalWeatherSound*                      GlobalSound;                                              // 0x0428(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDynamicWeather");
		return ptr;
	}

};


// Class TslGame.TslEditableText
// 0x0000 (0x04B8 - 0x04B8)
class UTslEditableText : public UEditableText
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEditableText");
		return ptr;
	}


	void SetText(const struct FText& InText);
	void SetIsReadOnly(bool InbIsReadyOnly);
	void SetIsPassword(bool InbIsPassword);
	void SetHintText(const struct FText& InHintText);
	void OnEditableTextCommittedEvent__DelegateSignature(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod);
	void OnEditableTextChangedEvent__DelegateSignature(const struct FText& Text);
	struct FText GetText();
};


// Class TslGame.TslEffectController
// 0x0108 (0x04F0 - 0x03E8)
class ATslEffectController : public AActor
{
public:
	class UTslSimpleCollisionReceiver*                 SimpleCollision;                                          // 0x03E8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	class USceneComponent*                             SceneRoot;                                                // 0x0400(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<struct FRotator>                            InitialTraceArray;                                        // 0x0408(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	int                                                StepsPerTick;                                             // 0x0418(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                SpreadDirectionCount;                                     // 0x041C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                MaxInstanceCount;                                         // 0x0420(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                AbsoluteMaxInstanceCount;                                 // 0x0424(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                MaxMaterialAdditiveInstanceCount;                         // 0x0428(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InitialTraceLenClamp;                                     // 0x042C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       BlockingTag;                                              // 0x0430(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NormalLimitZ;                                             // 0x0438(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GroundTraceNormalScale_Start;                             // 0x043C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InitialGroundTraceHeightZ;                                // 0x0440(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ConcurrentGroundTraceHeightZ;                             // 0x0444(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ProcessedHitLenClamp;                                     // 0x0448(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SphereRadius;                                             // 0x044C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpreadXY;                                                 // 0x0450(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpreadZ;                                                  // 0x0454(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DamageFieldClass;                                         // 0x0458(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DamageTickInterval;                                       // 0x0460(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bModifyEffectLifetime : 1;                                // 0x0464(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0465(0x0003) MISSED OFFSET
	float                                              InitialEffectLifetime;                                    // 0x0468(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinEffectLifetimeForStart;                                // 0x046C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              EffectLifetimeVariation;                                  // 0x0470(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7C];                                      // 0x0474(0x007C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEffectController");
		return ptr;
	}


	void TickDamageFields();
	void Client_ShowDebugString(const struct FVector& InLocation, const struct FString& InText, class AActor* InActor, const struct FColor& InColor, float InTime);
	void Client_ShowDebugSphere(const struct FVector& InLocation, float InRadius, const struct FColor& InColor, float InTime);
	void Client_ShowDebugLine(const struct FVector& InStart, const struct FVector& InEnd, const struct FColor& InColor, float InTime);
};


// Class TslGame.TslEngine
// 0x0010 (0x0E50 - 0x0E40)
class UTslEngine : public UGameEngine
{
public:
	float                                              FrameRateCap;                                             // 0x0E40(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0E44(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEngine");
		return ptr;
	}

};


// Class TslGame.TslEngineUtilSettings
// 0x0038 (0x0060 - 0x0028)
class UTslEngineUtilSettings : public UObject
{
public:
	struct FStringAssetReference                       TiledDoorMaterialName;                                    // 0x0028(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       TiledDoorProxyMeshName;                                   // 0x0038(0x0010) (CPF_Edit, CPF_Config)
	TArray<struct FStringAssetReference>               TiledDoorMeshes;                                          // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	int                                                TiledFrameWidth;                                          // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEngineUtilSettings");
		return ptr;
	}

};


// Class TslGame.TslEntryGameMode
// 0x0000 (0x04C8 - 0x04C8)
class ATslEntryGameMode : public AGameMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEntryGameMode");
		return ptr;
	}


	void StartMatch();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void Say(const struct FString& Msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(const struct FName& NewState);
	bool IsMatchInProgress();
	bool HasMatchEnded();
	struct FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};


// Class TslGame.TslEquippedWeaponsProxy
// 0x0040 (0x04C0 - 0x0480)
class UTslEquippedWeaponsProxy : public USceneComponent
{
public:
	TArray<class UWeaponClone*>                        ArmedWeapons;                                             // 0x0480(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UCharacterWeaponAnimInfoComponent*           WeaponAnimInfo;                                           // 0x0490(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TWeakObjectPtr<class ATslCharacter>                CachedCharacter;                                          // 0x0498(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TWeakObjectPtr<class USkeletalMeshComponent>       CachedSkelMesh;                                           // 0x04A0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x04A8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEquippedWeaponsProxy");
		return ptr;
	}


	void UpdateEquippedWeapons();
	void UpdateAccessoryAttachmentSlot();
};


// Class TslGame.TslExplosionEffect
// 0x04F0 (0x08D8 - 0x03E8)
class ATslExplosionEffect : public AActor
{
public:
	class UParticleSystem*                             ExplosionFX;                                              // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UPointLightComponent*                        ExplosionLight;                                           // 0x03F0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              ExplosionLightFadeOut;                                    // 0x03F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               ExplosionSound;                                           // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FDecalEffectDataSet                         DecalEffectDataSet;                                       // 0x0408(0x0430) (CPF_Edit, CPF_DisableEditOnInstance)
	float                                              DecalSpawnDelayTime;                                      // 0x0838(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x083C(0x0004) MISSED OFFSET
	struct FHitResult                                  SurfaceHit;                                               // 0x0840(0x0088) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x08C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslExplosionEffect");
		return ptr;
	}


	void OnParticleCollide(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const struct FName& BoneName);
};


// Class TslGame.TslExplosionReactionInterface
// 0x0000 (0x0028 - 0x0028)
class UTslExplosionReactionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslExplosionReactionInterface");
		return ptr;
	}

};


// Class TslGame.TslFakeIpNetConnection
// 0x0000 (0x65838 - 0x65838)
class UTslFakeIpNetConnection : public UIpConnection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFakeIpNetConnection");
		return ptr;
	}

};


// Class TslGame.TslFence
// 0x00A0 (0x0488 - 0x03E8)
class ATslFence : public AActor
{
public:
	class USplineComponent*                            SplineComponent;                                          // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03F0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslFence.BeginSelector
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	class UStaticMesh*                                 BeginMesh1;                                               // 0x03F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 BeginMesh2;                                               // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 BeginMesh3;                                               // 0x0408(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 BeginMesh4;                                               // 0x0410(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0418(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslFence.EndSelector
	unsigned char                                      UnknownData03[0x7];                                       // 0x0419(0x0007) MISSED OFFSET
	class UStaticMesh*                                 EndMesh1;                                                 // 0x0420(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 EndMesh2;                                                 // 0x0428(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 EndMesh3;                                                 // 0x0430(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 EndMesh4;                                                 // 0x0438(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseRandomForMiddle : 1;                                  // 0x0440(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseMiddleSegmentsInOrder : 1;                            // 0x0441(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0442(0x0002) MISSED OFFSET
	float                                              UnitLengthForMiddle;                                      // 0x0444(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UnitSpacingForMiddle;                                     // 0x0448(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PivotOffsetForMiddle;                                     // 0x044C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRandomStream                               RandomStreamForMiddle;                                    // 0x0450(0x0008) (CPF_Edit)
	class UStaticMesh*                                 MiddleMesh1;                                              // 0x0458(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 MiddleMesh2;                                              // 0x0460(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 MiddleMesh3;                                              // 0x0468(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 MiddleMesh4;                                              // 0x0470(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FCollisionProfileName                       FenceCollisionProfile;                                    // 0x0478(0x0008) (CPF_Edit)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0480(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFence");
		return ptr;
	}


	class USplineComponent* GetSplineComponent();
};


// Class TslGame.TslReactionData
// 0x0058 (0x0088 - 0x0030)
class UTslReactionData : public UDataAsset
{
public:
	float                                              DestroyDelay;                                             // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVehicleReactionData                        VehicleReactionData;                                      // 0x0034(0x000C) (CPF_Edit)
	struct FRadialDamageReactionData                   RadialDamageReactionData;                                 // 0x0040(0x000C) (CPF_Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FPointDamageReactionData                    PointDamageReactionData;                                  // 0x0050(0x0020) (CPF_Edit)
	int                                                DependancyCountBySibling;                                 // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               PhysicsReactionSoundAk;                                   // 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               DestructibleReactionSoundAk;                              // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReactionData");
		return ptr;
	}

};


// Class TslGame.TslReactionComponent
// 0x0050 (0x0AD0 - 0x0A80)
class UTslReactionComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0A80(0x0008) MISSED OFFSET
	unsigned char                                      bPendingDestroy : 1;                                      // 0x0A88(0x0001) (CPF_Net)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0A89(0x0007) MISSED OFFSET
	class UTslReactionData*                            ReactionData;                                             // 0x0A90(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           ReactionDM;                                               // 0x0A98(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0AA0(0x0008) MISSED OFFSET
	class UDestructibleComponent*                      ReactionDestructible;                                     // 0x0AA8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        ReactionStaticMeshComponent;                              // 0x0AB0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0AB8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReactionComponent");
		return ptr;
	}


	void OnRep_PendingDestroy(bool PrevPendingDestroy);
	void Client_ReactByVehicle(const struct FVector& Impact, const struct FVector& ImpulseDir, const struct FVector& Velocity);
	void Client_ReactByRadialDamage(float DamageAmount, const struct FVector& Origin, const struct FVector& Impact, const struct FVector& ImpulseDir, float OuterRadius);
	void Client_ReactByPointDamage(float DamageAmount, const struct FVector& Impact, const struct FVector& ImpulseDir);
};


// Class TslGame.TslBreakableFence
// 0x0068 (0x04F0 - 0x0488)
class ATslBreakableFence : public ATslFence
{
public:
	class UTslReactionData*                            ReactionData;                                             // 0x0488(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible1;                                        // 0x0490(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible2;                                        // 0x0498(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible3;                                        // 0x04A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible4;                                        // 0x04A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible1;                                          // 0x04B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible2;                                          // 0x04B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible3;                                          // 0x04C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible4;                                          // 0x04C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible1;                                       // 0x04D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible2;                                       // 0x04D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible3;                                       // 0x04E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible4;                                       // 0x04E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBreakableFence");
		return ptr;
	}

};


// Class TslGame.TslStaticFence
// 0x0000 (0x0488 - 0x0488)
class ATslStaticFence : public ATslFence
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslStaticFence");
		return ptr;
	}


	class USplineComponent* GetSplineComponent();
};


// Class TslGame.TslFocusableWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class UTslFocusableWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFocusableWidgetInterface");
		return ptr;
	}

};


// Class TslGame.TslFog
// 0x0000 (0x03E8 - 0x03E8)
class ATslFog : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFog");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslFollowCameraComponent
// 0x0000 (0x0A40 - 0x0A40)
class UTslFollowCameraComponent : public UCameraComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFollowCameraComponent");
		return ptr;
	}


	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class TslGame.TslFollowCameraSpringArmComponent
// 0x0030 (0x0540 - 0x0510)
class UTslFollowCameraSpringArmComponent : public USpringArmComponent
{
public:
	float                                              FollowArmTargetArmLength;                                 // 0x0510(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FollowAircraftArmTargetArmLength;                         // 0x0514(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FollowParachutingArmTargetArmLength;                      // 0x0518(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FollowFallingWithParachuteArmTargetArmLength;             // 0x051C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FollowVehicleArmTargetArmLength;                          // 0x0520(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ZoomStep;                                                 // 0x0524(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultTargetOffsetZ;                                     // 0x0528(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FallingWithParachuteTargetOffsetZ;                        // 0x052C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ParachuteTargetOffsetZ;                                   // 0x0530(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              EndTargetArmLength;                                       // 0x0534(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bZoomIn : 1;                                              // 0x0538(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0539(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslFollowCameraSpringArmComponent.LastFollowCameraMode

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFollowCameraSpringArmComponent");
		return ptr;
	}

};


// Class TslGame.TslForceFeedbackEffect
// 0x0008 (0x0048 - 0x0040)
class UTslForceFeedbackEffect : public UForceFeedbackEffect
{
public:
	float                                              UserValueMultiplier;                                      // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslForceFeedbackEffect");
		return ptr;
	}

};


// Class TslGame.TslFPPShadowSupportComponent
// 0x0010 (0x0900 - 0x08F0)
class UTslFPPShadowSupportComponent : public UPrimitiveComponent
{
public:
	TArray<class USceneComponent*>                     CachedChildren;                                           // 0x08F0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFPPShadowSupportComponent");
		return ptr;
	}

};


// Class TslGame.TslGame_Menu
// 0x0000 (0x04C8 - 0x04C8)
class ATslGame_Menu : public AGameMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGame_Menu");
		return ptr;
	}


	void StartMatch();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void Say(const struct FString& Msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(const struct FName& NewState);
	bool IsMatchInProgress();
	bool HasMatchEnded();
	struct FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};


// Class TslGame.TslGameMode
// 0x0748 (0x0C10 - 0x04C8)
class ATslGameMode : public AGameMode
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x04C8(0x0078) MISSED OFFSET
	class UClass*                                      MalePawnClass;                                            // 0x0540(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       PerfBotPlayerControllerClass;                             // 0x0548(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)
	struct FStringClassReference                       ModeControllerClass;                                      // 0x0558(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)
	TArray<struct FStringClassReference>               AdditionalModeControllerClasses;                          // 0x0568(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear)
	struct FStringClassReference                       InitialItemDonatorClass;                                  // 0x0578(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	TArray<struct FMatchPreparerClass>                 MatchPreparerClasses;                                     // 0x0588(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0598(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameMode.MatchStartType
	unsigned char                                      UnknownData02[0x7];                                       // 0x0599(0x0007) MISSED OFFSET
	struct FStringClassReference                       SpawnKitClass;                                            // 0x05A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)
	unsigned char                                      UnknownData03[0x1];                                       // 0x05B0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameMode.CameraViewBehaviour
	unsigned char                                      UnknownData04[0x7];                                       // 0x05B1(0x0007) MISSED OFFSET
	struct FName                                       PresetName;                                               // 0x05B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      PlayerRespawn : 1;                                        // 0x05C0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      PlayerRandomRespawnLocation : 1;                          // 0x05C1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x05C2(0x0006) MISSED OFFSET
	TArray<struct FModeStringParameter>                ModeStringParameters;                                     // 0x05C8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData06[0x8];                                       // 0x05D8(0x0008) MISSED OFFSET
	unsigned char                                      bAllowGlobalVoiceChatAtInit : 1;                          // 0x05E0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x05E1(0x0003) MISSED OFFSET
	float                                              GlobalVoiceChannelMuteTimeInSeconds;                      // 0x05E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                PostMatchWaitingTime;                                     // 0x05E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                ServerQuitAfterLeavingMapTime;                            // 0x05EC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MinPlayers;                                               // 0x05F0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PlayerSpawnTryMaxCount;                                   // 0x05F4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnablePerfBotInPIE : 1;                                  // 0x05F8(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnablePerfBotLogin : 1;                                  // 0x05F9(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsPerfBotSpawnToRandomPosition : 1;                      // 0x05FA(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseXboxUnauthorizedDevice : 1;                           // 0x05FB(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCanRestartPerfBot : 1;                                   // 0x05FC(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableObserverInPIE : 1;                                 // 0x05FD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bPreventFinishMatchInPIE : 1;                             // 0x05FE(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x05FF(0x0001) MISSED OFFSET
	struct FString                                     SelectedSpawnKit;                                         // 0x0600(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	struct FString                                     PlatoonSpawnKit;                                          // 0x0610(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bStartPlayerAtMatchStart : 1;                             // 0x0620(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShouldSpawnAtStartSpot : 1;                              // 0x0621(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableDBNO : 1;                                          // 0x0622(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0623(0x0001) MISSED OFFSET
	unsigned char                                      bUseCeremonyState : 1;                                    // 0x0624(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0625(0x0003) MISSED OFFSET
	int                                                TeamSize;                                                 // 0x0628(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableSquadInTeam : 1;                                   // 0x062C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x062D(0x0003) MISSED OFFSET
	int                                                SquadSize;                                                // 0x0630(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableBleedOut : 1;                                      // 0x0634(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsingSelectableSpawnKit : 1;                             // 0x0635(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsingPlatoonSpawnKit : 1;                                // 0x0636(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x0637(0x0001) MISSED OFFSET
	float                                              CeremonyDuration;                                         // 0x0638(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsEditorTestZombieMode : 1;                              // 0x063C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsCustomGame : 1;                                        // 0x063D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsEventMode : 1;                                         // 0x063E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCanAllSpectate : 1;                                      // 0x063F(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bKillerSpectateMode : 1;                                  // 0x0640(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowLastCircleMark : 1;                                  // 0x0641(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x0642(0x0002) MISSED OFFSET
	float                                              LastCircleAlgorithmPercent;                               // 0x0644(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCustomEmoteMode : 1;                                     // 0x0648(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0649(0x0003) MISSED OFFSET
	struct FCustomGameUpdateCharacterInfo              CustomGameUpdateCharacterInfo;                            // 0x064C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Config)
	TArray<struct FLimitCustomStringParameter>         LimitCustomStringParameters;                              // 0x0658(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	struct FString                                     CustomWeaponDamage;                                       // 0x0668(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              MultiplierBlueZone;                                       // 0x0678(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MultiplierCarePackageNormal;                              // 0x067C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bFlareGun : 1;                                            // 0x0680(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0681(0x0003) MISSED OFFSET
	struct FRedZoneCustomOption                        RedZoneCustomOption;                                      // 0x0684(0x001C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Config)
	TArray<struct FBlueZoneCustomOption>               BlueZoneCustomOptions;                                    // 0x06A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	int                                                TownWeight;                                               // 0x06B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                FieldWeight;                                              // 0x06B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MountainWeight;                                           // 0x06B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bHideNicknameOnKillfeed : 1;                              // 0x06BC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseParachuteAutoDeploy : 1;                              // 0x06BD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x06BE(0x0002) MISSED OFFSET
	float                                              ParachuteAutoDeployAltitudeMultiplier;                    // 0x06C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MultiplierParachuteLandingDamage;                         // 0x06C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                ServerMaxTickRate;                                        // 0x06C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x06CC(0x0004) MISSED OFFSET
	TMap<struct FString, class URewardData*>           RewardDataMap;                                            // 0x06D0(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	class URewardData*                                 RewardData;                                               // 0x0720(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslPlayerState*                             WinnerPlayerState;                                        // 0x0728(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                WinnerTeam;                                               // 0x0730(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x0734(0x0004) MISSED OFFSET
	struct FStringClassReference                       ItemSpawnProcessorClass;                                  // 0x0738(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FStringClassReference                       ThingSpawnProcessorClass;                                 // 0x0748(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FStringClassReference                       DroppedPackageSpawnProcessorClass;                        // 0x0758(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	class UClass*                                      BasicBeltItemClassForNoBelt;                              // 0x0768(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       CustomCarepackageRulesComponentClass;                     // 0x0770(0x0010) (CPF_Edit)
	TMap<int, class ATslPlayerStart*>                  TeamPlayerStarts;                                         // 0x0780(0x0050) (CPF_ZeroConstructor)
	TArray<class AActor*>                              PlayerStarts;                                             // 0x07D0(0x0010) (CPF_ZeroConstructor)
	TArray<struct FPlayerStartsUserCount>              PlayerStartsUserCount;                                    // 0x07E0(0x0010) (CPF_ZeroConstructor)
	TMap<struct FString, class ATslPlayerStart*>       PlayerStartsUniqueIdMap;                                  // 0x07F0(0x0050) (CPF_ZeroConstructor)
	int                                                PlayerStartCount;                                         // 0x0840(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x0844(0x0004) MISSED OFFSET
	TArray<struct FRankingInfo>                        RankingInfos;                                             // 0x0848(0x0010) (CPF_ZeroConstructor)
	TArray<struct FRankingInfo>                        PrevRankingInfos;                                         // 0x0858(0x0010) (CPF_ZeroConstructor)
	TArray<struct FPointInfo>                          PointInfos;                                               // 0x0868(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData20[0x4];                                       // 0x0878(0x0004) MISSED OFFSET
	int                                                KillPoint;                                                // 0x087C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<int>                                        ConnectionTeamNumber;                                     // 0x0880(0x0010) (CPF_ZeroConstructor)
	struct FStringClassReference                       ModePresetClass;                                          // 0x0890(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	float                                              TeamKillDamageModifier;                                   // 0x08A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              VehicleWheelDamageModifier;                               // 0x08A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData21[0x18];                                      // 0x08A8(0x0018) MISSED OFFSET
	class UItemSpawnProcessor*                         ItemSpawnProcessor;                                       // 0x08C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UThingSpawnProcessor*                        ThingSpawnProcessor;                                      // 0x08C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UDroppedPackageSpawnProcessor*               DroppedPackageSpawnProcessor;                             // 0x08D0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UGeneralItemSpawner*                         InitialItemDonator;                                       // 0x08D8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UMatchPreparer*                              MatchPreparer;                                            // 0x08E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class USpawnKit*                                   SpawnKit;                                                 // 0x08E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AModeController*                             ModeController;                                           // 0x08F0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ADroppedItemGridManager*                     DroppedItemGridManager;                                   // 0x08F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslTracerManager*                           ServerTracerManager;                                      // 0x0900(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AMissionManager*                             MissionManager;                                           // 0x0908(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UModePreset*                                 ModePreset;                                               // 0x0910(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData22[0x8];                                       // 0x0918(0x0008) MISSED OFFSET
	TArray<class AModeController*>                     AdditinalModeControllers;                                 // 0x0920(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData23[0x100];                                     // 0x0930(0x0100) MISSED OFFSET
	TMap<struct FString, class APlayerState*>          JoinedUserPlayerStateMap;                                 // 0x0A30(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FTeams>                              Teams;                                                    // 0x0A80(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData24[0xAC];                                      // 0x0A90(0x00AC) MISSED OFFSET
	float                                              FlareGunMsgDist;                                          // 0x0B3C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	class UTslCharacterPropertyOverrider*              TslCharacterPropertyOverrider;                            // 0x0B40(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData25[0x10];                                      // 0x0B48(0x0010) MISSED OFFSET
	unsigned char                                      bCanUseRespawnedItem : 1;                                 // 0x0B58(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRemoveDroppedItemPeriodically : 1;                       // 0x0B59(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData26[0x2];                                       // 0x0B5A(0x0002) MISSED OFFSET
	float                                              DroppedItemLifeTime;                                      // 0x0B5C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DroppedItemCheckInterval;                                 // 0x0B60(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData27[0xC];                                       // 0x0B64(0x000C) MISSED OFFSET
	class UDataTable*                                  BpRewardRuleDataTable;                                    // 0x0B70(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FString                                     BpRewardRowName;                                          // 0x0B78(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FTslBpRewardRule                            BpRewardRule;                                             // 0x0B88(0x0060) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bAllowBpRewardInEventMode : 1;                            // 0x0BE8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAllowBpRewardInCustomGame : 1;                           // 0x0BE9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAllowJoinAnyMatchState : 1;                              // 0x0BEA(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData28[0x5];                                       // 0x0BEB(0x0005) MISSED OFFSET
	class UTslXpRewardRuleAsset*                       XpRewardRuleDataAsset;                                    // 0x0BF0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAllowXpRewardInEventMode : 1;                            // 0x0BF8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAllowXpRewardInCustomGame : 1;                           // 0x0BF9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData29[0x6];                                       // 0x0BFA(0x0006) MISSED OFFSET
	class UTslNpcManager*                              NpcManager;                                               // 0x0C00(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData30[0x8];                                       // 0x0C08(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameMode");
		return ptr;
	}


	bool UseCeremonyState();
	void SendSystemMessageToAll(const struct FText& Message, float MessageDuration);
	void OnUpdateGamePhase(int PhaseIndex, bool bIsRelease);
	void NotifyRestrictingPlayAreaToAll();
	void NotifyNextGasInToAll(const struct FVector& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	bool IsPreventFinishMatch();
	bool IsPlayInEditor();
	class UVoiceManager* GetVoiceManager();
	float GetVehicleWheelDamageModifier();
	class UThingSpawnProcessor* GetThingSpawnProcessor();
	float GetTeamKillDamageModifier();
	class ULobbyLink* GetLobbyLink();
	class UItemSpawnProcessor* GetItemSpawnProcessor();
	float GetInProgressElapsedTimeSec();
	class UDroppedPackageSpawnProcessor* GetDroppedPackageSpawnProcessor();
	void GetAllPawns(TArray<class APawn*>* OutPawns);
	void FinishMatch();
	class ATslCharacter* FindCharacterByPlayerState(class APlayerState* State);
	bool CheckFinish();
	void ChangeGameEndState();
	bool CanDealDamage(class ATslPlayerState* DamageInstigator, class ATslPlayerState* DamagedPlayer);
	void BroadcastGameModeEvent(const struct FName& EventName, const struct FString& Parameter);
	void BenchmarkFinished();
};


// Class TslGame.TslBattleRoyaleGameMode
// 0x0000 (0x0C10 - 0x0C10)
class ATslBattleRoyaleGameMode : public ATslGameMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBattleRoyaleGameMode");
		return ptr;
	}


	bool UseCeremonyState();
	void SendSystemMessageToAll(const struct FText& Message, float MessageDuration);
	void OnUpdateGamePhase(int PhaseIndex, bool bIsRelease);
	void NotifyRestrictingPlayAreaToAll();
	void NotifyNextGasInToAll(const struct FVector& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	bool IsPreventFinishMatch();
	bool IsPlayInEditor();
	class UVoiceManager* GetVoiceManager();
	float GetVehicleWheelDamageModifier();
	class UThingSpawnProcessor* GetThingSpawnProcessor();
	float GetTeamKillDamageModifier();
	class ULobbyLink* GetLobbyLink();
	class UItemSpawnProcessor* GetItemSpawnProcessor();
	float GetInProgressElapsedTimeSec();
	class UDroppedPackageSpawnProcessor* GetDroppedPackageSpawnProcessor();
	void GetAllPawns(TArray<class APawn*>* OutPawns);
	void FinishMatch();
	class ATslCharacter* FindCharacterByPlayerState(class APlayerState* State);
	bool CheckFinish();
	void ChangeGameEndState();
	bool CanDealDamage(class ATslPlayerState* DamageInstigator, class ATslPlayerState* DamagedPlayer);
	void BroadcastGameModeEvent(const struct FName& EventName, const struct FString& Parameter);
	void BenchmarkFinished();
};


// Class TslGame.TslNpcGameMode
// 0x0000 (0x0C10 - 0x0C10)
class ATslNpcGameMode : public ATslGameMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcGameMode");
		return ptr;
	}


	bool UseCeremonyState();
	void SendSystemMessageToAll(const struct FText& Message, float MessageDuration);
	void OnUpdateGamePhase(int PhaseIndex, bool bIsRelease);
	void NotifyRestrictingPlayAreaToAll();
	void NotifyNextGasInToAll(const struct FVector& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	bool IsPreventFinishMatch();
	bool IsPlayInEditor();
	class UVoiceManager* GetVoiceManager();
	float GetVehicleWheelDamageModifier();
	class UThingSpawnProcessor* GetThingSpawnProcessor();
	float GetTeamKillDamageModifier();
	class ULobbyLink* GetLobbyLink();
	class UItemSpawnProcessor* GetItemSpawnProcessor();
	float GetInProgressElapsedTimeSec();
	class UDroppedPackageSpawnProcessor* GetDroppedPackageSpawnProcessor();
	void GetAllPawns(TArray<class APawn*>* OutPawns);
	void FinishMatch();
	class ATslCharacter* FindCharacterByPlayerState(class APlayerState* State);
	bool CheckFinish();
	void ChangeGameEndState();
	bool CanDealDamage(class ATslPlayerState* DamageInstigator, class ATslPlayerState* DamagedPlayer);
	void BroadcastGameModeEvent(const struct FName& EventName, const struct FString& Parameter);
	void BenchmarkFinished();
};


// Class TslGame.TslTrainingGameMode
// 0x0010 (0x0C20 - 0x0C10)
class ATslTrainingGameMode : public ATslGameMode
{
public:
	float                                              TimeLimitSeconds;                                         // 0x0C10(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0C14(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTrainingGameMode");
		return ptr;
	}

};


// Class TslGame.WarModeCarePackage
// 0x0078 (0x00A0 - 0x0028)
class UWarModeCarePackage : public UObject
{
public:
	float                                              CarepackageStartDelayInSecRandomMIN;                      // 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CarepackageStartDelayInSecRandomMAX;                      // 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CarepackageNextSpawnTimeInSecRandomMIN;                   // 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CarepackageNextSpawnTimeInSecRandomMAX;                   // 0x0034(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0038(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.WarModeCarePackage.CarePackageType
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x0039(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.WarModeCarePackage.CarePackageItemSpawnerClassOfType
	class UClass*                                      AircraftCarePackageClass;                                 // 0x0090(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WarModeCarePackage");
		return ptr;
	}

};


// Class TslGame.TslWarGameMode
// 0x0100 (0x0D10 - 0x0C10)
class ATslWarGameMode : public ATslGameMode
{
public:
	float                                              ReviveCastingTime;                                        // 0x0C10(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0C14(0x0004) MISSED OFFSET
	class UClass*                                      DropItemFxClass;                                          // 0x0C18(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseEndCircleArea : 1;                                    // 0x0C20(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseWarRoyaleBluezone : 1;                                // 0x0C21(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0C22(0x0006) MISSED OFFSET
	TArray<struct FBattleRoyalePoisionGasData>         WarRoyaleBluezoneGasDataArray;                            // 0x0C28(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FBattleRoyalePoisionGasData                 StaticBluezoneGasData;                                    // 0x0C38(0x0040) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TArray<struct FBattleRoyalePoisionGasData>         StaticBluezoneGasDataArray;                               // 0x0C78(0x0010) (CPF_ZeroConstructor)
	float                                              EjectionAreaBorderRadius;                                 // 0x0C88(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                GoalScore;                                                // 0x0C8C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TimeLimitInSec;                                           // 0x0C90(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCanHaveNegativeScore : 1;                                // 0x0C94(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0C95(0x0003) MISSED OFFSET
	float                                              PointDBNO;                                                // 0x0C98(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PointKill;                                                // 0x0C9C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PointTeamDBNO;                                            // 0x0CA0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PointTeamKill;                                            // 0x0CA4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PointRevive;                                              // 0x0CA8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0CAC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 BonusKillPointRatioCurve;                                 // 0x0CB0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseRedZone : 1;                                          // 0x0CB8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bTeamElimination : 1;                                     // 0x0CB9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0CBA(0x0002) MISSED OFFSET
	float                                              LootBoxLifeTime;                                          // 0x0CBC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RespawnOffTimeLeftRatio;                                  // 0x0CC0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bEnableDamageWhileRidingParachute : 1;                    // 0x0CC4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0CC5(0x0003) MISSED OFFSET
	float                                              HealthByRevive;                                           // 0x0CC8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GroggyDamagePerSecond;                                    // 0x0CCC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GroggyEnabledAltitudeInCentiMeter;                        // 0x0CD0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseTeamXRay : 1;                                         // 0x0CD4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0CD5(0x0003) MISSED OFFSET
	class UClass*                                      AirRespawnProcessorClass;                                 // 0x0CD8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AAirRespawnProcessor*                        AirRespawnProcessor;                                      // 0x0CE0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0CE8(0x0010) MISSED OFFSET
	class UClass*                                      CarePackegeClass;                                         // 0x0CF8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UWarModeCarePackage*                         CarePackege;                                              // 0x0D00(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0D08(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWarGameMode");
		return ptr;
	}


	void OnRespawnStarted();
	void OnRespawnEnded();
	void OnRespawned();
};


// Class TslGame.TslConquestGameMode
// 0x0010 (0x0D20 - 0x0D10)
class ATslConquestGameMode : public ATslWarGameMode
{
public:
	struct FString                                     BattleAreaType;                                           // 0x0D10(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConquestGameMode");
		return ptr;
	}

};


// Class TslGame.TslZombieGameMode
// 0x0030 (0x0C40 - 0x0C10)
class ATslZombieGameMode : public ATslGameMode
{
public:
	float                                              MultiplierZombieToZombieDamage;                           // 0x0C10(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0C14(0x0004) MISSED OFFSET
	class UClass*                                      ZombieDamageType;                                         // 0x0C18(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FZombieCustomizationData>            ZombieCustomizationData;                                  // 0x0C20(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0C30(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslZombieGameMode.ZombieCameraViewBehaviour
	unsigned char                                      ZombieRevive : 1;                                         // 0x0C31(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0C32(0x0002) MISSED OFFSET
	float                                              MultiplierZombieDamage;                                   // 0x0C34(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ZombieHealth;                                             // 0x0C38(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslZombieGameMode");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFunctionImplementation
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFunctionImplementation : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFunctionImplementation");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Master
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_Master : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Master");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MasterVolume
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_MasterVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MasterVolume");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Music
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_Music : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Music");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MusicVolume
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_MusicVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MusicVolume");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Ui
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_Ui : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Ui");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_UiVolume
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_UiVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_UiVolume");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Effects
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_Effects : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Effects");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_EffectsVolume
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_EffectsVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_EffectsVolume");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_HRTF
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_Sound_HRTF : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_HRTF");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceInputMode
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_VoiceChat_VoiceInputMode : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceInputMode");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatChannel
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatChannel : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatChannel");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_MicrophoneVolume
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_VoiceChat_MicrophoneVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_MicrophoneVolume");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatVolume
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatVolume");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Crouch
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Crouch : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Crouch");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Prone
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Prone : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Prone");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Walk
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Walk : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Walk");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Sprint
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Sprint : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Sprint");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_FreeLook
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_FreeLook : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_FreeLook");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_HoldBreath
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_HoldBreath : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_HoldBreath");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_CantedSight
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_CantedSight : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_CantedSight");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Peek
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Peek : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Peek");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Map
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Map : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Map");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Aim
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Aim : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Aim");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_ADS
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_ADS : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_ADS");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_InvertMouse
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_InvertMouse : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_InvertMouse");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_GeneralSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_GeneralSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_GeneralSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_VerticalSensitivityMultiplier
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_VerticalSensitivityMultiplier : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_VerticalSensitivityMultiplier");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_AimSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_AimSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_AimSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_IronSightSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_IronSightSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_IronSightSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_ScopingSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_ScopingSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_ScopingSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_OverrideSensitivityForAllScopes
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_OverrideSensitivityForAllScopes : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_OverrideSensitivityForAllScopes");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_2xScopeSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_2xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_2xScopeSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_3xScopeSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_3xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_3xScopeSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_4xScopeSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_4xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_4xScopeSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_6xScopeSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_6xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_6xScopeSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_8xScopeSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_8xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_8xScopeSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_15xScopeSensitivity
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Controls_Mouse_15xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_15xScopeSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_FreeLookInterpolation
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_FreeLookInterpolation : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_FreeLookInterpolation");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_TPPAimCameraPosition
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_TPPAimCameraPosition : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_TPPAimCameraPosition");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoReloading
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_AutoReloading : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoReloading");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_HandGun
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_HandGun : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_HandGun");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_SMG
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_SMG : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_SMG");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_AR
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_AR : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_AR");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_DMR
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_DMR : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_DMR");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InventoryCharacterRender
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_InventoryCharacterRender : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InventoryCharacterRender");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_ColorBlindMode
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_ColorBlindMode : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_ColorBlindMode");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColor
// 0x0010 (0x0038 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColor : public UTslGameOptionFunctionImplementation
{
public:
	struct FLinearColor                                PreviewColor;                                             // 0x0028(0x0010) (CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColor");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorRed
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorRed : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorRed");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorGreen
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorGreen : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorGreen");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorBlue
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorBlue : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorBlue");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorAlpha
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorAlpha : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorAlpha");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WeaponSlotHUD
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_WeaponSlotHUD : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WeaponSlotHUD");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WorldMapZoomSensitivity
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_WorldMapZoomSensitivity : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WorldMapZoomSensitivity");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDesaturation
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_MinimapDesaturation : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDesaturation");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDynamicZoom
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_MinimapDynamicZoom : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDynamicZoom");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedType
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_KillfeedType : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedType");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedLimit
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_KillfeedLimit : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedLimit");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideNicknamesinKillfeed
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_HideNicknamesinKillfeed : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideNicknamesinKillfeed");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideWeaponMasteryinKillfeed
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_HideWeaponMasteryinKillfeed : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideWeaponMasteryinKillfeed");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InteractionTargetHighlight
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_InteractionTargetHighlight : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InteractionTargetHighlight");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_NetworkDebugStatistics
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_NetworkDebugStatistics : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_NetworkDebugStatistics");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_OnScreenKeyGuide
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_UI_OnScreenKeyGuide : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_OnScreenKeyGuide");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_ClanName
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_ClanName : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_ClanName");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_Replay
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Replay_Replay : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_Replay");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_DeathCam
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Gameplay_Replay_DeathCam : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_DeathCam");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_RenderScale
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_RenderScale : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_RenderScale");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_FppCameraFov
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_FppCameraFov : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_FppCameraFov");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Sharpen
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Sharpen : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Sharpen");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_VSync
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_VSync : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_VSync");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_MotionBlur
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_MotionBlur : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_MotionBlur");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_OverallQuality
// 0x0020 (0x0048 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_OverallQuality : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_OverallQuality");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_AntiAliasing
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_AntiAliasing : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_AntiAliasing");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_PostProcessing
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_PostProcessing : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_PostProcessing");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Shadows
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Shadows : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Shadows");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Textures
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Textures : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Textures");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Effects
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Effects : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Effects");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Foliage
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Foliage : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Foliage");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_ViewDistance
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_ViewDistance : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_ViewDistance");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_DisplayMode
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_DisplayMode : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_DisplayMode");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Resolution
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_Resolution : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Resolution");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_LobbyFpsCap
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_LobbyFpsCap : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_LobbyFpsCap");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_InGameFpsCap
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_InGameFpsCap : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_InGameFpsCap");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_SmoothedFrameRate
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_SmoothedFrameRate : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_SmoothedFrameRate");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_MaxFps
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_MaxFps : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_MaxFps");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Brightness
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_Brightness : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Brightness");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_Language_LanguageSetting
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_Language_LanguageSetting : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_Language_LanguageSetting");
		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_Nvidia_HighlightSetting
// 0x0008 (0x0030 - 0x0028)
class UTslGameOptionFuncImpl_Graphics_Nvidia_HighlightSetting : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_Graphics_Nvidia_HighlightSetting");
		return ptr;
	}

};


// Class TslGame.TslUserWidget
// 0x00B0 (0x02F8 - 0x0248)
class UTslUserWidget : public UUserWidget
{
public:
	class UInputComponent*                             InputComponentAxis;                                       // 0x0248(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	class ATslCharacter*                               CachedTslCharacter;                                       // 0x0250(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslGameState*                               CachedTslGameState;                                       // 0x0258(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslCharacter*                               CachedViewTargetTslCharacter;                             // 0x0260(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FTslActionInputCallbackConfig>       ActionInputCallbackConfigs;                               // 0x0268(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FTslAxisInputCallbackConfig>         AxisInputCallbackConfigs;                                 // 0x0278(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0288(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    WidgetDestroyEventDelegate;                               // 0x0298(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TMap<struct FName, class UWidget*>                 CachedWidgets;                                            // 0x02A8(0x0050) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslUserWidget");
		return ptr;
	}


	void TslUserWidgetDestroyEvent__DelegateSignature();
	struct FEventReply TransferUserFocusThroughReply(const struct FFocusEvent& AcceptedFocusEvent, class UWidget* FocusWidget, bool bInAllUsers, struct FEventReply* Reply);
	void StopListeningForAllInputAxises();
	void SetupInputForBlueprint();
	bool NavigateUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	void ListenForInputAxis(const struct FName& AxisName, float Scale, bool bConsume, const struct FScriptDelegate& Callback);
	bool IsSpectating();
	bool IsReplaying();
	bool IsObserving();
	bool IsInLobby();
	class UTslGameUserSettings* GetTslGameUserSettings();
	float GetRawKeyValue(const struct FKey& InKey);
	class ATslPlayerState* GetDemoPlayerState(bool IsForMatchResult);
	class ATslCharacter* GetCachedViewTargetTslCharacter();
	class ATslGameState* GetCachedGameState();
	class ATslCharacter* GetCachedCharacter();
	float GetAxisMultiplier();
	bool ContainUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	bool ContainOwnerUserFocus();
	void ClearUserFocus(class ULocalPlayer* Player);
};


// Class TslGame.UmgBaseWidget
// 0x00C0 (0x03B8 - 0x02F8)
class UUmgBaseWidget : public UTslUserWidget
{
public:
	unsigned char                                      bUseEmergingAnimation : 1;                                // 0x02F8(0x0001) (CPF_Edit)
	unsigned char                                      bUseVanishingAnimation : 1;                               // 0x02F8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02F9(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  EmergingAnimationBinder;                                  // 0x0300(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Animation                  VanishingAnimationBinder;                                 // 0x0320(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0340(0x0018) MISSED OFFSET
	unsigned char                                      UnknownData02[0x1];                                       // 0x0340(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.UmgBaseWidget.PendingVisibility
	unsigned char                                      UnknownData03[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              VanishingStartTime;                                       // 0x035C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0360(0x0004) MISSED OFFSET
	int                                                Phase;                                                    // 0x0364(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                PhaseCount;                                               // 0x0368(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseFakeCursor : 1;                                       // 0x036C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x036D(0x0003) MISSED OFFSET
	struct FUmgWidgetBinder_CanvasPanel                CursorCanvas_Binder;                                      // 0x0370(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CursorWidget_Binder;                                      // 0x0398(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.UmgBaseWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslGameOptionItemWidget
// 0x00C0 (0x0478 - 0x03B8)
class UTslGameOptionItemWidget : public UUmgBaseWidget
{
public:
	struct FName                                       ParentTabName;                                            // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       ParentCategoryName;                                       // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       ItemName;                                                 // 0x03C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                ItemNumber;                                               // 0x03D0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	struct FText                                       DescriptionText;                                          // 0x03D8(0x0018) (CPF_Transient)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03F0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameOptionItemWidget.SupplementaryType
	unsigned char                                      bIndented : 1;                                            // 0x03F1(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03F2(0x0006) MISSED OFFSET
	class UTslGameOptionFunctionImplementation*        OptFuncImpl;                                              // 0x03F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTslGameOptionWidget*                        CachedGameOptionWidget;                                   // 0x0400(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  DisplayNameText_Binder;                                   // 0x0408(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Highlighter_Binder;                                       // 0x0428(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              IndentationWidth;                                         // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                ColorNormal;                                              // 0x0454(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                ColorHighlighted;                                         // 0x0464(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemWidget");
		return ptr;
	}


	void UpdateWidgetOnDependentSlider(class UTslGameOptionItemWidget* InstigatorWidget, bool bIsChanged, bool bIsDefault, float SliderRawValue);
	void UpdateWidgetByDependentStepper(class UTslGameOptionItemWidget* InstigatorWidget, bool bIsChanged, bool bIsDefault, int StepperIndex);
};


// Class TslGame.TslGameOptionItemKeyBinderWidget
// 0x0090 (0x0508 - 0x0478)
class UTslGameOptionItemKeyBinderWidget : public UTslGameOptionItemWidget
{
public:
	TArray<struct FTslInputKey>                        InitialInputKeySlotValues;                                // 0x0478(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FText                                       DetailedDescriptionText;                                  // 0x0488(0x0018) (CPF_Transient)
	struct FTslGameOptionKeyBindingDesc                KeyBindingDesc;                                           // 0x04A0(0x0038) (CPF_Transient)
	TArray<class UTslGameOptionItemKeyBinderSlotWidget*> CachedKeySlotWidgets;                                     // 0x04D8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FUmgWidgetBinder_Gerneral>           KeyBindingSlot_Binders;                                   // 0x04E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnKeyBinderValueChangeEvent;                              // 0x04F8(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemKeyBinderWidget");
		return ptr;
	}


	void OnKeyBinderSlotValueChanged(int SlotIndex, const struct FTslInputKey& InputKey);
};


// Class TslGame.TslGameOptionFuncImpl_KeyBindings
// 0x0000 (0x0028 - 0x0028)
class UTslGameOptionFuncImpl_KeyBindings : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionFuncImpl_KeyBindings");
		return ptr;
	}

};


// Class TslGame.TslGamepadInputComponent
// 0x00E0 (0x02C0 - 0x01E0)
class UTslGamepadInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x01E0(0x0040) MISSED OFFSET
	TMap<struct FName, struct FTslGamepadInputKeySet>  GamepadInputKeysCached;                                   // 0x0220(0x0050) (CPF_ZeroConstructor)
	TMap<struct FKey, unsigned char>                   BlockingInputKeyList;                                     // 0x0270(0x0050) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadInputComponent");
		return ptr;
	}

};


// Class TslGame.TslGamepadPawnInputComponent
// 0x22A0 (0x2560 - 0x02C0)
class UTslGamepadPawnInputComponent : public UTslGamepadInputComponent
{
public:
	unsigned char                                      UnknownData00[0x22A0];                                    // 0x02C0(0x22A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadPawnInputComponent");
		return ptr;
	}

};


// Class TslGame.TslGamepadPCInputComponent
// 0x0F00 (0x11C0 - 0x02C0)
class UTslGamepadPCInputComponent : public UTslGamepadInputComponent
{
public:
	unsigned char                                      UnknownData00[0xF00];                                     // 0x02C0(0x0F00) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadPCInputComponent");
		return ptr;
	}

};


// Class TslGame.TslGameSession
// 0x0310 (0x0710 - 0x0400)
class ATslGameSession : public AGameSession
{
public:
	unsigned char                                      UnknownData00[0x310];                                     // 0x0400(0x0310) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameSession");
		return ptr;
	}

};


// Class TslGame.TslGameState
// 0x0328 (0x0770 - 0x0448)
class ATslGameState : public AGameState
{
public:
	int                                                NextPoisonGasIndex;                                       // 0x0448(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bFlareGun : 1;                                            // 0x044C(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEnableBleedOut : 1;                                      // 0x044D(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bUsingSelectableSpawnKit : 1;                             // 0x044E(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bUsingPlatoonSpawnKit : 1;                                // 0x044F(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FString                                     SelectableSpawnKit;                                       // 0x0450(0x0010) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     PlatoonASpawnKit;                                         // 0x0460(0x0010) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     PlatoonBSpawnKit;                                         // 0x0470(0x0010) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	class UCustomCarepackageRulesComponent*            CustomCarepackageRulesComponent;                          // 0x0480(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bUsingSquadInTeam : 1;                                    // 0x0488(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0489(0x0003) MISSED OFFSET
	int                                                SquadSize;                                                // 0x048C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                TeamSize;                                                 // 0x0490(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsAnyoneKilled : 1;                                      // 0x0494(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseTracerReplication : 1;                                // 0x0495(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0496(0x0002) MISSED OFFSET
	float                                              ParachuteAutoDeployAltitudeMultiplier;                    // 0x0498(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                NumAliveTeams;                                            // 0x049C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SafetyZoneBeginRadius;                                    // 0x04A0(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              TotalWarningDuration;                                     // 0x04A4(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                NumAlivePlayers;                                          // 0x04A8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                NumStartTeams;                                            // 0x04AC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     RedZonePosition;                                          // 0x04B0(0x000C) (CPF_BlueprintVisible, CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x04BC(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameState.MatchStartType
	unsigned char                                      bCanShowLastCircleMark : 1;                               // 0x04BD(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04BE(0x0002) MISSED OFFSET
	float                                              SafetyZoneRadius;                                         // 0x04C0(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RedZoneRadius;                                            // 0x04C4(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     SafetyZoneBeginPosition;                                  // 0x04C8(0x000C) (CPF_BlueprintVisible, CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsEventMode : 1;                                         // 0x04D4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bShowLastCircleMark : 1;                                  // 0x04D5(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bHideNicknameOnKillfeed : 1;                              // 0x04D6(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bUseXboxUnauthorizedDevice : 1;                           // 0x04D7(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ElapsedGasReleaseDuration;                                // 0x04D8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ElapsedWarningDurationForClient;                          // 0x04DC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LerpSafetyZoneRadius;                                     // 0x04E0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     LerpPoisonGasWarningZonePosition;                         // 0x04E4(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_IsPlainOldData)
	float                                              LerpPoisonGasWarningZoneRadius;                           // 0x04F0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ElapsedPoisonGasWarningDuration;                          // 0x04F4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     PoisonGasWarningZoneBeginPosition;                        // 0x04F8(0x000C) (CPF_BlueprintVisible, CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	float                                              PoisonGasWarningZoneBeginRadius;                          // 0x0504(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                NumJoinPlayers;                                           // 0x0508(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              TotalReleaseDuration;                                     // 0x050C(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     SafetyZonePosition;                                       // 0x0510(0x000C) (CPF_BlueprintVisible, CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsGasRelease : 1;                                        // 0x051C(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x051D(0x0003) MISSED OFFSET
	struct FString                                     MatchShortGuid;                                           // 0x0520(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0530(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameState.GameEndState
	unsigned char                                      bTimerPaused : 1;                                         // 0x0531(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0532(0x0002) MISSED OFFSET
	int                                                RemainingTime;                                            // 0x0534(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FString                                     MatchId;                                                  // 0x0538(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	float                                              ElapsedReleaseDuration;                                   // 0x0548(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                MatchElapsedMinutes;                                      // 0x054C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     LerpSafetyZonePosition;                                   // 0x0550(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsWorkingBlueZone : 1;                                   // 0x055C(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x055D(0x0003) MISSED OFFSET
	struct FVector                                     PoisonGasWarningPosition;                                 // 0x0560(0x000C) (CPF_BlueprintVisible, CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	float                                              ElapsedWarningDuration;                                   // 0x056C(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bCanKillerSpectate : 1;                                   // 0x0570(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0571(0x0003) MISSED OFFSET
	float                                              PoisonGasWarningRadius;                                   // 0x0574(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector2D                                   LastCirclePosition;                                       // 0x0578(0x0008) (CPF_BlueprintVisible, CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsTeamMatch : 1;                                         // 0x0580(0x0001) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bAllowGlobalVoiceChat : 1;                                // 0x0581(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0582(0x0002) MISSED OFFSET
	int                                                NumTeams;                                                 // 0x0584(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              MatchElapsedTimeSec;                                      // 0x0588(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                NumStartPlayers;                                          // 0x058C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                MatchEndWaitingTime;                                      // 0x0590(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsCustomGame : 1;                                        // 0x0594(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x4B];                                      // 0x0595(0x004B) MISSED OFFSET
	class ALevelAttribute*                             LevelAttribute;                                           // 0x05E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x05E8(0x0008) MISSED OFFSET
	class ATslAccuracyManager*                         AccuracyManager;                                          // 0x05F0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x18];                                      // 0x05F8(0x0018) MISSED OFFSET
	TArray<int>                                        TeamIds;                                                  // 0x0610(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	TArray<int>                                        TeamIndices;                                              // 0x0620(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	TArray<int>                                        NumStartTeamMemberCounts;                                 // 0x0630(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FString>                             TeamLeaderNames;                                          // 0x0640(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FString>                             TeamLeaderClanNames;                                      // 0x0650(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	class ATslNetDebugDraw*                            NetDebugDrawSystem;                                       // 0x0660(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0xF0];                                      // 0x0668(0x00F0) MISSED OFFSET
	class AFootprintController*                        FootprintController;                                      // 0x0758(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x10];                                      // 0x0760(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameState");
		return ptr;
	}


	void UpdateWorldTimeSecondsDelta(float DeltaSeconds);
	void ShowPlayerStateList();
	void ShowDebugManagedActor();
	void OnStartGasRelease(bool InbIsGasRelease);
	void OnRep_TeamProperties();
	void OnRep_RemainingTime();
	void OnRep_NumJoinPlayers();
	void OnRep_NumAlivePlayers();
	void OnRep_MatchShortGuid();
	void OnRep_MatchId();
	void OnRep_GasRelease(bool bLastIsGasRelease);
	void OnRep_GameEndState();
	void OnRep_ElapsedWarningDuration();
	void OnRep_AllowGlobalVoiceChat(bool bOldAllowGlobalVoiceChat);
	void MatchEndWaitingTimerAtClient();
	bool IsTeamMatch();
	bool IsMatchInProgressBP();
	bool IsHideNicknameOnKillfeed();
	void GetReportUiType();
	float GetParaForceDeployAltitudeMultiplier();
	class ALevelAttribute* GetLevelAttribute();
	void GetGameModeType();
	void FluentAdapterInit();
};


// Class TslGame.TslBattleRoyaleGameState
// 0x0010 (0x0780 - 0x0770)
class ATslBattleRoyaleGameState : public ATslGameState
{
public:
	TArray<int>                                        NumLiveTeamMemberCounts;                                  // 0x0770(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBattleRoyaleGameState");
		return ptr;
	}

};


// Class TslGame.TslTrainingGameState
// 0x0020 (0x0790 - 0x0770)
class ATslTrainingGameState : public ATslGameState
{
public:
	struct FScriptMulticastDelegate                    OnTimeLimitReplicated;                                    // 0x0770(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	float                                              TimeLimitSeconds;                                         // 0x0780(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0784(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTrainingGameState");
		return ptr;
	}


	void OnRep_TimeLimitSeconds();
};


// Class TslGame.TslWarGameState
// 0x0140 (0x08B0 - 0x0770)
class ATslWarGameState : public ATslGameState
{
public:
	int                                                GoalScore;                                                // 0x0770(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsTeamElimination : 1;                                   // 0x0774(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsWarRoyaleBluezone : 1;                                 // 0x0775(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bUsingTeamXRay : 1;                                       // 0x0776(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0777(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInitModePropertyReplicated;                             // 0x0778(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0788(0x0008) MISSED OFFSET
	struct FStartModeProperties                        StartModeProperties;                                      // 0x0790(0x0050) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_Transient)
	float                                              TimeLimitSeconds;                                         // 0x07E0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LastRespawnTimeSeconds;                                   // 0x07E4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnStartModePropertyRelicated;                             // 0x07E8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x07F8(0x0008) MISSED OFFSET
	TArray<float>                                      TeamScores;                                               // 0x0800(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	struct FScriptMulticastDelegate                    OnScoreChanged;                                           // 0x0810(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	float                                              NextRespawnTimeSeconds;                                   // 0x0820(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0824(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRespawnTimeUpdated;                                     // 0x0828(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      bRespawnOffed : 1;                                        // 0x0838(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x77];                                      // 0x0839(0x0077) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWarGameState");
		return ptr;
	}


	void OnRep_TeamScores();
	void OnRep_StartModeProperties();
	void OnRep_RespawnOffed();
	void OnRep_NextRespawnTimeSeconds();
	void OnRep_InitModeProperties();
	bool IsTimeUp();
	bool IsReachedGoalScore();
};


// Class TslGame.TslConquestGameState
// 0x0030 (0x08E0 - 0x08B0)
class ATslConquestGameState : public ATslWarGameState
{
public:
	TArray<struct FString>                             ActivatedCaptureAreaNames;                                // 0x08B0(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x20];                                      // 0x08C0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConquestGameState");
		return ptr;
	}


	void OnRep_ActivatedCaptureAreaNames(TArray<struct FString> OldActivatedCaptureAreaNames);
};


// Class TslGame.TslZombieGameState
// 0x0010 (0x0780 - 0x0770)
class ATslZombieGameState : public ATslGameState
{
public:
	unsigned char                                      bIsWinnerZombieTeam : 1;                                  // 0x0770(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      ZombieRevive : 1;                                         // 0x0771(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0772(0x0002) MISSED OFFSET
	int                                                NumAliveZombiePlayers;                                    // 0x0774(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0778(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslZombieGameState");
		return ptr;
	}


	void OnRep_NumAliveZombiePlayers();
};


// Class TslGame.TslGameViewportClient
// 0x0050 (0x06B0 - 0x0660)
class UTslGameViewportClient : public UGameViewportClient
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0660(0x0028) MISSED OFFSET
	class UTslConfirmationDialogWidget*                DialogUMGWidget;                                          // 0x0688(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslLoadingScreen*                           LoadingScreenWidget;                                      // 0x0690(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0698(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameViewportClient");
		return ptr;
	}

};


// Class TslGame.TslGlassWindowComponent
// 0x0040 (0x0AC0 - 0x0A80)
class UTslGlassWindowComponent : public UStaticMeshComponent
{
public:
	class UDestructibleMesh*                           DestructibleMesh;                                         // 0x0A80(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestroyDelayAfterDestructed;                              // 0x0A88(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A8C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               DestructSound;                                            // 0x0A90(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructSoundOcclusionRefreshInterval;                    // 0x0A98(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0A9C(0x0004) MISSED OFFSET
	class UDestructibleComponent*                      DestructibleComponent;                                    // 0x0AA0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bReplicatedOnClient : 1;                                  // 0x0AA8(0x0001) (CPF_Net)
	unsigned char                                      bDestroyed : 1;                                           // 0x0AA8(0x0001) (CPF_Net)
	unsigned char                                      UnknownData02[0x17];                                      // 0x0AA9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGlassWindowComponent");
		return ptr;
	}


	void OnRep_ReplicatedOnClient(bool bLastReplicatedOnClient);
	void OnRep_Destroyed(bool bLastDestroyed);
	void ClientNotifyHit(bool bBlockingHit, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& ImpactNormal);
};


// Class TslGame.TslGlobalWeatherSound
// 0x0000 (0x03E8 - 0x03E8)
class ATslGlobalWeatherSound : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGlobalWeatherSound");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslGunAnimInstance
// 0x00D8 (0x0468 - 0x0390)
class UTslGunAnimInstance : public UAnimInstance
{
public:
	struct FScriptMulticastDelegate                    WeaponFire;                                               // 0x0390(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponFireCycle;                                          // 0x03A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    TriggerOn;                                                // 0x03B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    TriggerOff;                                               // 0x03C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    Reload1;                                                  // 0x03D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    Reload2;                                                  // 0x03E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneStart;                                         // 0x03F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneSingle;                                        // 0x0400(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneEnd;                                           // 0x0410(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponCharge;                                             // 0x0420(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    FireSelect;                                               // 0x0430(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    CancelReload;                                             // 0x0440(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FName                                       Name_FireMode_Semi;                                       // 0x0450(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       Name_FireMode_Burst;                                      // 0x0458(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       Name_FireMode_Fullauto;                                   // 0x0460(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGunAnimInstance");
		return ptr;
	}


	void HandleFiremodeMontage(class UAnimMontage* FireModeMontage);
};


// Class TslGame.TslHealthGaugeData
// 0x0020 (0x0050 - 0x0030)
class UTslHealthGaugeData : public UDataAsset
{
public:
	TArray<struct FHealthColorData>                    HealthGaugeColors;                                        // 0x0030(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FFloatInterval                              WarningRage;                                              // 0x0040(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UCurveLinearColor*                           GroggyColorCurve;                                         // 0x0048(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHealthGaugeData");
		return ptr;
	}


	struct FLinearColor GetGaugeColor(float HealthPercent);
};


// Class TslGame.TslHornComponent
// 0x0040 (0x0220 - 0x01E0)
class UTslHornComponent : public UActorComponent
{
public:
	struct FTimerHandle                                TimerHandle_Horn;                                         // 0x01E0(0x0008)
	float                                              LongHornStartingTime;                                     // 0x01E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CurrHornKeyPressedTime;                                   // 0x01EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHornKeyDown : 1;                                         // 0x01F0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPlayingLongHorn : 1;                                     // 0x01F1(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01F2(0x0002) MISSED OFFSET
	struct FHornPlayInfo                               HornPlayInfo;                                             // 0x01F4(0x0008) (CPF_Net, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET
	struct FHornSoundInfo                              HornSounds_Local;                                         // 0x0200(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FHornSoundInfo                              HornSounds_Remote;                                        // 0x0210(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHornComponent");
		return ptr;
	}


	void TickHorn(float DeltaSeconds);
	void ServerSetHorn(const struct FHornPlayInfo& InHornPlayInfo);
	void PlayInstantHorn();
	void PlayHorn(bool bIsLocalPlay);
	void OnRep_SetHornPlayInfo();
	void OnPostDriverLeave();
	bool OnHornKeyUpPad();
	void OnHornKeyUp();
	bool OnHornKeyDownPad();
	void OnHornKeyDown();
	void OnHornEnd();
	void MulticastSetInstantHorn(const struct FHornPlayInfo& InHornPlayInfo);
};


// Class TslGame.TslHUDSetting
// 0x0018 (0x0040 - 0x0028)
class UTslHUDSetting : public UObject
{
public:
	int                                                PingCautionThreshold;                                     // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PingWarningThreshold;                                     // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PingVariationThreshold;                                   // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           PacketLossCautionThreshold;                               // 0x0034(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           PacketLossWarningThreshold;                               // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHUDSetting");
		return ptr;
	}

};


// Class TslGame.TslImpactEffect
// 0x05D8 (0x09C0 - 0x03E8)
class ATslImpactEffect : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class UParticleSystem*                             DefaultFX;                                                // 0x03F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             ConcreteFX;                                               // 0x03F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             RockFX;                                                   // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             DirtFX;                                                   // 0x0408(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             WaterFX;                                                  // 0x0410(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             MetalFX;                                                  // 0x0418(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             WoodFX;                                                   // 0x0420(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             GlassFX;                                                  // 0x0428(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             GrassFX;                                                  // 0x0430(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             SandFX;                                                   // 0x0438(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             FleshFX;                                                  // 0x0440(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             MudFX;                                                    // 0x0448(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             CropsFX;                                                  // 0x0450(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             CactusFX;                                                 // 0x0458(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             PaperFX;                                                  // 0x0460(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             RubberFX;                                                 // 0x0468(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             FabricFX;                                                 // 0x0470(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             SnowFX;                                                   // 0x0478(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             SnowRockFX;                                               // 0x0480(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             IceFX;                                                    // 0x0488(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               AkSound;                                                  // 0x0490(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bConvertForColorBlind : 1;                                // 0x0498(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0499(0x0007) MISSED OFFSET
	TMap<struct FName, struct FVector>                 VectorParameters;                                         // 0x04A0(0x0050) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FDecalEffectDataSet                         DecalEffectDataSet;                                       // 0x04F0(0x0430) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FHitResult                                  SurfaceHit;                                               // 0x0920(0x0088) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      bAlwaysAttachToSurface : 1;                               // 0x09A8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x09A9(0x000F) MISSED OFFSET
	class UAkComponent*                                AKCom;                                                    // 0x09B8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslImpactEffect");
		return ptr;
	}


	struct FDecalEffectDataSet GetAdjustedDecalEffectDataSet_BP();
	void AdjustDecalEffectDataSet_BP();
};


// Class TslGame.TslInstancedGlassWindowComponent
// 0x0130 (0x0DD0 - 0x0CA0)
class UTslInstancedGlassWindowComponent : public UGridInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0CA0(0x0008) MISSED OFFSET
	class UDestructibleMesh*                           DestructibleMesh;                                         // 0x0CA8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestroyDelayAfterDestructed;                              // 0x0CB0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0CB4(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               DestructSound;                                            // 0x0CB8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructSoundOcclusionRefreshInterval;                    // 0x0CC0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bReplicatedOnClient : 1;                                  // 0x0CC4(0x0001) (CPF_Net)
	unsigned char                                      UnknownData02[0x13];                                      // 0x0CC5(0x0013) MISSED OFFSET
	TArray<int>                                        DestroyedInstances;                                       // 0x0CD8(0x0010) (CPF_Net, CPF_ZeroConstructor)
	TArray<int>                                        PendingDestroyInstances;                                  // 0x0CE8(0x0010) (CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0xD8];                                      // 0x0CF8(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslInstancedGlassWindowComponent");
		return ptr;
	}


	void OnRep_ReplicatedOnClient(bool bLastReplicatedOnClient);
	void OnRep_PendingDestroy();
	void OnRep_Destroyed();
	void ClientNotifyHit(bool bBlockingHit, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& ImpactNormal, int InstanceIndex);
};


// Class TslGame.TslInstancedReactionComponent
// 0x01F0 (0x0E90 - 0x0CA0)
class UTslInstancedReactionComponent : public UGridInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0CA0(0x0008) MISSED OFFSET
	TArray<int>                                        PendingDestroyInstances;                                  // 0x0CA8(0x0010) (CPF_Net, CPF_ZeroConstructor)
	class UTslReactionData*                            ReactionData;                                             // 0x0CB8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           ReactionDM;                                               // 0x0CC0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0CC8(0x0080) MISSED OFFSET
	TMap<int, class UDestructibleComponent*>           ReactionDestructibles;                                    // 0x0D48(0x0050) (CPF_ExportObject, CPF_ZeroConstructor)
	TMap<int, class UStaticMeshComponent*>             ReactionStaticMeshComponents;                             // 0x0D98(0x0050) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0xA8];                                      // 0x0DE8(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslInstancedReactionComponent");
		return ptr;
	}


	void OnRep_PendingDestroy();
	void Client_ReactByVehicle(int InstanceIndex, const struct FVector& Impact, const struct FVector& ImpulseDir, const struct FVector& Velocity);
	void Client_ReactByRadialDamage(int InstanceIndex, float DamageAmount, const struct FVector& Origin, const struct FVector& Impact, const struct FVector& ImpulseDir, float OuterRadius);
	void Client_ReactByPointDamage(int InstanceIndex, float DamageAmount, const struct FVector& Impact, const struct FVector& ImpulseDir);
};


// Class TslGame.TslInventoryAnimInstance
// 0x0120 (0x04B0 - 0x0390)
class UTslInventoryAnimInstance : public UAnimInstance
{
public:
	struct FTransform                                  DefaultSlotPrimary_Male_CP;                               // 0x0390(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Male_CP;                             // 0x03C0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotPrimary_Female_CP;                             // 0x03F0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Female_CP;                           // 0x0420(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     SlotPrimary_Location_CP;                                  // 0x0450(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotSecondary_Location_CP;                                // 0x045C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotPrimary_Offset_CP;                                    // 0x0468(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotSecondary_Offset_CP;                                  // 0x0474(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SlotPrimary_Rotation_CP;                                  // 0x0480(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SlotSecondary_Rotation_CP;                                // 0x048C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnLobbyEmotePlay;                                         // 0x0498(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0x1];                                       // 0x04A8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslInventoryAnimInstance.OutGameMontageState

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslInventoryAnimInstance");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker
// 0x0008 (0x0030 - 0x0028)
class UTslKeyHintChecker : public UObject
{
public:
	unsigned char                                      bCurrState : 1;                                           // 0x0028(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsChanged : 1;                                           // 0x0029(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Menu
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Menu : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Menu");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Parachuting
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Parachuting : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Parachuting");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Character
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Character : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Character");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Driver
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Driver : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Driver");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Rider
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Rider : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Rider");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_WeaponUse
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_WeaponUse : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_WeaponUse");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_WeaponChange
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_WeaponChange : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_WeaponChange");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_ADS");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Aim
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Aim : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Aim");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_8x15x
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_8x15x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_ADS_8x15x");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_6x
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_6x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_ADS_6x");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_1x2x3x
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_1x2x3x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_ADS_1x2x3x");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_IronSight
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_IronSight : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_ADS_IronSight");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Throwing
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Throwing : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Throwing");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Heal
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Heal : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Heal");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Swimming
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Swimming : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_Swimming");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_TeamSpectating
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_TeamSpectating : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_TeamSpectating");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_KillerSpectating
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_KillerSpectating : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_KillerSpectating");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_WorldMap
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_WorldMap : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_WorldMap");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_FreefallNew
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_FreefallNew : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_FreefallNew");
		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ParachuteNew
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ParachuteNew : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyHintChecker_ParachuteNew");
		return ptr;
	}

};


// Class TslGame.TslGamepadKeyHintWidget
// 0x0068 (0x0420 - 0x03B8)
class UTslGamepadKeyHintWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03B8(0x0018) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   HintSizeBox_Binder;                                       // 0x03D0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   HintSetSwitcher_Binder;                                   // 0x03F0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<struct FTslKeyHintData>                     KeyHintDatas;                                             // 0x0410(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadKeyHintWidget");
		return ptr;
	}


	void UpdateHintSizeBoxPosition();
	void OnGameUserSettingApplied();
};


// Class TslGame.TslLevelScriptActor
// 0x00B0 (0x04A0 - 0x03F0)
class ATslLevelScriptActor : public ALevelScriptActor
{
public:
	TArray<struct FWeatherLevelInfo>                   WeatherLevelInfos;                                        // 0x03F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UMaterialParameterCollection*                GlobalMPC;                                                // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                SelectedWeatherLevelIndex;                                // 0x0408(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                PrevWeatherLevelIndex;                                    // 0x040C(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RepDistanceModifier;                                      // 0x0410(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8C];                                      // 0x0414(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLevelScriptActor");
		return ptr;
	}


	void RequestReplayALevelWeatherEvent(const struct FString& EventID);
	void RecordWeatherAsCustomEvent();
	void OnRep_SelectedWeatherIndex();
	void OnRep_PrevWeatherLevelIndex();
	void EnumerateReplayLevelEvents();
};


// Class TslGame.TslLobbyWeapon
// 0x0028 (0x0410 - 0x03E8)
class ATslLobbyWeapon : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class UWeaponMeshComponent*                        Mesh3P;                                                   // 0x03F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03F8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslLobbyWeapon.WeaponClassEnum
	unsigned char                                      UnknownData02[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	float                                              WeaponIconRatio;                                          // 0x03FC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      WeaponClass;                                              // 0x0400(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMeshComponent*                              CharmMesh;                                                // 0x0408(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLobbyWeapon");
		return ptr;
	}


	class UWeaponMeshComponent* GetWeaponMeshComponent();
	class UClass* GetWeaponClass();
};


// Class TslGame.TslPersistentUser
// 0x0160 (0x0188 - 0x0028)
class UTslPersistentUser : public USaveGame
{
public:
	struct FTslPersistantData                          PersistantData;                                           // 0x0028(0x0140) (CPF_Edit, CPF_EditConst)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0168(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPersistentUser");
		return ptr;
	}

};


// Class TslGame.TslLocalPlayer
// 0x0008 (0x01D0 - 0x01C8)
class UTslLocalPlayer : public ULocalPlayer
{
public:
	class UTslPersistentUser*                          PersistentUser;                                           // 0x01C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLocalPlayer");
		return ptr;
	}

};


// Class TslGame.TslMenuItemWidgetStyle
// 0x01B8 (0x01E8 - 0x0030)
class UTslMenuItemWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslMenuItemStyle                           MenuItemStyle;                                            // 0x0030(0x01B8) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMenuItemWidgetStyle");
		return ptr;
	}

};


// Class TslGame.TslMenuSoundsWidgetStyle
// 0x0038 (0x0068 - 0x0030)
class UTslMenuSoundsWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslMenuSoundsStyle                         SoundsStyle;                                              // 0x0030(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMenuSoundsWidgetStyle");
		return ptr;
	}

};


// Class TslGame.TslMenuWidgetStyle
// 0x0218 (0x0248 - 0x0030)
class UTslMenuWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslMenuStyle                               MenuStyle;                                                // 0x0030(0x0218) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMenuWidgetStyle");
		return ptr;
	}

};


// Class TslGame.TslModularBuilding
// 0x0100 (0x04E8 - 0x03E8)
class ATslModularBuilding : public AActor
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x03E8(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslModularBuilding");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslNaviWidgetComp
// 0x0040 (0x0068 - 0x0028)
class UTslNaviWidgetComp : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnGamepadUp_Handler;                                      // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGamepadDown_Handler;                                    // 0x0038(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGamepadEnter_Handler;                                   // 0x0048(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFocusReceived_Handler;                                  // 0x0058(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNaviWidgetComp");
		return ptr;
	}

};


// Class TslGame.TslNaviWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class UTslNaviWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNaviWidgetInterface");
		return ptr;
	}

};


// Class TslGame.TslNetDebugDraw
// 0x0020 (0x0408 - 0x03E8)
class ATslNetDebugDraw : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNetDebugDraw");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslNpcAnimDataAsset
// 0x0000 (0x0030 - 0x0030)
class UTslNpcAnimDataAsset : public UDataAsset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcAnimDataAsset");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterAnimDataAsset
// 0x02B8 (0x02E8 - 0x0030)
class UTslNpcCharacterAnimDataAsset : public UTslNpcAnimDataAsset
{
public:
	struct FCustomAnimData                             Respawn;                                                  // 0x0030(0x0088) (CPF_Edit)
	struct FCustomAnimData                             Fire1;                                                    // 0x00B8(0x0088) (CPF_Edit)
	struct FCustomAnimData                             Fire2;                                                    // 0x0140(0x0088) (CPF_Edit)
	struct FCustomAnimData                             Fire3;                                                    // 0x01C8(0x0088) (CPF_Edit)
	class UAnimSequenceBase*                           Idle1;                                                    // 0x0250(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           Idle2;                                                    // 0x0258(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           SprintF1;                                                 // 0x0260(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           SprintF2;                                                 // 0x0268(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           SprintF3;                                                 // 0x0270(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WalkBlendSpace;                                           // 0x0278(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             RunBlendSpace;                                            // 0x0280(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             SprintBlendSpace;                                         // 0x0288(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPreBlendSpace;                                   // 0x0290(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackBlendSpace;                                      // 0x0298(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPostBlendSpace;                                  // 0x02A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownFront;                                           // 0x02A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownBack;                                            // 0x02B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownLeft;                                            // 0x02B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownRight;                                           // 0x02C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           GetupFront;                                               // 0x02C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           GetupBack;                                                // 0x02D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           GetupLeft;                                                // 0x02D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           GetupRight;                                               // 0x02E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterAnimDataAsset");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterDamageAnimDataAsset
// 0x0430 (0x0460 - 0x0030)
class UTslNpcCharacterDamageAnimDataAsset : public UTslNpcAnimDataAsset
{
public:
	TArray<struct FCustomAnimData>                     HitBody_Forward;                                          // 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_Backward;                                         // 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_Left;                                             // 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_Right;                                            // 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_ForwardRight;                                     // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_BackwardRight;                                    // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_BackwardLeft;                                     // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_ForwardLeft;                                      // 0x00A0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Forward;                                          // 0x00B0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Backward;                                         // 0x00C0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Left;                                             // 0x00D0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Right;                                            // 0x00E0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_ForwardRight;                                     // 0x00F0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_BackwardRight;                                    // 0x0100(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_BackwardLeft;                                     // 0x0110(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_ForwardLeft;                                      // 0x0120(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FCustomAnimData                             Death_Forward;                                            // 0x0130(0x0088) (CPF_Edit)
	struct FCustomAnimData                             DeathHead_Forward;                                        // 0x01B8(0x0088) (CPF_Edit)
	struct FCustomAnimData                             DeathLegs_Forward;                                        // 0x0240(0x0088) (CPF_Edit)
	struct FCustomAnimData                             Death_Backward;                                           // 0x02C8(0x0088) (CPF_Edit)
	struct FCustomAnimData                             DeathHead_Backward;                                       // 0x0350(0x0088) (CPF_Edit)
	struct FCustomAnimData                             DeathLegs_Backward;                                       // 0x03D8(0x0088) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterDamageAnimDataAsset");
		return ptr;
	}

};


// Class TslGame.TslNpcAnimInstance
// 0x0038 (0x03C8 - 0x0390)
class UTslNpcAnimInstance : public UAnimInstance
{
public:
	class USkeletalMeshComponent*                      OwnerMesh;                                                // 0x0390(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UAnimMontage*>                        AnimMontageList;                                          // 0x0398(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UAnimMontage*                                DefaultMontage[0x2];                                      // 0x03A8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                DefaultMontageIndex;                                      // 0x03B8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	class UTslNpcAnimDataAsset*                        AnimDataAsset;                                            // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcAnimInstance");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterAnimInstance
// 0x0230 (0x05F8 - 0x03C8)
class UTslNpcCharacterAnimInstance : public UTslNpcAnimInstance
{
public:
	class UTslNpcCharacterAnimDataAsset*               CharacterAnimDataAsset;                                   // 0x03C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslNpcCharacter*                            OwnerCharacter;                                           // 0x03D0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAnimMontage*                                UpperBodyMontageList[0x2];                                // 0x03D8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAnimMontage*                                FullBodyInstanceMontage;                                  // 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAnimMontage*                                UpperBodyInstanceMontage;                                 // 0x03F0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAnimMontage*                                LowerBodyInstanceMontage;                                 // 0x03F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WalkBlendSpace;                                           // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             RunBlendSpace;                                            // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             SprintBlendSpace;                                         // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPreBlendSpace;                                   // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackBlendSpace;                                      // 0x0420(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPostBlendSpace;                                  // 0x0428(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              WalkSpeedRatio;                                           // 0x0430(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              WalkSpeedRatioLowerRange;                                 // 0x0434(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkSpeedRatioUpperRange;                                 // 0x0438(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxWalkSpeed;                                             // 0x043C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RunSpeedRatio;                                            // 0x0440(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              RunSpeedRatioLowerRange;                                  // 0x0444(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RunSpeedRatioUpperRange;                                  // 0x0448(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxRunSpeed;                                              // 0x044C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintSpeedRatio;                                         // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              SprintSpeedRatioLowerRange;                               // 0x0454(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintSpeedRatioUpperRange;                               // 0x0458(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSprintSpeed;                                           // 0x045C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FPoseSnapshot                               SavedPoseSnapshot;                                        // 0x0460(0x0038) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FAlphaBlend                                 PoseSnapshotBlendOut;                                     // 0x0498(0x0038) (CPF_Transient)
	float                                              PoseSnapshotWeight;                                       // 0x04D0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                UpperBodyMontageIndex;                                    // 0x04D4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              UpperBodyWeight;                                          // 0x04D8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LowerBodyWeight;                                          // 0x04DC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FAlphaBlend                                 UpperBodyBlendIn;                                         // 0x04E0(0x0038) (CPF_Transient)
	struct FAlphaBlend                                 UpperBodyBlendOut;                                        // 0x0518(0x0038) (CPF_Transient)
	struct FAlphaBlend                                 LowerBodyBlendIn;                                         // 0x0550(0x0038) (CPF_Edit)
	struct FAlphaBlend                                 LowerBodyBlendOut;                                        // 0x0588(0x0038) (CPF_Edit)
	float                                              MovingThreshold;                                          // 0x05C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MoveVelocity;                                             // 0x05C4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_IsPlainOldData)
	float                                              Speed2D;                                                  // 0x05D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              Direction;                                                // 0x05D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              LocalDamageDirYaw;                                        // 0x05D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DamageDirYaw;                                             // 0x05DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	struct FVector                                     FloorNormal;                                              // 0x05E0(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	float                                              FloorSlopeAngle;                                          // 0x05EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x05F0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacterAnimInstance.CharacterAnimType
	unsigned char                                      UnknownData01[0x1];                                       // 0x05F1(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacterAnimInstance.WalkingSpeedType
	unsigned char                                      UnknownData02[0x1];                                       // 0x05F2(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacterAnimInstance.PelvisBoneDirection
	unsigned char                                      bIsMoving : 1;                                            // 0x05F3(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bIsValidUpperBody : 1;                                    // 0x05F4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bIsKnockback : 1;                                         // 0x05F5(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsKnockdown : 1;                                         // 0x05F6(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsGetup : 1;                                             // 0x05F7(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterAnimInstance");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacter
// 0x01C0 (0x09D0 - 0x0810)
class ATslNpcCharacter : public ACharacter
{
public:
	class UTslNpcCharacterState_Base*                  StateList[0x8];                                           // 0x0810(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslNpcCharacterState_Base*                  CurrentState;                                             // 0x0850(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UPhysicsAsset*                               DyingPhysicsAsset;                                        // 0x0858(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslNpcDamageConfig*                         DamageConfig;                                             // 0x0860(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNpcMeleeAttackInfo                         MeleeAttackInfo[0x3];                                     // 0x0868(0x0040) (CPF_Edit)
	int                                                MaxFireMode;                                              // 0x0928(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x092C(0x0004) MISSED OFFSET
	class UTslNpcCharacterMovement*                    NpcCharacterMovement;                                     // 0x0930(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              CorpseLifeSpan;                                           // 0x0938(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x093C(0x0004) MISSED OFFSET
	class UTslNpcCharacterAnimDataAsset*               CharacterAnimDataAsset;                                   // 0x0940(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslNpcCharacterDamageAnimDataAsset*         DamageAnimDataAsset;                                      // 0x0948(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                FireModeIndex;                                            // 0x0950(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0954(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacter.StateType
	unsigned char                                      UnknownData03[0x1];                                       // 0x0955(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacter.StateTypeCounter
	unsigned char                                      UnknownData04[0x2];                                       // 0x0956(0x0002) MISSED OFFSET
	TArray<struct FNpcCustomAnimInfo>                  SavedCustomAnimList;                                      // 0x0958(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FNPCDrawMovingInfo>                  DrawMovingInfo;                                           // 0x0968(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                DrawMovingInfoMaxCounter;                                 // 0x0978(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x097C(0x0004) MISSED OFFSET
	class AActor*                                      FocusActor;                                               // 0x0980(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     RagdollLinearVelocity;                                    // 0x0988(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	float                                              HitImpulseRemainedTime;                                   // 0x0994(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              HitImpulseDuration;                                       // 0x0998(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              HitImpulseWeight;                                         // 0x099C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       HitImpulseBoneName;                                       // 0x09A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              NextStateRemainedTime;                                    // 0x09A8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x14];                                      // 0x09AC(0x0014) MISSED OFFSET
	struct FName                                       HitBoneName;                                              // 0x09C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	uint16_t                                           HitBoneIndex;                                             // 0x09C8(0x0002) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	uint16_t                                           Health;                                                   // 0x09CA(0x0002) (CPF_Edit, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      DamageDirYaw;                                             // 0x09CC(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x09CD(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacter.AttackerWeaponClass
	unsigned char                                      bIsDead : 1;                                              // 0x09CE(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsRagdoll : 1;                                           // 0x09CF(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacter");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterMovement
// 0x0070 (0x0970 - 0x0900)
class UTslNpcCharacterMovement : public UCharacterMovementComponent
{
public:
	float                                              MaxRunSpeed;                                              // 0x0900(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSprintSpeed;                                           // 0x0904(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FocusActorMinDistanceForRotation;                         // 0x0908(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FocusActorMinDistanceSqrForRotation;                      // 0x090C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              MovingThreshold;                                          // 0x0910(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0914(0x0004) MISSED OFFSET
	class UCurveFloat*                                 AvoidanceSpeedScaleCurve;                                 // 0x0918(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 TurnSpeedScaleCurve;                                      // 0x0920(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ChangeSpeedRatioOnMoveBlocked;                            // 0x0928(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SavedMaxSpeed;                                            // 0x092C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              Speed2D;                                                  // 0x0930(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              VelocityDirection;                                        // 0x0934(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslNpcCharacter*                            OwnerCharacter;                                           // 0x0938(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     OverrideVelocity;                                         // 0x0940(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	float                                              OverrideMovingSpeedDuration;                              // 0x094C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              OverrideMovingSpeedPassedTime;                            // 0x0950(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0954(0x0004) MISSED OFFSET
	class UCurveFloat*                                 OverrideMovingSpeedScaleCurve;                            // 0x0958(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0960(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacterMovement.SavedNetworkSmoothingMode
	unsigned char                                      bOrientRotationToMovementOnRun : 1;                       // 0x0961(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOrientRotationToMovementOnSprint : 1;                    // 0x0962(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xD];                                       // 0x0963(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterMovement");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Base
// 0x0028 (0x0050 - 0x0028)
class UTslNpcCharacterState_Base : public UObject
{
public:
	float                                              StateDuration;                                            // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	struct FPoseSnapshotInfo                           BlendSnapshotInfo;                                        // 0x0030(0x0010) (CPF_Edit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0040(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacterState_Base.MaxWalkingSpeed
	unsigned char                                      UnknownData02[0x1];                                       // 0x0041(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacterState_Base.StateType
	unsigned char                                      UnknownData03[0x1];                                       // 0x0042(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslNpcCharacterState_Base.NextStateType
	unsigned char                                      bIsFiringState : 1;                                       // 0x0043(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDamageDirectionState : 1;                                // 0x0044(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCanFire : 1;                                             // 0x0045(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCanKnockback : 1;                                        // 0x0046(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCanSkipPhysicsRotation : 1;                              // 0x0047(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreDamageAnim : 1;                                    // 0x0048(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSetRecentlyRenderedFlag : 1;                             // 0x0049(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRestoreRagdoll : 1;                                      // 0x004A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLastEnableUpdateRateOptimizations : 1;                   // 0x004B(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterState_Base");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Default
// 0x0000 (0x0050 - 0x0050)
class UTslNpcCharacterState_Default : public UTslNpcCharacterState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterState_Default");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_DownBase
// 0x0000 (0x0050 - 0x0050)
class UTslNpcCharacterState_DownBase : public UTslNpcCharacterState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterState_DownBase");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Knockback
// 0x0000 (0x0050 - 0x0050)
class UTslNpcCharacterState_Knockback : public UTslNpcCharacterState_DownBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterState_Knockback");
		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Fire
// 0x0008 (0x0058 - 0x0050)
class UTslNpcCharacterState_Fire : public UTslNpcCharacterState_Base
{
public:
	int                                                FireStateIndex;                                           // 0x0050(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DamageDelay;                                              // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcCharacterState_Fire");
		return ptr;
	}

};


// Class TslGame.TslNpcControllerBase
// 0x0020 (0x0520 - 0x0500)
class ATslNpcControllerBase : public AAIController
{
public:
	int                                                TeamIndex;                                                // 0x0500(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0504(0x0004) MISSED OFFSET
	class UClass*                                      AggroClass;                                               // 0x0508(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslAggroSystem*                             AggroSystem;                                              // 0x0510(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTslNpcPathFollowingComponent*               NpcPathFollowingComponent;                                // 0x0518(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcControllerBase");
		return ptr;
	}


	void OnTargetPerceptionUpdated(class AActor* InActor, const struct FAIStimulus& InStimulus);
};


// Class TslGame.TslNpcAIController
// 0x0008 (0x0528 - 0x0520)
class ATslNpcAIController : public ATslNpcControllerBase
{
public:
	class ATslNpcCharacter*                            NpcCharacter;                                             // 0x0520(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcAIController");
		return ptr;
	}

};


// Class TslGame.TslNpcDamageConfig
// 0x0050 (0x0080 - 0x0030)
class UTslNpcDamageConfig : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslNpcDamageConfig.DamageZones

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcDamageConfig");
		return ptr;
	}

};


// Class TslGame.TslNpcManager
// 0x0040 (0x0068 - 0x0028)
class UTslNpcManager : public UObject
{
public:
	float                                              DrawMovementDistance;                                     // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DrawMovementDirThreshold;                                 // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslNpcSpawnSystem*                          SpawnSystem;                                              // 0x0030(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_NoClear, CPF_IsPlainOldData)
	class UTslWaveSystem*                              WaveSystem;                                               // 0x0038(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslSpawnAroundPlayerSystem*                 SpawnAroundPlayerSystem;                                  // 0x0040(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class ATslPlayerController*>                DrawMovementPCList;                                       // 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATslPlayerController*>                DebugPCList;                                              // 0x0058(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcManager");
		return ptr;
	}


	class UTslNpcManager* CreateNpcManager(class UObject* WorldContextObject, class UClass* InNpcManagerBp);
};


// Class TslGame.TslNpcPathFollowingComponent
// 0x0020 (0x04C0 - 0x04A0)
class UTslNpcPathFollowingComponent : public UPathFollowingComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x04A0(0x0004) MISSED OFFSET
	struct FVector                                     LastMovingDirection;                                      // 0x04A4(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsNoFinish : 1;                                          // 0x04B0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x04B1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcPathFollowingComponent");
		return ptr;
	}

};


// Class TslGame.TslNpcSpawnPoint
// 0x0058 (0x0440 - 0x03E8)
class ATslNpcSpawnPoint : public AActor
{
public:
	TMap<int, int>                                     WaveNpcTypeMap;                                           // 0x03E8(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	int                                                DefaultNpcType;                                           // 0x0438(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcSpawnPoint");
		return ptr;
	}

};


// Class TslGame.TslNpcSpawnSystem
// 0x0040 (0x0068 - 0x0028)
class UTslNpcSpawnSystem : public UObject
{
public:
	TArray<struct FNpcInfo>                            NpcInfoArray;                                             // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              SpawnInterval;                                            // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<class APawn*>                               SpawnedPawnArray;                                         // 0x0040(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FAISpawnParameterInfo>               PendingSpawnArray;                                        // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNpcSpawnSystem");
		return ptr;
	}

};


// Class TslGame.TslObserverHudAnimWidget
// 0x0008 (0x0250 - 0x0248)
class UTslObserverHudAnimWidget : public UUserWidget
{
public:
	class UTslObserverHudAnimManageWidget*             Manager;                                                  // 0x0248(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverHudAnimWidget");
		return ptr;
	}


	void InitAndPlay(const struct FObserverHudAnimData& Data);
};


// Class TslGame.TslObserverHudAnimManageWidget
// 0x0068 (0x0420 - 0x03B8)
class UTslObserverHudAnimManageWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     HudAnimBorder_Binder;                                     // 0x03C8(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      TeamWipeOutNumLogoWidgetClass;                            // 0x03F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      TeamWipeOutImageLogoWidgetClass;                          // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      PersonalKillingSpreeWidgetClass;                          // 0x0408(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      TeamTotalKillingSpreeWidgetClass;                         // 0x0410(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslObserverHudAnimWidget*                   CurrAnimWidget;                                           // 0x0418(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverHudAnimManageWidget");
		return ptr;
	}


	bool ProcData();
	bool Peek(struct FObserverHudAnimData* OutPeekedMessage);
	void OnCurrAnimFinish();
	int NumElems();
	bool IsEmpty();
	bool IsBusy();
	bool Enqueue(int EliminatorTeamNum, int EliminatedTeamNum, const struct FString& KillingSpreePlayerName, const struct FString& KillingSpreeClanName, int KillingSpreeTeamNum, int KillingSpreeKillCount);
	bool Dequeue();
	void Clear();
};


// Class TslGame.TslObserverPlayerData
// 0x0040 (0x0068 - 0x0028)
class UTslObserverPlayerData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET
	class ATslPlayerState*                             PlayerState;                                              // 0x0050(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslCharacter*                               Character;                                                // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTslObserverPlayerListTileInfoWidget*        Widget;                                                   // 0x0060(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverPlayerData");
		return ptr;
	}

};


// Class TslGame.TslObserverTeamData
// 0x0090 (0x00B8 - 0x0028)
class UTslObserverTeamData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TMap<struct FString, class UTslObserverPlayerData*> Players;                                                  // 0x0038(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	class UTslObserverPlayerListTileWidget*            Widget;                                                   // 0x0088(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0090(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverTeamData");
		return ptr;
	}

};


// Class TslGame.TslBaseOptionWidget
// 0x00C8 (0x0480 - 0x03B8)
class UTslBaseOptionWidget : public UUmgBaseWidget
{
public:
	struct FName                                       OptionName;                                               // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC0];                                      // 0x03C0(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBaseOptionWidget");
		return ptr;
	}


	void OnReset();
	void OnDefault();
	void OnApply();
	bool IsKeyUp();
	bool IsEnableApply();
	bool IsChanged();
};


// Class TslGame.TslGamepadOptionContentsWidget
// 0x0070 (0x04F0 - 0x0480)
class UTslGamepadOptionContentsWidget : public UTslBaseOptionWidget
{
public:
	TArray<class UTslOptionImpl*>                      OptionImplObjects;                                        // 0x0480(0x0010) (CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnContentButtonFocused;                                   // 0x0490(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FUmgWidgetBinder_Gerneral                   ContentsScrollBox_Binder;                                 // 0x04A0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      StepperWidgetClass;                                       // 0x04C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      SliderWidgetClass;                                        // 0x04C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      SeparatorWidgetClass;                                     // 0x04D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      CrosshairColorSliderClass;                                // 0x04D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FOptionContentDesc>                  OptionList;                                               // 0x04E0(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionContentsWidget");
		return ptr;
	}


	void HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl");
		return ptr;
	}

};


// Class TslGame.TslGamepadOptionGameplay
// 0x0000 (0x04F0 - 0x04F0)
class UTslGamepadOptionGameplay : public UTslGamepadOptionContentsWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionGameplay");
		return ptr;
	}


	void HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl_LANGUAGE
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_LANGUAGE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_LANGUAGE");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DVR
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_DVR : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_DVR");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_HUD_WEAPON
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_HUD_WEAPON : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_HUD_WEAPON");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_HUD_EQUIPMENT
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_HUD_EQUIPMENT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_HUD_EQUIPMENT");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_KILLFEED
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_KILLFEED : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_KILLFEED");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_COLOR_BLIND
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_COLOR_BLIND : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_COLOR_BLIND");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_COLOR_CROSSHAIR
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_COLOR_CROSSHAIR : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_COLOR_CROSSHAIR");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_CUSTOM_CROSSHAIR
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_CUSTOM_CROSSHAIR : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_CUSTOM_CROSSHAIR");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_KEY_HINT
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_KEY_HINT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_KEY_HINT");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ITEMXRAY
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_ITEMXRAY : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_ITEMXRAY");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_TPP_AIM_POSITION
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_TPP_AIM_POSITION : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_TPP_AIM_POSITION");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_AUTO_RELOADING
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_AUTO_RELOADING : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_AUTO_RELOADING");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_COMPASS_SHADE
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_COMPASS_SHADE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_COMPASS_SHADE");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DEFALUT_FIREMODE
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_DEFALUT_FIREMODE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_DEFALUT_FIREMODE");
		return ptr;
	}

};


// Class TslGame.TslGamepadOptionSound
// 0x0000 (0x04F0 - 0x04F0)
class UTslGamepadOptionSound : public UTslGamepadOptionContentsWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionSound");
		return ptr;
	}


	void HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl_BGMMute
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_BGMMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_BGMMute");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_MasterMute
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_MasterMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_MasterMute");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_UIMute
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_UIMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_UIMute");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_EffectMute
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_EffectMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_EffectMute");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_HRTF
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_HRTF : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_HRTF");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeMaster
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_VolumeMaster : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_VolumeMaster");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeBGM
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_VolumeBGM : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_VolumeBGM");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeUI
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_VolumeUI : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_VolumeUI");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeEffect
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_VolumeEffect : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_VolumeEffect");
		return ptr;
	}

};


// Class TslGame.TslGamepadOptionGraphic
// 0x0010 (0x0500 - 0x04F0)
class UTslGamepadOptionGraphic : public UTslGamepadOptionContentsWidget
{
public:
	TArray<class UTslGamepadStepperWidget*>            QualitySteppers;                                          // 0x04F0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionGraphic");
		return ptr;
	}


	void OnStepperChanged(class UTslGamepadStepperWidget* Widget);
};


// Class TslGame.TslOptionImpl_FOV
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_FOV : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_FOV");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_BRIGHTNESS
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_BRIGHTNESS : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_BRIGHTNESS");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_QualitySettings
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_QualitySettings : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_QualitySettings");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_Res4K
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_Res4K : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_Res4K");
		return ptr;
	}

};


// Class TslGame.TslGamepadOptionControl
// 0x0000 (0x04F0 - 0x04F0)
class UTslGamepadOptionControl : public UTslGamepadOptionContentsWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionControl");
		return ptr;
	}


	void HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl_INVERTX
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_INVERTX : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_INVERTX");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_INVERTY
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_INVERTY : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_INVERTY");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VIBRATION
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_VIBRATION : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_VIBRATION");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DEADZONE
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_DEADZONE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_DEADZONE");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DEADZONE_LEFT
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_DEADZONE_LEFT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_DEADZONE_LEFT");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_StartRunningSensitivity
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_StartRunningSensitivity : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_StartRunningSensitivity");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_PRESET
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_PRESET : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_PRESET");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ToggleAimAcceleration
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_ToggleAimAcceleration : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_ToggleAimAcceleration");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_SensBase
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_SensBase : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_SensBase");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ForceFeedbackMultiplier
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_ForceFeedbackMultiplier : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_ForceFeedbackMultiplier");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VerticalSensMultiplier
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_VerticalSensMultiplier : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_VerticalSensMultiplier");
		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ForwardRunningSensitivity
// 0x0000 (0x0028 - 0x0028)
class UTslOptionImpl_ForwardRunningSensitivity : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslOptionImpl_ForwardRunningSensitivity");
		return ptr;
	}

};


// Class TslGame.TslParticle
// 0x00B0 (0x0498 - 0x03E8)
class ATslParticle : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	unsigned char                                      bAutoDestroyOnParticleFinish : 1;                         // 0x03F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoPlaySound : 1;                                       // 0x03F1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03F2(0x0001) MISSED OFFSET
	unsigned char                                      bWaitForAudioToFinish : 1;                                // 0x03F3(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	TArray<struct FParticleParameter>                  DefaultParameters;                                        // 0x03F8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0408(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslParticle.AttachParentType
	unsigned char                                      UnknownData04[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	struct FName                                       AttachSocketName;                                         // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0418(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslParticle.AttachLocationRule
	unsigned char                                      UnknownData06[0x1];                                       // 0x0419(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslParticle.AttachRotationRule
	unsigned char                                      UnknownData07[0x1];                                       // 0x041A(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslParticle.AttachScaleRule
	unsigned char                                      bConvertForColorBlind : 1;                                // 0x041B(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	TMap<struct FName, struct FVector>                 VectorParameters;                                         // 0x0420(0x0050) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0470(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslParticle.TestColorBlindType
	unsigned char                                      UnknownData10[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	class UParticleSystemComponent*                    ParticleSystem;                                           // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AkSound;                                                  // 0x0480(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x10];                                      // 0x0488(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParticle");
		return ptr;
	}


	void SetParticleParameter(const struct FName& Name, const struct FVector& Value, bool bEnableRTPC);
	void OnParticleFinish(class UParticleSystemComponent* PSystem);
	void OnParticleCollide(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const struct FName& BoneName, class UPhysicalMaterial* PhysMat);
	void OnParameterUpdated();
	void GetWaterVolumeHeight(bool* OutbIsInWater, float* OutWaterHeight);
	TEnumAsByte<EPhysicalSurface> GetPhysicalSurfaceFromRay(const struct FVector& StartActorOffset, const struct FVector& TraceRay);
	struct FVector GetParticleVectorParamter(const struct FName& Name, const struct FVector& DefaultValue);
	float GetParticleParamterByName(const struct FName& Name, float DefaultValue);
	float GetParticleParamter(const struct FString& Name, float DefaultValue);
	float GetEmitterGlobalSpawnRateScale();
	void ForceSpawn(int emitterIndex, const struct FVector& InLocation);
	void AttachToParent();
};


// Class TslGame.TslParticleBulletTrail
// 0x0020 (0x04B8 - 0x0498)
class ATslParticleBulletTrail : public ATslParticle
{
public:
	struct FVector                                     TargetDestanation;                                        // 0x0498(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	float                                              BulletSpeed;                                              // 0x04A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          UnderWaterMaterialOverride;                               // 0x04A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParticleBulletTrail");
		return ptr;
	}

};


// Class TslGame.TslParticleEnvironment
// 0x0020 (0x04B8 - 0x0498)
class ATslParticleEnvironment : public ATslParticle
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0498(0x0010) MISSED OFFSET
	float                                              AutoParticleActivateDistance;                             // 0x04A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AutoPlayDistance;                                         // 0x04AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParticleEnvironment");
		return ptr;
	}

};


// Class TslGame.TslRainDynamic
// 0x00E8 (0x0580 - 0x0498)
class ATslRainDynamic : public ATslParticle
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0498(0x0004) MISSED OFFSET
	float                                              SplashSpawnDistance;                                      // 0x049C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              SplashSpawnRate;                                          // 0x04A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              RainScale;                                                // 0x04A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       SplashEmitterName;                                        // 0x04A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseFanShape : 1;                                         // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04B1(0x0003) MISSED OFFSET
	float                                              ViewAngleInDegree;                                        // 0x04B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              BackwardOffset;                                           // 0x04B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      bAutoSpawnRange : 1;                                      // 0x04BC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04BD(0x0003) MISSED OFFSET
	float                                              CameraPitch;                                              // 0x04C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              AdjustedSplashSpawnDistance;                              // 0x04C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              AdjustedSplashAngle;                                      // 0x04C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bAsyncLineTrace : 1;                                      // 0x04CC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      bDebugAsyncTraceHandles : 1;                              // 0x04CD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04CE(0x0002) MISSED OFFSET
	int                                                AsyncLineTraceHandles;                                    // 0x04D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bAutoLimitSpashSpawnRate : 1;                             // 0x04D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	float                                              TargetFPS;                                                // 0x04D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              MinAutoLimiter;                                           // 0x04DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              AutoLimiterStepPerFrame;                                  // 0x04E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              AutoLimiter;                                              // 0x04E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              CameraAltituteToRemoveSplash;                             // 0x04E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              CameraDistanceToTerrainToRemoveSplash;                    // 0x04EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x90];                                      // 0x04F0(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslRainDynamic");
		return ptr;
	}

};


// Class TslGame.TslWeatherParticle
// 0x00F8 (0x0590 - 0x0498)
class ATslWeatherParticle : public ATslParticle
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0498(0x0004) MISSED OFFSET
	unsigned char                                      bMakeSplash : 1;                                          // 0x049C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate)
	unsigned char                                      UnknownData01[0x3];                                       // 0x049D(0x0003) MISSED OFFSET
	float                                              SplashSpawnDistance;                                      // 0x04A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              SplashSpawnRate;                                          // 0x04A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              ParticleSpawnScale;                                       // 0x04A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04AC(0x0004) MISSED OFFSET
	struct FName                                       SplashEmitterName;                                        // 0x04B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseFanShape : 1;                                         // 0x04B8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04B9(0x0003) MISSED OFFSET
	float                                              ViewAngleInDegree;                                        // 0x04BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              BackwardOffset;                                           // 0x04C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      bAutoSpawnRange : 1;                                      // 0x04C4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET
	float                                              CameraPitch;                                              // 0x04C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              AdjustedSplashSpawnDistance;                              // 0x04CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              AdjustedSplashAngle;                                      // 0x04D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bAsyncLineTrace : 1;                                      // 0x04D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      bDebugAsyncTraceHandles : 1;                              // 0x04D5(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x04D6(0x0002) MISSED OFFSET
	int                                                AsyncLineTraceHandles;                                    // 0x04D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bAutoLimitSpashSpawnRate : 1;                             // 0x04DC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	float                                              TargetFPS;                                                // 0x04E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              MinAutoLimiter;                                           // 0x04E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              AutoLimiterStepPerFrame;                                  // 0x04E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              AutoLimiter;                                              // 0x04EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              CameraAltituteToRemoveSplash;                             // 0x04F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              CameraDistanceToTerrainToRemoveSplash;                    // 0x04F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x98];                                      // 0x04F8(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeatherParticle");
		return ptr;
	}

};


// Class TslGame.TslParticleEmitter
// 0x0010 (0x03F8 - 0x03E8)
class ATslParticleEmitter : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParticleEmitter");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslParticleManager
// 0x0128 (0x0510 - 0x03E8)
class ATslParticleManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x03E8(0x0060) MISSED OFFSET
	unsigned char                                      bUseActorPool : 1;                                        // 0x0448(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0449(0x0007) MISSED OFFSET
	TMap<struct FString, struct FTslActorPool>         ObjectPoolMap;                                            // 0x0450(0x0050) (CPF_ZeroConstructor)
	TArray<struct FTslParticleGroupInfo>               GroupList;                                                // 0x04A0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData02[0x60];                                      // 0x04B0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParticleManager");
		return ptr;
	}

};


// Class TslGame.TslParticleModuleEventSendToGame
// 0x0050 (0x0078 - 0x0028)
class UTslParticleModuleEventSendToGame : public UParticleModuleEventSendToGame
{
public:
	TMap<struct FString, class UAkAudioEvent*>         AkEventSurfaceMap;                                        // 0x0028(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParticleModuleEventSendToGame");
		return ptr;
	}


	void RunEvent(const struct FVector& InCollideDirection, const struct FVector& InHitLocation, const struct FVector& InHitNormal, const struct FName& InBoneName, class UWorld* InWorld, class AActor* InActor);
	int PostAkEventAtLocation(class UObject* InObject, const struct FVector& InLocation, const struct FRotator& InRotation, class UAkAudioEvent* in_pAkEvent);
};


// Class TslGame.TslPassArea
// 0x0010 (0x03F8 - 0x03E8)
class ATslPassArea : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              Radius;                                                   // 0x03F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPassArea");
		return ptr;
	}

};


// Class TslGame.TslPassBluezoneArea
// 0x0000 (0x03F8 - 0x03F8)
class ATslPassBluezoneArea : public ATslPassArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPassBluezoneArea");
		return ptr;
	}

};


// Class TslGame.TslPassCarePackageArea
// 0x0000 (0x03F8 - 0x03F8)
class ATslPassCarePackageArea : public ATslPassArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPassCarePackageArea");
		return ptr;
	}

};


// Class TslGame.TslPassAreaRectangle
// 0x0010 (0x03F8 - 0x03E8)
class ATslPassAreaRectangle : public AActor
{
public:
	class UBoxComponent*                               BoxComponent;                                             // 0x03E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              Width;                                                    // 0x03F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              Height;                                                   // 0x03F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPassAreaRectangle");
		return ptr;
	}

};


// Class TslGame.TslPassBlueZoneAreaRectangle
// 0x0000 (0x03F8 - 0x03F8)
class ATslPassBlueZoneAreaRectangle : public ATslPassAreaRectangle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPassBlueZoneAreaRectangle");
		return ptr;
	}

};


// Class TslGame.TslPassCarePackageAreaRectangle
// 0x0000 (0x03F8 - 0x03F8)
class ATslPassCarePackageAreaRectangle : public ATslPassAreaRectangle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPassCarePackageAreaRectangle");
		return ptr;
	}

};


// Class TslGame.TslPawnInputBindingComponent
// 0x0030 (0x0210 - 0x01E0)
class UTslPawnInputBindingComponent : public UActorComponent
{
public:
	struct FTimerHandle                                MoveVehicleSeatTimer_Gamepad;                             // 0x01E0(0x0008)
	struct FScriptMulticastDelegate                    OnOwnerPossessed;                                         // 0x01E8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnOwnerUnPossessed;                                       // 0x01F8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	float                                              PingCoolTimeSeconds;                                      // 0x0208(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPawnInputBindingComponent");
		return ptr;
	}


	bool OnUseHealItemPad();
	bool OnSprintReleasedPad();
	bool OnSprintPressedPad();
	bool OnSetPingAtViewingTargetPad();
	bool OnSelectNextHealItemPad();
	bool OnMoveVehicleSeatPad();
	bool OnMoveToSubSeatPad();
	bool OnMoveToDriverSeatPad();
	bool OnInteractInVehiclePad();
	void NotifyOwnerUnPossessed(class ATslPlayerController* InController);
	void NotifyOwnerPossessed(class ATslPlayerController* InController);
	void MoveVehicleNextSubSeat_Gamepad();
	void MoveVehicleNextSeat_Gamepad();
	void MoveVehicleDriverSeat_Gamepad();
};


// Class TslGame.TslPhysicsVolume
// 0x0090 (0x04C8 - 0x0438)
class ATslPhysicsVolume : public APhysicsVolume
{
public:
	class AOceanManager*                               OceanManager;                                             // 0x0438(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	class UClass*                                      DefaultWaterSplash;                                       // 0x0440(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      VehicleWaterSplash;                                       // 0x0448(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UClass*>                              WaterSplashMuteTypes;                                     // 0x0450(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0460(0x0010) MISSED OFFSET
	TMap<class UClass*, class UClass*>                 WaterSplashOverrideMap;                                   // 0x0470(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	float                                              VolumeSizeRatioThrethold;                                 // 0x04C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSkipToUseBoundOberlap : 1;                               // 0x04C4(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPhysicsVolume");
		return ptr;
	}

};


// Class TslGame.TslPlayerCameraManager
// 0x0020 (0x1C60 - 0x1C40)
class ATslPlayerCameraManager : public APlayerCameraManager
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x1C40(0x0018) MISSED OFFSET
	class UScopeGlintManager*                          ScopeGlintManager;                                        // 0x1C58(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPlayerCameraManager");
		return ptr;
	}

};


// Class TslGame.TslPlayerDamageConfig
// 0x0080 (0x00B0 - 0x0030)
class UTslPlayerDamageConfig : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslPlayerDamageConfig.DamageZones
	unsigned char                                      UnknownData01[0x30];                                      // 0x0080(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPlayerDamageConfig");
		return ptr;
	}

};


// Class TslGame.TslPlayerState
// 0x0490 (0x0910 - 0x0480)
class ATslPlayerState : public APlayerState
{
public:
	int                                                TeamNumber;                                               // 0x0480(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x1];                                       // 0x0484(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslPlayerState.ObserverAuthorityType
	unsigned char                                      UnknownData02[0x3];                                       // 0x0489(0x0003) MISSED OFFSET
	struct FTslPlayerStatistics                        PlayerStatistics;                                         // 0x048C(0x0004) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0490(0x0004) MISSED OFFSET
	float                                              PiningTimeSeconds;                                        // 0x0494(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FTslPlayerStatisticsNotReplicated           PlayerStatisticsNotReplicated;                            // 0x0498(0x0118) (CPF_Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x05B0(0x0008) MISSED OFFSET
	struct FString                                     ClanName;                                                 // 0x05B8(0x0010) (CPF_Net, CPF_ZeroConstructor)
	struct FString                                     ReportToken;                                              // 0x05C8(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	struct FVector2D                                   PingPosition;                                             // 0x05D8(0x0008) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x05E0(0x0010) MISSED OFFSET
	unsigned char                                      bEmptyReplicatedCastableItems : 1;                        // 0x05F0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x05F1(0x0007) MISSED OFFSET
	TArray<struct FReplicatedThrowableItem>            ReplicatedThrowableItems;                                 // 0x05F8(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bEmptyReplicatedThrowableItems : 1;                       // 0x0608(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0609(0x0003) MISSED OFFSET
	struct FTslPlayerStatisticsForOwner                PlayerStatisticsForOwner;                                 // 0x060C(0x0010) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData08[0x4];                                       // 0x061C(0x0004) MISSED OFFSET
	struct FString                                     AccountId;                                                // 0x0620(0x0010) (CPF_Net, CPF_ZeroConstructor)
	struct FVector2D                                   MapMarkerPosition;                                        // 0x0630(0x0008) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	int                                                Ranking;                                                  // 0x0638(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                PersonalRanking;                                          // 0x063C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDoMakeLastSurvivor : 1;                                  // 0x0640(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x17F];                                     // 0x0641(0x017F) MISSED OFFSET
	TArray<struct FReplicatedEquipableItem>            ReplicatedEquipableItems;                                 // 0x07C0(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData10[0x8];                                       // 0x07D0(0x0008) MISSED OFFSET
	TArray<struct FReplicatedCastableItem>             ReplicatedCastableItems;                                  // 0x07D8(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	float                                              DamageDealtOnEnemy;                                       // 0x07E8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x07EC(0x0004) MISSED OFFSET
	unsigned char                                      bQuitter : 1;                                             // 0x07F0(0x0001) (CPF_Net)
	unsigned char                                      UnknownData12[0x7];                                       // 0x07F1(0x0007) MISSED OFFSET
	struct FEmoteBitArray                              EmoteBitArray;                                            // 0x07F8(0x0020) (CPF_Net)
	unsigned char                                      bShowMapMarker : 1;                                       // 0x0818(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0819(0x0003) MISSED OFFSET
	int                                                SquadIndex;                                               // 0x081C(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                SquadMemberIndex;                                         // 0x0820(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bKilled : 1;                                              // 0x0824(0x0001) (CPF_Net)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0825(0x0003) MISSED OFFSET
	int                                                KillerPlayerTeamNum;                                      // 0x0828(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x1];                                       // 0x082C(0x0001) MISSED OFFSET
	unsigned char                                      bIsInAircraft : 1;                                        // 0x082D(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x082E(0x0002) MISSED OFFSET
	int                                                UnknownNumber;                                            // 0x0830(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LastHitTime;                                              // 0x0834(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     CurrentAttackerPlayerNetId;                               // 0x0838(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      UnknownData17[0x8];                                       // 0x0848(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUniqueIdReplicated;                                     // 0x0850(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData18[0xC];                                       // 0x0860(0x000C) MISSED OFFSET
	struct FTslPlayTime                                PlayTime;                                                 // 0x086C(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_Transient)
	float                                              AASBpFactor;                                              // 0x087C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x0880(0x0004) MISSED OFFSET
	struct FTslPlayerBpReward                          BpReward;                                                 // 0x0884(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_Transient)
	struct FTslPlayerXpReward                          XpReward;                                                 // 0x0894(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_Transient)
	struct FTslPlayerRewardBoost                       RewardBoost;                                              // 0x089C(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_Transient)
	struct FTslPlayerRewardContext                     RewardContext;                                            // 0x08A4(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_Transient)
	class UStatTrakManagerComponent*                   StatTrakManagerComponent;                                 // 0x08B0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	uint32_t                                           SpawnKitIndex;                                            // 0x08B8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x54];                                      // 0x08BC(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPlayerState");
		return ptr;
	}


	void UpdateMissionProgress(const struct FWuMissionProgressUpdateData& MissionProgress);
	void SPing(TArray<unsigned char> Data);
	void SetPlayerClanName(const struct FString& InClanName);
	void SetPingPosition(const struct FVector2D& InPingPosition);
	void SetEmoteBitArray(const struct FEmoteBitArray& InBitArray);
	void SetClientUnknownNumber(int NewUnknownNumber);
	void ServerTournamentData(TArray<uint32_t> Data);
	void OnRep_ReportToken(const struct FString& OldReportToken);
	void OnRep_Ranking(int OldRanking);
	void OnRep_PlayerStatisticsForOwner();
	void OnRep_PlayerStatistics(const struct FTslPlayerStatistics& OldPlayerStatistics);
	void OnRep_LastHitTime();
	void OnRep_bQuitter();
	bool IsQuitter();
	bool IsObserver();
	bool IsMaxLevel();
	bool IsInAircraft();
	void IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackage);
	void InformAboutKill(class AActor* DamageCauser, class UDamageType* DamageType, float Distance);
	float GetXpRewardByTeamSpectatingTime();
	float GetXpRewardBySurvivalTime();
	float GetXpBoostingAmount();
	float GetXpBoost();
	int GetUnknownNumber();
	float GetTotalXpRewardRaw();
	float GetTotalXpRewardBoostedAndCapped();
	float GetTotalXpRewardBoosted();
	float GetTotalBpRewardRaw();
	float GetTotalBpRewardBoosted();
	float GetTeamSpectatingTimeInSeconds();
	int GetTeamNum();
	float GetSurvivalTimeInSeconds();
	int GetSquadMemberIndex();
	int GetSquadIndex();
	struct FString GetShortPlayerName();
	struct FString GetPlayerClanName();
	float GetPiningTimeSeconds();
	struct FVector2D GetPingPosition();
	float GetPing();
	class ATslPlayerController* GetOwningTslPlayerController();
	void GetObserverAuthorityType();
	struct FVector2D GetMapMarkerPosition();
	int GetKills();
	struct FEmoteBitArray GetEmoteBitArray();
	struct FString GetDisplayName(bool bShortPlayerName, bool bHideName);
	float GetDailyXpMax();
	float GetCurrentDailyXp();
	float GetBpRewardByRanking();
	float GetBpRewardByPlayTime();
	float GetBpRewardByKills();
	float GetBpRewardByDamageDealt();
	float GetBpBoostingAmount();
	float GetBpBoost();
	void CPing(TArray<unsigned char> Data);
	void ClientUpdateRankingOnlineEvent(int InRanking);
	void ClientTournamentData(TArray<uint32_t> Data);
	void ClientSetReconnectAddId();
	void ClientInformFirstKill();
	void ClientInformAssist();
	void BroadcastMidGameBan(class ATslPlayerState* BannedPlayerState, const struct FString& BanCode, const struct FString& BanType);
	void BroadcastDeath(class ATslPlayerState* KillerPlayerState, class ATslPlayerState* GroggyPlayerInstigator, class UDamageType* KillerDamageType, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, int AlivePlayerNum, int AliveTeamNum, bool InbIsStealKilled);
};


// Class TslGame.TslBattleRoyalePlayerState
// 0x0000 (0x0910 - 0x0910)
class ATslBattleRoyalePlayerState : public ATslPlayerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBattleRoyalePlayerState");
		return ptr;
	}


	void UpdateMissionProgress(const struct FWuMissionProgressUpdateData& MissionProgress);
	void SPing(TArray<unsigned char> Data);
	void SetPlayerClanName(const struct FString& InClanName);
	void SetPingPosition(const struct FVector2D& InPingPosition);
	void SetEmoteBitArray(const struct FEmoteBitArray& InBitArray);
	void SetClientUnknownNumber(int NewUnknownNumber);
	void ServerTournamentData(TArray<uint32_t> Data);
	void OnRep_ReportToken(const struct FString& OldReportToken);
	void OnRep_Ranking(int OldRanking);
	void OnRep_PlayerStatisticsForOwner();
	void OnRep_PlayerStatistics(const struct FTslPlayerStatistics& OldPlayerStatistics);
	void OnRep_LastHitTime();
	void OnRep_bQuitter();
	bool IsQuitter();
	bool IsObserver();
	bool IsMaxLevel();
	bool IsInAircraft();
	void IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackage);
	void InformAboutKill(class AActor* DamageCauser, class UDamageType* DamageType, float Distance);
	float GetXpRewardByTeamSpectatingTime();
	float GetXpRewardBySurvivalTime();
	float GetXpBoostingAmount();
	float GetXpBoost();
	int GetUnknownNumber();
	float GetTotalXpRewardRaw();
	float GetTotalXpRewardBoostedAndCapped();
	float GetTotalXpRewardBoosted();
	float GetTotalBpRewardRaw();
	float GetTotalBpRewardBoosted();
	float GetTeamSpectatingTimeInSeconds();
	int GetTeamNum();
	float GetSurvivalTimeInSeconds();
	int GetSquadMemberIndex();
	int GetSquadIndex();
	struct FString GetShortPlayerName();
	struct FString GetPlayerClanName();
	float GetPiningTimeSeconds();
	struct FVector2D GetPingPosition();
	float GetPing();
	class ATslPlayerController* GetOwningTslPlayerController();
	void GetObserverAuthorityType();
	struct FVector2D GetMapMarkerPosition();
	int GetKills();
	struct FEmoteBitArray GetEmoteBitArray();
	struct FString GetDisplayName(bool bShortPlayerName, bool bHideName);
	float GetDailyXpMax();
	float GetCurrentDailyXp();
	float GetBpRewardByRanking();
	float GetBpRewardByPlayTime();
	float GetBpRewardByKills();
	float GetBpRewardByDamageDealt();
	float GetBpBoostingAmount();
	float GetBpBoost();
	void CPing(TArray<unsigned char> Data);
	void ClientUpdateRankingOnlineEvent(int InRanking);
	void ClientTournamentData(TArray<uint32_t> Data);
	void ClientSetReconnectAddId();
	void ClientInformFirstKill();
	void ClientInformAssist();
	void BroadcastMidGameBan(class ATslPlayerState* BannedPlayerState, const struct FString& BanCode, const struct FString& BanType);
	void BroadcastDeath(class ATslPlayerState* KillerPlayerState, class ATslPlayerState* GroggyPlayerInstigator, class UDamageType* KillerDamageType, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, int AlivePlayerNum, int AliveTeamNum, bool InbIsStealKilled);
};


// Class TslGame.TslTrainingPlayerState
// 0x0000 (0x0910 - 0x0910)
class ATslTrainingPlayerState : public ATslPlayerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTrainingPlayerState");
		return ptr;
	}


	void UpdateMissionProgress(const struct FWuMissionProgressUpdateData& MissionProgress);
	void SPing(TArray<unsigned char> Data);
	void SetPlayerClanName(const struct FString& InClanName);
	void SetPingPosition(const struct FVector2D& InPingPosition);
	void SetEmoteBitArray(const struct FEmoteBitArray& InBitArray);
	void SetClientUnknownNumber(int NewUnknownNumber);
	void ServerTournamentData(TArray<uint32_t> Data);
	void OnRep_ReportToken(const struct FString& OldReportToken);
	void OnRep_Ranking(int OldRanking);
	void OnRep_PlayerStatisticsForOwner();
	void OnRep_PlayerStatistics(const struct FTslPlayerStatistics& OldPlayerStatistics);
	void OnRep_LastHitTime();
	void OnRep_bQuitter();
	bool IsQuitter();
	bool IsObserver();
	bool IsMaxLevel();
	bool IsInAircraft();
	void IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackage);
	void InformAboutKill(class AActor* DamageCauser, class UDamageType* DamageType, float Distance);
	float GetXpRewardByTeamSpectatingTime();
	float GetXpRewardBySurvivalTime();
	float GetXpBoostingAmount();
	float GetXpBoost();
	int GetUnknownNumber();
	float GetTotalXpRewardRaw();
	float GetTotalXpRewardBoostedAndCapped();
	float GetTotalXpRewardBoosted();
	float GetTotalBpRewardRaw();
	float GetTotalBpRewardBoosted();
	float GetTeamSpectatingTimeInSeconds();
	int GetTeamNum();
	float GetSurvivalTimeInSeconds();
	int GetSquadMemberIndex();
	int GetSquadIndex();
	struct FString GetShortPlayerName();
	struct FString GetPlayerClanName();
	float GetPiningTimeSeconds();
	struct FVector2D GetPingPosition();
	float GetPing();
	class ATslPlayerController* GetOwningTslPlayerController();
	void GetObserverAuthorityType();
	struct FVector2D GetMapMarkerPosition();
	int GetKills();
	struct FEmoteBitArray GetEmoteBitArray();
	struct FString GetDisplayName(bool bShortPlayerName, bool bHideName);
	float GetDailyXpMax();
	float GetCurrentDailyXp();
	float GetBpRewardByRanking();
	float GetBpRewardByPlayTime();
	float GetBpRewardByKills();
	float GetBpRewardByDamageDealt();
	float GetBpBoostingAmount();
	float GetBpBoost();
	void CPing(TArray<unsigned char> Data);
	void ClientUpdateRankingOnlineEvent(int InRanking);
	void ClientTournamentData(TArray<uint32_t> Data);
	void ClientSetReconnectAddId();
	void ClientInformFirstKill();
	void ClientInformAssist();
	void BroadcastMidGameBan(class ATslPlayerState* BannedPlayerState, const struct FString& BanCode, const struct FString& BanType);
	void BroadcastDeath(class ATslPlayerState* KillerPlayerState, class ATslPlayerState* GroggyPlayerInstigator, class UDamageType* KillerDamageType, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, int AlivePlayerNum, int AliveTeamNum, bool InbIsStealKilled);
};


// Class TslGame.TslWarPlayerState
// 0x0018 (0x0928 - 0x0910)
class ATslWarPlayerState : public ATslPlayerState
{
public:
	float                                              MyGameScoreInTeam;                                        // 0x0910(0x0004) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0914(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMyGainedScoreChanged;                                   // 0x0918(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWarPlayerState");
		return ptr;
	}


	void OnRep_MyGameScoreInTeam(float OldMyGameScoreInTeam);
};


// Class TslGame.TslConquestPlayerState
// 0x0000 (0x0928 - 0x0928)
class ATslConquestPlayerState : public ATslWarPlayerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConquestPlayerState");
		return ptr;
	}


	void OnRep_MyGameScoreInTeam(float OldMyGameScoreInTeam);
};


// Class TslGame.TslZombiePlayerState
// 0x0008 (0x0918 - 0x0910)
class ATslZombiePlayerState : public ATslPlayerState
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0910(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslZombiePlayerState.ZombieModePlayerState

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslZombiePlayerState");
		return ptr;
	}


	void SetZombieModePlayerState();
	bool IsZombie();
	void GetZombieModePlayerState();
};


// Class TslGame.TslPrivateSettings
// 0x0110 (0x0138 - 0x0028)
class UTslPrivateSettings : public UObject
{
public:
	TArray<struct FHudUiConfig>                        HudMainConfigs;                                           // 0x0028(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FHudUiConfig>                        MainLobbyHUDConfigs;                                      // 0x0038(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	float                                              ViewModeZoomMultiplier;                                   // 0x0048(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CharacterDragDeadzone;                                    // 0x004C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FVector2D                                   ViewModeRotationDeadzone;                                 // 0x0050(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Config, CPF_IsPlainOldData)
	struct FVector2D                                   ViewModeRotationMultiplier;                               // 0x0058(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Config, CPF_IsPlainOldData)
	TMap<struct FName, struct FTslLobbySceneTravelData> LobbySceneTravelData;                                     // 0x0060(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslLobbySceneData>                  LobbySceneDatas;                                          // 0x00B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslLobbyViewModeSceneData>          LobbyViewModeSceneDatas;                                  // 0x00C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	float                                              WeaponDefaultRatio;                                       // 0x00D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ViewModeScaleMinMultiplier;                               // 0x00D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ViewModeScaleMaxMultiplier;                               // 0x00D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	TArray<struct FTslGameOptionTabDesc>               GameOptionTabs;                                           // 0x00E0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGameOptionCategoryDesc>          GameOptionCategories;                                     // 0x00F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGameOptionItemDesc>              GameOptionItems;                                          // 0x0100(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)
	struct FTslGameOptionHierarchy                     GameOptionHierarchy;                                      // 0x0110(0x0010) (CPF_Transient)
	unsigned char                                      bIsGameOptionHierarchyCreated : 1;                        // 0x0120(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0121(0x0007) MISSED OFFSET
	TArray<struct FScreenResolution>                   TestScreenResolutions;                                    // 0x0128(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPrivateSettings");
		return ptr;
	}

};


// Class TslGame.TslWeapon
// 0x03B8 (0x07A0 - 0x03E8)
class ATslWeapon : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E8(0x0020) MISSED OFFSET
	class UAkAudioEvent*                               EquipSoundAk;                                             // 0x0408(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0410(0x0008) MISSED OFFSET
	int8_t                                             EquippedWeaponIndex;                                      // 0x0418(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0419(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               UnequipSoundAk;                                           // 0x0420(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               OutOfAmmoSoundAk;                                         // 0x0428(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ShellFxAttachPoint;                                       // 0x0430(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0438(0x0008) MISSED OFFSET
	ENCRYPTED class USceneComponent*                   RootScene;                                                // 0x0440(0x0008) (CPF_Edit, CPF_ExportObject, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0448(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWeapon.AttachmentRecoilPatternScaleCalculateType
	unsigned char                                      UnknownData05[0x7];                                       // 0x0449(0x0007) MISSED OFFSET
	class UStaticMeshComponent*                        WeaponMasteryMeshRef;                                     // 0x0450(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class USkeletalMeshComponent*                      WeaponMasteryCharmRef;                                    // 0x0458(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x18];                                      // 0x0460(0x0018) MISSED OFFSET
	struct FWeaponBasicAnim                            WeaponAnim;                                               // 0x0478(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x18];                                      // 0x0490(0x0018) MISSED OFFSET
	class UAkAudioEvent*                               ReloadSoundAk;                                            // 0x04A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FWeaponData                                 WeaponConfig;                                             // 0x04B0(0x0108) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<struct FWeaponAttachmentAssetData>          DefaultAttachedItemAssets;                                // 0x05B8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UAkComponent*                                AkComponent;                                              // 0x05C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkAudioEvent*                               FireFinishSoundAk;                                        // 0x05D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                PrimaryClipIconOffset;                                    // 0x05D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x05DC(0x000C) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUpdatedSkinData;                                        // 0x05E8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdatedMasteryItem;                                     // 0x05F8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	class UForceFeedbackEffect*                        FireForceFeedback;                                        // 0x0608(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               FireLoopSoundAk;                                          // 0x0610(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	ENCRYPTED class UWeaponMeshComponent*              Mesh3P;                                                   // 0x0618(0x0008) (CPF_Edit, CPF_ExportObject, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference)
	struct FName                                       FiringAttachPoint;                                        // 0x0620(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FWeaponAttachmentPositionData>       AttachmentPositionData;                                   // 0x0628(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UParticleSystemComponent*                    MuzzlePSC;                                                // 0x0638(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              WeaponIconRatio;                                          // 0x0640(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0xC];                                       // 0x0644(0x000C) MISSED OFFSET
	class UAkAudioEvent*                               AimingStartSoundAk;                                       // 0x0650(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnUpdatedAttachment;                                      // 0x0658(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData10[0x10];                                      // 0x0668(0x0010) MISSED OFFSET
	struct FWeaponRollAnim                             ProneRollAnim;                                            // 0x0678(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UseCustomCrosshair : 1;                                   // 0x0688(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0689(0x0007) MISSED OFFSET
	class UTexture*                                    WeaponIcon;                                               // 0x0690(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             MuzzleFx;                                                 // 0x0698(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               ScopingFinishSoundAk;                                     // 0x06A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bHideCrosshairWhileNotAiming : 1;                         // 0x06A8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0xB];                                       // 0x06A9(0x000B) MISSED OFFSET
	float                                              HipDuration;                                              // 0x06B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               FireSoundAk;                                              // 0x06B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               AimingFinishSoundAk;                                      // 0x06C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystemComponent*                    MuzzlePSCSecondary;                                       // 0x06C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UClass*>                              AttachedItemClasses;                                      // 0x06D0(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	class UClass*                                      ShellFxClass;                                             // 0x06E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x8];                                       // 0x06E8(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData14[0x1];                                       // 0x06E8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWeapon.WeaponHand
	unsigned char                                      UnknownData15[0x7];                                       // 0x06F1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData16[0x10];                                      // 0x06F1(0x0010) UNKNOWN PROPERTY: ArrayProperty TslGame.TslWeapon.CompatibleDualWeapons
	unsigned char                                      UnknownData17[0x8];                                       // 0x0708(0x0008) MISSED OFFSET
	struct FName                                       WeaponTag;                                                // 0x0710(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       MuzzleAttachPoint;                                        // 0x0718(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      FireCameraShake;                                          // 0x0720(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UseLaserDot : 1;                                          // 0x0728(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData18[0x1];                                       // 0x0729(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWeapon.AnimWeaponType
	unsigned char                                      UnknownData19[0x2];                                       // 0x072A(0x0002) MISSED OFFSET
	int                                                SecondaryClipIconOffset;                                  // 0x072C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                LogWeaponFirePerFireCount;                                // 0x0730(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x1];                                       // 0x0734(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWeapon.AttachmentAniRateCalculateType
	unsigned char                                      UnknownData21[0x7];                                       // 0x0735(0x0007) MISSED OFFSET
	unsigned char                                      bLoopedMuzzleFX : 1;                                      // 0x073C(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bLoopedFireSound : 1;                                     // 0x073C(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData22[0x3];                                       // 0x073D(0x0003) MISSED OFFSET
	class UAkAudioEvent*                               ScopingStartSoundAk;                                      // 0x0740(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UseCustomAimingCrosshair : 1;                             // 0x0748(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0749(0x0003) MISSED OFFSET
	float                                              AmmoIconsCount;                                           // 0x074C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData24[0x8];                                       // 0x0750(0x0008) MISSED OFFSET
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x0758(0x0020) (CPF_Net, CPF_Transient)
	struct FReplicatedMasteryItem                      ReplicatedMasteryItem;                                    // 0x0778(0x0004) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData25[0x4];                                       // 0x077C(0x0004) MISSED OFFSET
	struct FName                                       WeaponMeshName;                                           // 0x0780(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData26[0x18];                                      // 0x0788(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon");
		return ptr;
	}


	void Weapon_AttachShoulder();
	void Weapon_AttachHand();
	void UpdateAttachmentAssets(bool bSameAssetReload);
	void SimulatePhysicalBodyHit(const struct FHitResult& Impact, const struct FVector& ShotDirection);
	void SetWeaponMeshHidden(bool Hidden, bool bCastShadow, bool bCastHiddenShadow);
	void SetWeaponMasteryMesh(class UStaticMeshComponent* InMeshComp);
	void SetWeaponMasteryCharm(class USkeletalMeshComponent* InSKComp);
	void ServerLogFireWeapon(const struct FAttackId& AttackId);
	void OnRep_ReplicatedSkinParam();
	void OnRep_ReplicatedMasteryItem();
	void OnRep_AttachedItemClasses(TArray<class UClass*> OldVal);
	void OnLoadedAttachmentAssetDatas(TArray<struct FWeaponAttachmentAssetData> LoadedAttachmentAssetDatas);
	void OnAttachmentChanged();
	void OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	bool IsWeaponAttachedToShoulder();
	bool IsCustomSightAttached();
	float GetWeaponReadyDuration();
	class UWeaponMeshComponent* GetWeaponMesh();
	class UStaticMeshComponent* GetWeaponMasteryVariant();
	struct FName GetWeaponMasteryCharmSocketName();
	struct FName GetWeaponMasteryCharmAttachSocketName();
	class USkeletalMeshComponent* GetWeaponMasteryCharm();
	class UEquipableItem* GetWeaponItem();
	float GetWeaponIconRatio();
	void GetWeaponGripTypeLeft();
	float GetWeaponEquipDuration();
	float GetWeaponDamage();
	struct FWeaponData GetWeaponConfig();
	void GetWeaponClassEnum();
	struct FName GetWeaponAttachmentPoint(const struct FName& Tag);
	struct FWeaponAttachmentData GetWeaponAttachmentData();
	TArray<struct FWeaponAttachmentAssetData> GetWeaponAttachmentAssetDatas();
	struct FWeaponAttachmentAssetData GetWeaponAttachmentAsset();
	void GetWeaponAnimClassEnum();
	float GetWeaponAnimationKick();
	void GetThrownType();
	struct FVector GetSwayModifier();
	float GetStanceSwayModifier();
	class UAnimMontage* GetRecoilMontage();
	class ATslCharacter* GetPawnOwner();
	float GetMovementModifierSprinting();
	float GetMovementModifierRunning();
	float GetMovementModifierJumpVelocity();
	struct FVector GetLowerRailOffset();
	struct FText GetItemName();
	bool GetDoGripPose();
	void GetAttachedStaticComponentMap();
	void GetAnimWeaponType();
	TArray<struct FWeaponAttachmentData> GetAllWeaponAttachmentData();
	TArray<struct FWeaponAttachmentAssetData> GetAllWeaponAttachmentAssets();
	void ClearMasteryItems();
	void AttachWeaponToSlot(int SlotIndex);
	void AttachWeaponToMesh();
};


// Class TslGame.TslWeapon_Gun
// 0x04E0 (0x0C80 - 0x07A0)
class ATslWeapon_Gun : public ATslWeapon
{
public:
	unsigned char                                      bSpawnBulletFromBarrel : 1;                               // 0x07A0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x07A1(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               VariableZoomStepAk;                                       // 0x07A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               ZeroingStepAk;                                            // 0x07B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAlwaysUseIronSightZeroing : 1;                           // 0x07B8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EWeaponState>                          CurrentState;                                             // 0x07B9(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x07BA(0x0002) MISSED OFFSET
	int                                                AmmoPerClip;                                              // 0x07BC(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurrentAmmoData;                                          // 0x07C0(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurrentZeroLevel;                                         // 0x07C4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsHipped : 1;                                            // 0x07C8(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x07C9(0x0007) MISSED OFFSET
	class UWeaponGunDataAsset*                         WeaponGunData;                                            // 0x07D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_NoClear, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x07D8(0x0038) MISSED OFFSET
	int                                                FiringModeIndex;                                          // 0x0810(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bSetDefaultFiringMode : 1;                                // 0x0814(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1B];                                      // 0x0815(0x001B) MISSED OFFSET
	float                                              DeviationAimRaiseScalar;                                  // 0x0830(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationAimFallScalar;                                   // 0x0834(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationADSRaiseScalar;                                  // 0x0838(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationADSFallScalar;                                   // 0x083C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationCrouchRaiseScalar;                               // 0x0840(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationCrouchFallScalar;                                // 0x0844(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationProneRaiseScalar;                                // 0x0848(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationProneFallScalar;                                 // 0x084C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationJumpRaiseScalar;                                 // 0x0850(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationJumpFallScalar;                                  // 0x0854(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationMoveInterpSpeed;                                 // 0x0858(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DeviationFallingMoveInterpSpeed;                          // 0x085C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x68];                                      // 0x0860(0x0068) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_SimulatedWeaponMontages;                      // 0x08C8(0x0008) (CPF_Transient)
	unsigned char                                      UnknownData06[0x38];                                      // 0x08D0(0x0038) MISSED OFFSET
	struct FWeaponGunData                              WeaponGunConfig;                                          // 0x0908(0x0008) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FWeaponPPSettings                           WeaponGunPostprocessSettings;                             // 0x0910(0x00A0) (CPF_Edit, CPF_DisableEditOnInstance)
	class UReticlePostprocessData*                     ReticlePostprocessData;                                   // 0x09B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ScopingAttachPoint;                                       // 0x09B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ScopingFocusPoint;                                        // 0x09C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x238];                                     // 0x09C8(0x0238) MISSED OFFSET
	unsigned char                                      bLoackLoadedAmmo : 1;                                     // 0x0C00(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0C01(0x0003) MISSED OFFSET
	float                                              ClearDesiredDoFireActionDuration;                         // 0x0C04(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x78];                                      // 0x0C08(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon_Gun");
		return ptr;
	}


	bool WeaponCycleDone();
	void UpdateDefaultReticleIndex(int InIndex);
	void StopReloadAnimByOne();
	void StartManualFireCycle();
	void SimulateWeaponReload();
	void SetWeaponReloadInterrupted(bool bIsInterrupted);
	void SetSpawnBulletFromBarrel(bool DoSpawnBulletFromBarrel);
	void SetFiringMode();
	void ServerStopReload();
	void ServerStopFire();
	void ServerStartReload();
	void ServerStartFire();
	void ServerSetHip(bool bNewIsHipped);
	void ServerSetCurrentZeroLevel(int ZeroLevel);
	void ServerHandleFiring(uint32_t T);
	void ServerCancelReload(bool WithoutLocal);
	void Server_StartManualFireCycle();
	void ProcessBoltAction();
	void PlayWeaponCycleCameraAnim();
	void PlayLongTailSound();
	void OnZeroingChanged();
	void OnRep_FiringModeIndex();
	void OnRep_CurrentZeroLevel(int LastCurrentZeroLevel);
	void OnRep_AmmoCount(int LastCurrentAmmoInClip);
	void OnInventoryUpdated();
	void OnAttachmentMainScopeLoaded();
	void OnAttachmentAngledScopeLoaded();
	void OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	void ManualFireCycleFinished();
	bool IsWeaponCycleInProgress();
	bool IsWeaponCycleAnimActive();
	bool IsReloadInterrupted();
	bool IsReloading();
	class UAnimMontage* GetWeaponTacticalReload();
	struct FWeaponPPSettings GetWeaponPostprocessSettings();
	struct FWeaponPPSettings GetWeaponOrScopePostprocessSettings();
	struct FVector GetWeaponHandOffsetFPP();
	struct FVector GetWeaponHandOffset();
	class UWeaponGunDataAsset* GetWeaponGunData();
	struct FWeaponGunConfigReplacement GetWeaponGunConfigReplacement();
	struct FWeaponGunData GetWeaponGunConfig();
	float GetWeaponFullReloadTime();
	float GetWeaponFullRealoadTimeWithAttachments();
	struct FWeaponDeviationConfig GetWeaponDeviationConfigReplacement();
	float GetWeaponCurrentRecoilValue();
	float GetWeaponCurrentDeviationValue();
	class UAnimMontage* GetWeaponChargeReload();
	struct FWeaponAttachmentData GetWeaponAttachmentDataForScopeType();
	struct FWeaponAnimConfig GetWeaponAnimConfig();
	float GetReloadAnimationPlayRate();
	float GetRecoilKick_MovementSpeed();
	float GetRecoilKick_MovementMultiplier();
	struct FVector GetRecoilADSSocketOffsetScale();
	int GetNumOfFiringMode();
	float GetMovementModifierScope();
	float GetMovementModifierAim();
	int GetMaxAmmo();
	float GetMagOutDuration();
	struct FVector GetMagDropLinearVelocity();
	struct FVector GetMagDropAngularVelocity();
	void GetLobbyAnimationEnum();
	int GetGripTypeIndex();
	void GetFiringMode();
	class UAmmoItem* GetDefaultAmmoObject();
	float GetCurrentDeviation();
	int GetCurrentAmmoInInventory();
	int GetCurrentAmmoInClip();
	int GetCurrentAmmo();
	class UAnimMontage* GetCharacterTacticalReloadFromAttach();
	class UAnimMontage* GetCharacterReloadTacticalMontage();
	class UAnimMontage* GetCharacterReloadChargeMontage();
	class UAnimMontage* GetCharacterReloadByOneStopMontage();
	class UAnimMontage* GetCharacterReloadByOneStartMontage();
	class UAnimMontage* GetCharacterReloadByOneSingleMontage();
	class UBlendSpaceBase* GetCharacterLHGripBlendspace();
	class UBlendSpace1D* GetCharacterGripBlendspace();
	class UAnimMontage* GetCharacterFireSelectorMontage();
	class UAnimMontage* GetCharacterFireMontage();
	class UAnimMontage* GetCharacterFireCycle();
	class UAnimMontage* GetCharacterChargeReloadFromAttach();
	int GetAmmoPerClip();
	class UClass* GetAmmoItemClass();
	float GetADSRecoilKick();
	void ClientStopSimulatingWeaponFire();
	void ClientSimulateWeaponFire();
	void ClientSetFiringMode();
	void ClientNotifyStopReloadByOne();
	void ClientNotifyOutOfAmmo();
	void ClientNotifyAmmo(int InCurrentAmmoData, bool bWhenArm);
	void ClientCancelReload(bool WithoutLocal);
	void Client_StartManualFireCycle();
	void ClearDesiredDoFireAction();
	bool CheckMiddlePointCollision();
	void CancelReloadImpl();
	void BroadcastOutOfAmmo();
	void AnimCall_ToggleFireMode();
	void AnimCall_ReloadTacticalWeapon();
	void AnimCall_ReloadChargeWeapon();
	void AnimCall_ReloadByOneStop();
	void AnimCall_FireWeaponCycle();
	void AnimCall_FireWeapon();
	void AdjustReticleTexture();
};


// Class TslGame.TslWeapon_Projectile
// 0x0000 (0x0C80 - 0x0C80)
class ATslWeapon_Projectile : public ATslWeapon_Gun
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon_Projectile");
		return ptr;
	}


	void ServerFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
};


// Class TslGame.TslWeapon_Throwable
// 0x0100 (0x08A0 - 0x07A0)
class ATslWeapon_Throwable : public ATslWeapon
{
public:
	struct FThrowableWeaponData                        ThrowableConfig;                                          // 0x07A0(0x00A0) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0840(0x0020) MISSED OFFSET
	unsigned char                                      UnknownData01[0x1];                                       // 0x0840(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWeapon_Throwable.ThrowableState
	unsigned char                                      UnknownData02[0x7];                                       // 0x0861(0x0007) MISSED OFFSET
	struct FName                                       ThrowWeaponSocketName;                                    // 0x0868(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     PawnMotionContributionMultiplier;                         // 0x0870(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x087C(0x0014) MISSED OFFSET
	class ATslParticle*                                CookingEffect;                                            // 0x0890(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AActor*                                      RingAttachment;                                           // 0x0898(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon_Throwable");
		return ptr;
	}


	void ServerStartPinOff();
	void ServerStartCooking();
	void ServerRequestCancelThrow();
	void ServerFireProjectile(int checksum1, int checksum2, const struct FVector& RelativeLocation, const struct FVector& AimDirection, float ClientPitch, int FakeIndex);
	void ServerBeginThrow();
	void OnRep_ThrowableState();
	void OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	void Multi_DrawDebugCorrectedSpawn(const struct FVector& OriginalLocation, const struct FVector& CorrectedLocation, const struct FVector& CapsuleCenter, const struct FQuat& CapsuleRotation, float CapsuleRadius, float CapsuleHalfHeight);
	void GetThrowableState();
	int GetThrowableCountInInventory();
	int GetThrowableCount();
	void ClientNotifyReset();
	struct FVector CalculateFinalThrowVelocity(const struct FVector& AimDirection);
};


// Class TslGame.TslProjectile
// 0x0200 (0x05E8 - 0x03E8)
class ATslProjectile : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	class UProjectileMovementComponent*                MovementComp;                                             // 0x03F8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x0400(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UParticleSystemComponent*                    ParticleComp;                                             // 0x0408(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x0410(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            InterpolationTargetComp;                                  // 0x0418(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x0420(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UFakeProjectileComponent*                    FakeProjectileComponent;                                  // 0x0428(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FVector                                     MeshInitialRotationRate;                                  // 0x0430(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	struct FExplosionTracer                            ExplosionTracer;                                          // 0x0440(0x0040) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0480(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslProjectile.ProjectileParticleClass
	unsigned char                                      UnknownData03[0x3];                                       // 0x0481(0x0003) MISSED OFFSET
	struct FVector                                     SpawnLocation;                                            // 0x0484(0x000C) (CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0490(0x0010) MISSED OFFSET
	struct FName                                       ParticleToMeshAttachPointName;                            // 0x04A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x04A8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslProjectile.ExplosionRotationType
	unsigned char                                      HideMeshAtExplosion : 1;                                  // 0x04A9(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      ExplosionInWater : 1;                                     // 0x04A9(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      ForceSpawnDecalInAir : 1;                                 // 0x04A9(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x6];                                       // 0x04AA(0x0006) MISSED OFFSET
	class UClass*                                      ExplosionTemplate;                                        // 0x04B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      ExplosionTemplateInAir;                                   // 0x04B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      ExplosionTemplateInWater;                                 // 0x04C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               ImpactSound;                                              // 0x04C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkComponent*                                AkComp;                                                   // 0x04D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData08[0x1];                                       // 0x04D8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslProjectile.ExplodeState
	unsigned char                                      UnknownData09[0x3];                                       // 0x04E1(0x0003) MISSED OFFSET
	int                                                FakeProjectileIndex;                                      // 0x04E4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bActiveParticle : 1;                                      // 0x04E8(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bPropagateEffectActor : 1;                                // 0x04E8(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData10[0x3];                                       // 0x04E9(0x0003) MISSED OFFSET
	float                                              VelocityStopStepDistance;                                 // 0x04EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     LastStepLocation;                                         // 0x04F0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     LastTickLocation;                                         // 0x04FC(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      bEnableInitialMeshInterpolation : 1;                      // 0x0508(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	float                                              InitialMeshInterpolationRate;                             // 0x050C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                StepBuffer;                                               // 0x0510(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VelocityCheckTimerTick;                                   // 0x0514(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MovementBaseCheckTimerTick;                               // 0x0518(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PostExplodeLifetime;                                      // 0x051C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     LastImpactVelocity;                                       // 0x0520(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x052C(0x0004) MISSED OFFSET
	struct FProjectileData                             ProjectileConfig;                                         // 0x0530(0x0040) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      ReplicatedEffectActor;                                    // 0x0570(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEnterWater;                                             // 0x0578(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData13[0x30];                                      // 0x0588(0x0030) MISSED OFFSET
	class ATslProjectile*                              FakeProjectile;                                           // 0x05B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x28];                                      // 0x05C0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslProjectile");
		return ptr;
	}


	void TakeDamageImp(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void PropagateEffectActor_BP();
	void PropagateEffectActor();
	void OnRep_Exploded();
	void OnRep_ActiveParticle();
	void OnProjectileStopSim(const struct FHitResult& ImpactResult);
	void OnImpact(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void Multi_StopSimulation(const struct FVector& InStopLocation);
	void Multi_ReactivateSimulation();
	void Multi_DrawDebugLocation(int DrawDebugIndex, const struct FVector& DrawDebugLocation);
	void ExplodeBP(const struct FVector& Location, const struct FRotator& Rotation, const struct FHitResult& Impact, float Radius);
	void CheckVelocityForStart();
	void CheckMovementBase();
};


// Class TslGame.TslProjectileMolotov
// 0x0080 (0x0668 - 0x05E8)
class ATslProjectileMolotov : public ATslProjectile
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x05E8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslProjectileMolotov.MolotovSimulation
	unsigned char                                      UnknownData01[0x7];                                       // 0x05E9(0x0007) MISSED OFFSET
	class UParticleSystemComponent*                    FireParticleComp;                                         // 0x05F0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              SimulationTickTime;                                       // 0x05F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x05FC(0x0004) MISSED OFFSET
	class UClass*                                      EffectControllerClass;                                    // 0x0600(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DamageFieldContainerTemplate;                             // 0x0608(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DamageFieldContainerInWallTemplate;                       // 0x0610(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DamageFieldTemplate;                                      // 0x0618(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DamageFieldTemplateInWall;                                // 0x0620(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VehicleDamageRadius;                                      // 0x0628(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x062C(0x0004) MISSED OFFSET
	class UClass*                                      FragmentProjectileClass;                                  // 0x0630(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DirectDebuff;                                             // 0x0638(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                ImpactMaxCount;                                           // 0x0640(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x24];                                      // 0x0644(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslProjectileMolotov");
		return ptr;
	}


	void SimulationVolumetricSpreadTick_BP();
	void SimulationVolumetricSpreadTick();
};


// Class TslGame.TslProjectileRedZone
// 0x0020 (0x0608 - 0x05E8)
class ATslProjectileRedZone : public ATslProjectile
{
public:
	class UAkAudioEvent*                               CreateSound;                                              // 0x05E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FText                                       DisplayName;                                              // 0x05F0(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslProjectileRedZone");
		return ptr;
	}

};


// Class TslGame.TslProjectile_Flare
// 0x0138 (0x0520 - 0x03E8)
class ATslProjectile_Flare : public AActor
{
public:
	class UProjectileMovementComponent*                ProjectileMovementComp;                                   // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x03F0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              DamageRadius;                                             // 0x03F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UClass*                                      DebuffTemplate;                                           // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     HighAltTargetVelocity;                                    // 0x0408(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GroundTraceDinstance;                                     // 0x0414(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AttenuationScalingCheckDelay;                             // 0x0418(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AttenuationScalingInterpSpeed;                            // 0x041C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AttenuationScalingInterpSpeedInWater;                     // 0x0420(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AttenuationScalingInMap;                                  // 0x0424(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AttenuationScalingOutMap;                                 // 0x042C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AttenuationScalingUnderWater;                             // 0x0434(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0438(0x0001) MISSED OFFSET
	unsigned char                                      bIsUnderwater : 1;                                        // 0x0439(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1A];                                      // 0x043A(0x001A) MISSED OFFSET
	unsigned char                                      bHighAltReached_CP : 1;                                   // 0x0454(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xCB];                                      // 0x0455(0x00CB) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslProjectile_Flare");
		return ptr;
	}


	void SetAkAttenuationScaling_BP(float InAttScale);
	void Server_SpawnCarePackageCustom(const struct FVector& InLocation);
	void OnUnderwaterChanged_BP();
	void OnParticleTouchedWater_BP();
	void CheckUnderWaterLast(const struct FHitResult& InHitResult);
	void ApplyBurn(const struct FVector& InLocation);
	void ActivateFlare_BP();
};


// Class TslGame.TslProjectileMovementComponent
// 0x0010 (0x0300 - 0x02F0)
class UTslProjectileMovementComponent : public UProjectileMovementComponent
{
public:
	float                                              UnderwaterDrag;                                           // 0x02F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UnderwaterBouyancy;                                       // 0x02F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectedUnderwater : 1;                                  // 0x02F8(0x0001) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslProjectileMovementComponent");
		return ptr;
	}

};


// Class TslGame.TslReactionDoorComponent
// 0x0070 (0x0AF0 - 0x0A80)
class UTslReactionDoorComponent : public UStaticMeshComponent
{
public:
	class UTslReactionDoorData*                        ReactionDoorData;                                         // 0x0A80(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           DoorDestructibleMesh;                                     // 0x0A88(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                HLODChildIndex;                                           // 0x0A90(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FDoorBreakingState                          DoorBreakingState;                                        // 0x0A94(0x0001) (CPF_Net)
	unsigned char                                      UnknownData00[0x13];                                      // 0x0A95(0x0013) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_DestroyDM;                                    // 0x0AA8(0x0008) (CPF_Transient)
	class UTslReactionBoxComponent*                    DoorTopBoxComponent;                                      // 0x0AB0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslReactionBoxComponent*                    DoorCenterBoxComponent;                                   // 0x0AB8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslReactionBoxComponent*                    DoorBottomBoxComponent;                                   // 0x0AC0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UDestructibleComponent*                      DoorDestructibleComponent;                                // 0x0AC8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class ATslPlayerController*                        LocalPC;                                                  // 0x0AD0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FTimerHandle                                TimerHandle_CheckValidDM;                                 // 0x0AD8(0x0008) (CPF_Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0AE0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReactionDoorComponent");
		return ptr;
	}


	void OnRep_DoorBreakingState();
	void ClientTakeDamage(float Damage, const struct FVector_NetQuantize& HitLocation, bool bIsPointDamage, class APlayerController* InAttackerPC);
	void CheckValidDestructibleMesh();
};


// Class TslGame.TslReactionBoxComponent
// 0x0000 (0x0920 - 0x0920)
class UTslReactionBoxComponent : public UBoxComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReactionBoxComponent");
		return ptr;
	}


	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};


// Class TslGame.TslReactionClientComponent
// 0x0000 (0x0A80 - 0x0A80)
class UTslReactionClientComponent : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReactionClientComponent");
		return ptr;
	}


	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetForcedLodModel(int NewForcedLodModel);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
};


// Class TslGame.TslReferenceObjManager
// 0x0020 (0x0048 - 0x0028)
class UTslReferenceObjManager : public UObject
{
public:
	TArray<class UObject*>                             GameModeObjectList;                                       // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UObject*>                             CharacterObjectList;                                      // 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReferenceObjManager");
		return ptr;
	}


	void AddRefObject(class UObject* WorldContextObject, class UObject* InObject);
};


// Class TslGame.TslReloadMagazineAnimState
// 0x0008 (0x0038 - 0x0030)
class UTslReloadMagazineAnimState : public UAnimNotifyState
{
public:
	unsigned char                                      bReloadAmmoAtTheStateEnd : 1;                             // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReloadMagazineAnimState");
		return ptr;
	}

};


// Class TslGame.TslReplayData
// 0x0000 (0x0028 - 0x0028)
class UTslReplayData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReplayData");
		return ptr;
	}

};


// Class TslGame.TslSceneCaptureComponent2D
// 0x0010 (0x0AF0 - 0x0AE0)
class UTslSceneCaptureComponent2D : public USceneCaptureComponent2D
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0AE0(0x0008) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0AE8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSceneCaptureComponent2D");
		return ptr;
	}


	void CaptureScene();
};


// Class TslGame.TslSceneCaptureWorld
// 0x0078 (0x00A0 - 0x0028)
class UTslSceneCaptureWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0050(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0058(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSceneCaptureWorld");
		return ptr;
	}


	void InitWorld(class UGameInstance* GameInstance, const struct FString& SceneCapturePackageName);
	void DestroyWorld();
};


// Class TslGame.TslServerParticle
// 0x0028 (0x0410 - 0x03E8)
class ATslServerParticle : public AActor
{
public:
	unsigned char                                      bAutoDestroyOnParticleFinish : 1;                         // 0x03E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoPlaySound : 1;                                       // 0x03E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03EA(0x0006) MISSED OFFSET
	class UParticleSystemComponent*                    ParticleSystem;                                           // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AkSound;                                                  // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0400(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslServerParticle");
		return ptr;
	}


	void StopParticleMulticast();
	void OnParticleFinish(class UParticleSystemComponent* PSystem);
};


// Class TslGame.TslSimpleCollisionReceiver
// 0x0050 (0x04D0 - 0x0480)
class UTslSimpleCollisionReceiver : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0480(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSimpleCollisionReceiver");
		return ptr;
	}


	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetIsAttachmentReplicated(bool ShouldReplicate);
	void SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(bool bCallModify);
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class TslGame.TslSingleton
// 0x0130 (0x0158 - 0x0028)
class UTslSingleton : public UObject
{
public:
	unsigned char                                      UnknownData00[0x110];                                     // 0x0028(0x0110) MISSED OFFSET
	class UWeaponsPenetrationConfig*                   WeaponsPenetrationConfig;                                 // 0x0138(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_NoClear, CPF_IsPlainOldData)
	class UDataTable*                                  EmoteDataTable;                                           // 0x0140(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      TslAchievementClass;                                      // 0x0148(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      CharmAnimInstance;                                        // 0x0150(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSingleton");
		return ptr;
	}


	class UClass* GetCharmAnimInstance();
};


// Class TslGame.TslSmokeParticleSystemComponent
// 0x0000 (0x0B70 - 0x0B70)
class UTslSmokeParticleSystemComponent : public UParticleSystemComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSmokeParticleSystemComponent");
		return ptr;
	}


	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetBeamTargetTangent(int emitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int emitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int emitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int emitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int emitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int emitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int emitterIndex, const struct FVector& NewEndPoint);
	void SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<EAttachLocation> LocationType);
	void SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	int GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(const struct FName& InName);
	bool GetBeamTargetTangent(int emitterIndex, int TargetIndex, struct FVector* OutTangentPoint);
	bool GetBeamTargetStrength(int emitterIndex, int TargetIndex, float* OutTargetStrength);
	bool GetBeamTargetPoint(int emitterIndex, int TargetIndex, struct FVector* OutTargetPoint);
	bool GetBeamSourceTangent(int emitterIndex, int SourceIndex, struct FVector* OutTangentPoint);
	bool GetBeamSourceStrength(int emitterIndex, int SourceIndex, float* OutSourceStrength);
	bool GetBeamSourcePoint(int emitterIndex, int SourceIndex, struct FVector* OutSourcePoint);
	bool GetBeamEndPoint(int emitterIndex, struct FVector* OutEndPoint);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
};


// Class TslGame.TslSmokePropagationComponent
// 0x0100 (0x0580 - 0x0480)
class UTslSmokePropagationComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0480(0x0008) MISSED OFFSET
	class UTslSmokeParticleSystemComponent*            SmokeParticle;                                            // 0x0488(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x19];                                      // 0x0490(0x0019) MISSED OFFSET
	unsigned char                                      bSystemActivated : 1;                                     // 0x04A9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x04AA(0x0006) MISSED OFFSET
	class UClass*                                      BlockingActorTemplate;                                    // 0x04B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HalfHeightGlobal;                                         // 0x04B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HalfHeightLocalScalar;                                    // 0x04BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GlobalRadius;                                             // 0x04C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GlobalAngle;                                              // 0x04C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                RadialTryCount;                                           // 0x04C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                LoopCount;                                                // 0x04CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                LastWorkerIndex;                                          // 0x04D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxDistanceFromHost;                                      // 0x04D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CeilingTraceDistance;                                     // 0x04D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     MainParticleVelocityScale_First;                          // 0x04DC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     MainParticleVelocityScale_Second;                         // 0x04E8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     MainParticleVelocityScale_Third;                          // 0x04F4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HorizontalRayTraceOffset;                                 // 0x0500(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HorizontalRayRadiusScalar;                                // 0x0504(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HorizontalRayPropagateOffset;                             // 0x0508(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BlockerGroundTraceOffset;                                 // 0x050C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     LowChildVelocityStaticVector;                             // 0x0510(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     HighChildVelocityStaticVector;                            // 0x051C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   LowChildVelocityInMap;                                    // 0x0528(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   LowChildVelocityOutMap;                                   // 0x0530(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   HighChildVelocityInMap;                                   // 0x0538(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   HighChildVelocityOutMap;                                  // 0x0540(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                CurrentRadialRay;                                         // 0x0548(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                CurrentSpawnedChildCount;                                 // 0x054C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxTicksAllowed;                                          // 0x0550(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                MaxChildrenAllowed;                                       // 0x0554(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CustomTickInterval;                                       // 0x0558(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StartDelay;                                               // 0x055C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bDebugPropagation : 1;                                    // 0x0560(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bDebugTick : 1;                                           // 0x0561(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0562(0x0002) MISSED OFFSET
	float                                              ParticleLifetime;                                         // 0x0564(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   ParticleLifetimeRandomOffset;                             // 0x0568(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ParticleToObjectLifeScale;                                // 0x0570(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                ParticleAllocationCount;                                  // 0x0574(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0578(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSmokePropagationComponent");
		return ptr;
	}


	void InitScan();
};


// Class TslGame.TslSpawnAroundPlayerSystem
// 0x0070 (0x0098 - 0x0028)
class UTslSpawnAroundPlayerSystem : public UObject
{
public:
	int                                                CalcSpawnPointNumPerTick;                                 // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CalcSpawnPointGroupInterval;                              // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FNpcTimeSpawnParam>                  NpcTimeSpawnParamArray;                                   // 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	class UNavigationSystem*                           NavgationSystem;                                          // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FNpcTimeSpawnParam                          CurTimeSpawn;                                             // 0x0048(0x0020) (CPF_Transient)
	int                                                CurTimeSpawnIndex;                                        // 0x0068(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurCalcPlayerLocationIndex;                               // 0x006C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FVector>                             PlayerLocationArray;                                      // 0x0070(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                RemainSpawnCount;                                         // 0x0080(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0084(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSpawnAroundPlayerSystem");
		return ptr;
	}

};


// Class TslGame.TslSpecificLocationMarker
// 0x0020 (0x0408 - 0x03E8)
class ATslSpecificLocationMarker : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FString                                     LocationName;                                             // 0x03F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              Radius;                                                   // 0x0400(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSpecificLocationMarker");
		return ptr;
	}

};


// Class TslGame.TslSpectatorActorChannel
// 0x02A8 (0x0500 - 0x0258)
class UTslSpectatorActorChannel : public UActorChannel
{
public:
	unsigned char                                      UnknownData00[0x2A8];                                     // 0x0258(0x02A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSpectatorActorChannel");
		return ptr;
	}

};


// Class TslGame.TslSpectatorPawn
// 0x0410 (0x0880 - 0x0470)
class ATslSpectatorPawn : public ASpectatorPawn
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0470(0x0008) MISSED OFFSET
	struct FStringClassReference                       ReplayHUD;                                                // 0x0478(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FStringClassReference                       LevelAttribute_BattleRoyalRule;                           // 0x0488(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FStringClassReference                       LevelAttribute_Erangel;                                   // 0x0498(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FStringClassReference                       LevelAttribute_Desert;                                    // 0x04A8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FStringClassReference                       LevelAttribute_Savage;                                    // 0x04B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FStringClassReference                       LevelAttribute_DihorOtok;                                 // 0x04C8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	float                                              PlayerInfoDefaultDistance;                                // 0x04D8(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PlayerInfoMinDistance;                                    // 0x04DC(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PlayerInfoMaxDistance;                                    // 0x04E0(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      IsShowHeaderGun : 1;                                      // 0x04E4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04E5(0x0003) MISSED OFFSET
	class USpringArmComponent*                         FreeCameraSpringArmComponent;                             // 0x04E8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCameraComponent*                            FreeCameraComponent;                                      // 0x04F0(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslFollowCameraSpringArmComponent*          FollowCameraSpringArmComponent;                           // 0x04F8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslFollowCameraComponent*                   FollowCameraComponent;                                    // 0x0500(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UUpdateCameraComponent*                      UpdateCameraComponent;                                    // 0x0508(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0510(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslSpectatorPawn.CameraMode
	unsigned char                                      UnknownData03[0x1];                                       // 0x0511(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslSpectatorPawn.ReplayTimelineMode
	unsigned char                                      UnknownData04[0x6];                                       // 0x0512(0x0006) MISSED OFFSET
	class UArrowComponent*                             AudioListener;                                            // 0x0518(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslDeathCameraComponent*                    DeathCameraComponent;                                     // 0x0520(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              LocationUpdateIntervalSeconds;                            // 0x0528(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x052C(0x0004) MISSED OFFSET
	float                                              LimitMinFreeCamFov;                                       // 0x0530(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LimitMaxFreeCamFov;                                       // 0x0534(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0538(0x0008) MISSED OFFSET
	float                                              SlowInterpSpeed;                                          // 0x0540(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NormalInterpSpeed;                                        // 0x0544(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              QuickInterpSpeed;                                         // 0x0548(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CurrentInterpSpeed;                                       // 0x054C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0550(0x0008) MISSED OFFSET
	float                                              LimitTargetArmLength;                                     // 0x0558(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpectatableCheckLength;                                   // 0x055C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpectatableCheckScreenRatio;                              // 0x0560(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3C];                                      // 0x0564(0x003C) MISSED OFFSET
	unsigned char                                      bQuckZoomMode : 1;                                        // 0x05A0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bSlowZoomMode : 1;                                        // 0x05A1(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x6];                                       // 0x05A2(0x0006) MISSED OFFSET
	struct FString                                     SpectatedCharacterUniqueId;                               // 0x05A8(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FString                                     SpectatedCharacterPlayerName;                             // 0x05B8(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData10[0xF8];                                      // 0x05C8(0x00F8) MISSED OFFSET
	unsigned char                                      bEnableReplayEditor : 1;                                  // 0x06C0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      IsReplayEditorOnPath : 1;                                 // 0x06C1(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      IsReplayClip : 1;                                         // 0x06C2(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x06C3(0x0001) MISSED OFFSET
	int                                                ReplayClipStartTime;                                      // 0x06C4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ReplayClipEndTime;                                        // 0x06C8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x06CC(0x0004) MISSED OFFSET
	struct FDateTime                                   ReplayRecordedTime;                                       // 0x06D0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FStringClassReference                       ReplayZoneEffectClass;                                    // 0x06D8(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FStringClassReference                       ReplayZoneAreaClass;                                      // 0x06E8(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	class ATslPostProcessEffect*                       ReplayZoneEffect;                                         // 0x06F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AActor*                                      ReplayZoneArea;                                           // 0x0700(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TMap<int, struct FSavedObPos>                      SavedObPoses;                                             // 0x0708(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	struct FScriptMulticastDelegate                    OnPlayerInfoDistanceDelegate;                             // 0x0758(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReplayClipInfoDelegate;                                 // 0x0768(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReplayInfoDelegate;                                     // 0x0778(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0788(0x0008) MISSED OFFSET
	class ATslCharacter*                               KillcamKiller;                                            // 0x0790(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslCharacter*                               KillcamVictim;                                            // 0x0798(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x12];                                      // 0x07A0(0x0012) MISSED OFFSET
	unsigned char                                      bIsPlayingSkyDivingSound : 1;                             // 0x07B2(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x5];                                       // 0x07B3(0x0005) MISSED OFFSET
	struct FStringAssetReference                       FreefallLoop;                                             // 0x07B8(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FStringAssetReference                       ParachuteLoop;                                            // 0x07C8(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FStringAssetReference                       SkydiveStop;                                              // 0x07D8(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	class UAkComponent*                                AkSoundCom;                                               // 0x07E8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x30];                                      // 0x07F0(0x0030) MISSED OFFSET
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x0820(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              PivotYawScaleConstant;                                    // 0x0828(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PivotPitchScaleConstant;                                  // 0x082C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PivotHeightSpeedConstant;                                 // 0x0830(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PivotMaximumAngle;                                        // 0x0834(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     ObserverLastHitLocation;                                  // 0x0838(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData17[0x10];                                      // 0x0844(0x0010) MISSED OFFSET
	float                                              LockOnYawScaleConstant;                                   // 0x0854(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LockOnPitchScaleConstant;                                 // 0x0858(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LockOnHeightSpeedConstant;                                // 0x085C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LockOnMaximumAngle;                                       // 0x0860(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LockOnZOffset;                                            // 0x0864(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class ATslCharacter*                               ObserverLockOnTarget;                                     // 0x0868(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData18[0x10];                                      // 0x0870(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSpectatorPawn");
		return ptr;
	}


	void TickMonitoring();
	void SetShowPlayerInfoDistance(float Distance);
	void SetPlayerCamera(class AActor* NewViewTarget);
	void SetObserverCameraMode(class AActor* NewViewTarget);
	bool SetKillerOrVictimCamera(const struct FString& strKillerID, const struct FString& strKillerName, const struct FString& strVictimID, const struct FString& strVictimName);
	void SetFreeCameraPosRot(const struct FVector& Pos, const struct FRotator& Rot);
	void SetFreeCamera();
	void SetFreeCamBattleLocation(const struct FVector& HitterLoc, const struct FVector& AttackedLoc);
	void SetFollowCamera(class AActor* NewViewTarget);
	bool RestoreTargetCharacter();
	bool PrevSpectatorCameraPad();
	void OnViewTargetUpdate(class AActor* NewViewTarget);
	void OnToggleShowObseverTagWeapon();
	void OnToggleObseverTagWidget();
	bool OnToggleFreeCameraLagPad();
	void OnSwitchCameraSpectatorBegin();
	void OnSwitchCameraSpectator();
	void OnSwitchCameraFollowBegin();
	void OnSwitchCameraFollow();
	void OnStopSlowMove();
	void OnStopFastMove();
	void OnStartSlowMove();
	void OnStartFastMove();
	void OnSetLocation(unsigned char idx);
	void OnSetFree();
	void OnSetCharacterSpec(unsigned char idx);
	void OnSetCharacter(unsigned char idx);
	void OnSaveLocation(unsigned char idx);
	void OnSaveCharacter(unsigned char idx);
	void OnPlayerInfoDistanceUpHold();
	void OnPlayerInfoDistanceUp();
	void OnPlayerInfoDistanceDownHold();
	void OnPlayerInfoDistanceDown();
	void OnObserverLagCorrectionUp();
	void OnObserverLagCorrectionReset();
	void OnObserverLagCorrectionDown();
	void OnGotoTimelineDone();
	bool NextSpectatorCameraPad();
	void LookAtTargetPos(const struct FVector& targetPos);
	bool IsValidSwitchCameraFreeToOtherMode();
	bool IsObserverTagWeaponShow();
	void HandleClipboard();
	class ATslCharacter* GetSpectatableCharacter();
	class AItemPackage* GetSpectableItemPackage();
	float GetShowPlayerInfoDistance();
	bool GetObserverTagShow();
	class ATslCharacter* GetLastSpectatedCharacter();
	void GetCameraMode();
	class ATslCharacter* FindCharacterByUniqueID(const struct FString& UniqueId);
	class ATslCharacter* FindCharacterByNickName(const struct FString& Nickname);
	void BackupTargetCharacter(class AActor* ViewTarget);
};


// Class TslGame.TslSpectatorPawnMovement
// 0x0020 (0x02B0 - 0x0290)
class UTslSpectatorPawnMovement : public USpectatorPawnMovement
{
public:
	float                                              SlowMoveModifier;                                         // 0x0290(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinFreeMoveSpeed;                                         // 0x0294(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxFreeMoveSpeed;                                         // 0x0298(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinFreeMoveSpeedHeight;                                   // 0x029C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxFreeMoveSpeedHeight;                                   // 0x02A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AbsoluteMinZ;                                             // 0x02A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AbsoluteMaxZ;                                             // 0x02A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSpectatorPawnMovement");
		return ptr;
	}

};


// Class TslGame.TslStreamer
// 0x0020 (0x0048 - 0x0028)
class UTslStreamer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslStreamer");
		return ptr;
	}

};


// Class TslGame.FoliageCollisionStreamer
// 0x0068 (0x00B0 - 0x0048)
class UFoliageCollisionStreamer : public UTslStreamer
{
public:
	unsigned char                                      bEnabled : 1;                                             // 0x0048(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              MinDistance;                                              // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxQueryDistance;                                         // 0x0050(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxSimulationDistance;                                    // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseOnlyQueryAndPhysics : 1;                              // 0x0058(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x57];                                      // 0x0059(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FoliageCollisionStreamer");
		return ptr;
	}

};


// Class TslGame.LODActorStreamer
// 0x0038 (0x0080 - 0x0048)
class ULODActorStreamer : public UTslStreamer
{
public:
	unsigned char                                      bEnabled : 1;                                             // 0x0048(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              PreLoadDistance;                                          // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PerFrameShowCount;                                        // 0x0050(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PerFrameShowCountLimit;                                   // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FFloatRange>                         MinDrawDistanceOverride;                                  // 0x0058(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LODActorStreamer");
		return ptr;
	}

};


// Class TslGame.ParticleEnvrionmentStreamer
// 0x0018 (0x0060 - 0x0048)
class UParticleEnvrionmentStreamer : public UTslStreamer
{
public:
	unsigned char                                      bEnabled : 1;                                             // 0x0048(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              ToleranceDeactiveDistance;                                // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0050(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ParticleEnvrionmentStreamer");
		return ptr;
	}

};


// Class TslGame.TslStreamerManager
// 0x0028 (0x0410 - 0x03E8)
class ATslStreamerManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<class UClass*>                              StreamerClasses;                                          // 0x03F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<class UTslStreamer*>                        TslStreamers;                                             // 0x0400(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslStreamerManager");
		return ptr;
	}

};


// Class TslGame.TslThrowableItemProjectile
// 0x0098 (0x0480 - 0x03E8)
class ATslThrowableItemProjectile : public AActor
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x03E8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x03F0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            InterpolationTargetComp;                                  // 0x03F8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UProjectileMovementComponent*                MovementComp;                                             // 0x0400(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AkComp;                                                   // 0x0408(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FThrowableItemProjectileSpawnParams         SpawnParams;                                              // 0x0410(0x0050) (CPF_Net, CPF_Transient)
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x0460(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0468(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslThrowableItemProjectile");
		return ptr;
	}


	void OnSimulationStop(const struct FHitResult& ImpactResult);
	void OnRep_SpawnParams();
	void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void Multi_StopSimulation(const struct FVector& Location);
};


// Class TslGame.TslThrowableTrajectoryViewComponent
// 0x00D0 (0x0AA0 - 0x09D0)
class UTslThrowableTrajectoryViewComponent : public USplineComponent
{
public:
	class UStaticMesh*                                 SplineSegmentMesh;                                        // 0x09D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UMaterialInterface*                          SplineSegmentMeshMaterial;                                // 0x09D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   SegmentMeshScale;                                         // 0x09E0(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UStaticMesh*                                 ImpactMesh;                                               // 0x09E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UMaterialInterface*                          ImpactMeshMaterial;                                       // 0x09F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     ImpactMeshScale;                                          // 0x09F8(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A04(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x0A04(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslThrowableTrajectoryViewComponent.TraceObjectTypes
	float                                              PredictionTime;                                           // 0x0A58(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DistanceScaleFactor;                                      // 0x0A5C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       MaterialParam_NearDepthFadeOrigin;                        // 0x0A60(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       MaterialParam_FarDepthFadeOrigin;                         // 0x0A68(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SplineGenerationAngThresholdDeg;                          // 0x0A70(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0A74(0x000C) MISSED OFFSET
	class UStaticMeshComponent*                        ImpactMeshComponent;                                      // 0x0A80(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class USplineMeshComponent*>                SplineMeshArray;                                          // 0x0A88(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UMaterialInstanceDynamic*                    SplineSegmentMeshMaterialDynamic;                         // 0x0A98(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslThrowableTrajectoryViewComponent");
		return ptr;
	}


	void AttachToThrowable(class ATslWeapon_Throwable* ThrowableIn);
};


// Class TslGame.TslTransportEjectionComponent
// 0x0000 (0x01E0 - 0x01E0)
class UTslTransportEjectionComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTransportEjectionComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class TslGame.TslAreaTransportEjectionComponent
// 0x0010 (0x01F0 - 0x01E0)
class UTslAreaTransportEjectionComponent : public UTslTransportEjectionComponent
{
public:
	struct FString                                     EjectionAreaTag;                                          // 0x01E0(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAreaTransportEjectionComponent");
		return ptr;
	}

};


// Class TslGame.TslHighlightRenderOption
// 0x0090 (0x0388 - 0x02F8)
class UTslHighlightRenderOption : public UTslUserWidget
{
public:
	class UUserWidget*                                 TopWidget;                                                // 0x02F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FString                                     HighlightTargetName;                                      // 0x0300(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	int                                                Idx_Resolutions;                                          // 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	struct FString                                     ResolutionsStr;                                           // 0x0318(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	int                                                Idx_Quality;                                              // 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	struct FString                                     QualityStr;                                               // 0x0330(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      bOnHighlightInfo : 1;                                     // 0x0340(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0341(0x0007) MISSED OFFSET
	struct FString                                     Filename;                                                 // 0x0348(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FString                                     DirectoryPath;                                            // 0x0358(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FString                                     AbsoluteFilePath;                                         // 0x0368(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<struct FString>                             FileNames;                                                // 0x0378(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHighlightRenderOption");
		return ptr;
	}


	void ToggleHighlightInfoOnOff();
	void ResolutionsUp();
	void ResolutionsDown();
	void QualityUp();
	void QualityDown();
	void InitShow();
	void InitExportInfo();
};


// Class TslGame.TslReplayTimeline
// 0x0000 (0x02F8 - 0x02F8)
class UTslReplayTimeline : public UTslUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReplayTimeline");
		return ptr;
	}


	void TslUserWidgetDestroyEvent__DelegateSignature();
	struct FEventReply TransferUserFocusThroughReply(const struct FFocusEvent& AcceptedFocusEvent, class UWidget* FocusWidget, bool bInAllUsers, struct FEventReply* Reply);
	void StopListeningForAllInputAxises();
	void SetupInputForBlueprint();
	bool NavigateUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	void ListenForInputAxis(const struct FName& AxisName, float Scale, bool bConsume, const struct FScriptDelegate& Callback);
	bool IsSpectating();
	bool IsReplaying();
	bool IsObserving();
	bool IsInLobby();
	class UTslGameUserSettings* GetTslGameUserSettings();
	float GetRawKeyValue(const struct FKey& InKey);
	class ATslPlayerState* GetDemoPlayerState(bool IsForMatchResult);
	class ATslCharacter* GetCachedViewTargetTslCharacter();
	class ATslGameState* GetCachedGameState();
	class ATslCharacter* GetCachedCharacter();
	float GetAxisMultiplier();
	bool ContainUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	bool ContainOwnerUserFocus();
	void ClearUserFocus(class ULocalPlayer* Player);
};


// Class TslGame.BaseLobbyRotationRectWidget
// 0x0008 (0x03C0 - 0x03B8)
class UBaseLobbyRotationRectWidget : public UUmgBaseWidget
{
public:
	float                                              MultiplierRotationX;                                      // 0x03B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MultiplierRotationY;                                      // 0x03BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BaseLobbyRotationRectWidget");
		return ptr;
	}


	void OnStopRotation();
	void OnLobbyCharacterOrViewModeActorAddAngle_Y(float Y);
	void OnLobbyCharacterOrViewModeActorAddAngle_X(float X);
	void OnLobbyCharacterOrViewModeActorAddAngle(float X, float Y);
};


// Class TslGame.BaseLobbyWebView
// 0x0000 (0x03B8 - 0x03B8)
class UBaseLobbyWebView : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BaseLobbyWebView");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.BlockInputUserWidget
// 0x0050 (0x0408 - 0x03B8)
class UBlockInputUserWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bWhiteList : 1;                                           // 0x03B8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	TArray<struct FBlockAction>                        BlockActions;                                             // 0x03C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FName>                               BlockAxises;                                              // 0x03D0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      bGenerateEventOnOpen : 1;                                 // 0x03E0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bLockMouseCursorInViewport : 1;                           // 0x03E1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03E2(0x0006) MISSED OFFSET
	TArray<struct FBlockAction>                        BlockActionsOnDemand;                                     // 0x03E8(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<struct FName>                               BlockAxisesOnDemand;                                      // 0x03F8(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BlockInputUserWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionInputBlockerWidget
// 0x0008 (0x0410 - 0x0408)
class UTslGameOptionInputBlockerWidget : public UBlockInputUserWidget
{
public:
	class UTslGameOptionWidget*                        Owner;                                                    // 0x0408(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionInputBlockerWidget");
		return ptr;
	}

};


// Class TslGame.TslKillMessageWidget
// 0x0050 (0x0408 - 0x03B8)
class UTslKillMessageWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnVanishFinished;                                         // 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	TArray<struct FCauseOfDeathData>                   CauseOfDeathDatas;                                        // 0x03C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FConditionOfDeathData>               ConditionOfDeathDatas;                                    // 0x03D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<class UTexture*>                            WeaponMasteryLevelIcons;                                  // 0x03E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKillMessageWidget");
		return ptr;
	}


	void StartToVanish();
	void SetVanishTimer(float TimeDelay);
	void SetDeathMessage(const struct FDeathMessage& InDeathMessage);
	void GetTextureFromDamageTypeCategory(class UTexture** OutTexture, float* OutRatio);
	void GetTextureFromConditionOfDeathCategory(class UTexture** OutTexture, float* OutRatio);
	void BroadcastOnVanishFinishedEvent();
};


// Class TslGame.UiHelperFunctions
// 0x0000 (0x0028 - 0x0028)
class UUiHelperFunctions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.UiHelperFunctions");
		return ptr;
	}

};


// Class TslGame.TslGameOptionCategoryGroupWidget
// 0x0058 (0x0410 - 0x03B8)
class UTslGameOptionCategoryGroupWidget : public UUmgBaseWidget
{
public:
	struct FName                                       ParentTabName;                                            // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       CategoryName;                                             // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  DisplayNameText_Binder;                                   // 0x03C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                ItemWidgetsVerticalBox_Binder;                            // 0x03E8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionCategoryGroupWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionTabContentsWidget
// 0x0030 (0x03E8 - 0x03B8)
class UTslGameOptionTabContentsWidget : public UUmgBaseWidget
{
public:
	struct FName                                       TabName;                                                  // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      CategoryGroupWidgetClass;                                 // 0x03C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   CategoryGroupsScrollBox_Binder;                           // 0x03C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionTabContentsWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionWidget
// 0x02D0 (0x06D8 - 0x0408)
class UTslGameOptionWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0408(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslGameOptionWidget.ItemWidgetsChanged
	unsigned char                                      UnknownData01[0x50];                                      // 0x0458(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslGameOptionWidget.ItemWidgetsNotInDefault
	unsigned char                                      UnknownData02[0x8];                                       // 0x04A8(0x0008) MISSED OFFSET
	struct FString                                     SelfIdentityNameString;                                   // 0x04B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UClass*                                      TabContentsWidgetClass;                                   // 0x04C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   TabSelectorWidget_Binder;                                 // 0x04C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TabContentsSwitcher_Binder;                               // 0x04E8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ApplyButton_Binder;                                       // 0x0510(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CancelButton_Binder;                                      // 0x0530(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CancelButtonText_Binder;                                  // 0x0550(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   DefaultButton_Binder;                                     // 0x0570(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DefaultButtonText_Binder;                                 // 0x0590(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   DetailWidget_Binder;                                      // 0x05B0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BackgroundBlur_Binder;                                    // 0x05D0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InputBlocker_Binder;                                      // 0x05F0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FLinearColor                                CancelButtonNormalColor;                                  // 0x0610(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                CancelButtonHoverColor;                                   // 0x0620(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                CancelButtonPressColor;                                   // 0x0630(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultButtonNormalColor;                                 // 0x0640(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultButtonHoverColor;                                  // 0x0650(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultButtonPressColor;                                  // 0x0660(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FString                                     PopupWidgetNameString;                                    // 0x0670(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FText                                       UnsavedChangesPopupTitleText;                             // 0x0680(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FText                                       UnsavedChangesPopupMessageText;                           // 0x0698(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FScriptDelegate                             OnEscapeWidgetActionEvent;                                // 0x06B0(0x000E) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)
	unsigned char                                      UnknownData03[0x2];                                       // 0x06B0(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             OnUnsavedChangesPopupButtonPressEvent;                    // 0x06C0(0x000E) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)
	unsigned char                                      UnknownData04[0x2];                                       // 0x06C0(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FName                                       CurrentSelectedTabName;                                   // 0x06D0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionWidget");
		return ptr;
	}


	void UpdateDefaultButtonTextColor();
	void UpdateCancelButtonTextColor();
	void OnUnsavedChangesPopupButtonPressed();
	void OnTabLabelSelected(const struct FName& SelectedTabName);
	void OnStepperItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, int StepperIndex);
	void OnSliderItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, float RawValue);
	void OnKeyBinderItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, int SlotIndex, const struct FTslInputKey& InputKey);
	void OnDropDownListItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, int ListIndex);
	void OnDefaultButtonClicked();
	void OnCancelButtonClicked();
	void OnApplyButtonClicked();
};


// Class TslGame.TslGamepadOptionWidget
// 0x0020 (0x0428 - 0x0408)
class UTslGamepadOptionWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 DescWidget_Binder;                                        // 0x0408(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionWidget");
		return ptr;
	}


	void UpdateOptionDesc(const struct FText& InTitleText, const struct FText& InDescText);
};


// Class TslGame.TslGamepadReportWidget
// 0x0038 (0x0440 - 0x0408)
class UTslGamepadReportWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0408(0x0010) UNKNOWN PROPERTY: ArrayProperty TslGame.TslGamepadReportWidget.SupportedReportCauseTypes
	struct FUmgWidgetBinder_UserWidget                 MainReportStepperWidget_Binder;                           // 0x0418(0x0020) (CPF_Edit)
	class UClass*                                      StepperWidgetClass;                                       // 0x0438(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadReportWidget");
		return ptr;
	}


	void OnReportButtonFocused(class UTslGamepadStepperWidget* Widget);
	void HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslInventoryWidget
// 0x0038 (0x0440 - 0x0408)
class UTslInventoryWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0408(0x0001) MISSED OFFSET
	unsigned char                                      bBPtoCppTest : 1;                                         // 0x0409(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x040A(0x0006) MISSED OFFSET
	class UClass*                                      NearbyInteractiveItemExplorerClass;                       // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ANearbyInteractiveItemExplorer*              NearbyInteractiveItemExplorer;                            // 0x0418(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTslItemListWidget*                          CachedVicinity;                                           // 0x0420(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslItemListWidget*                          CachedBackpack;                                           // 0x0428(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslEquipmentWidget*                         CachedEquipment;                                          // 0x0430(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslWeaponEquipmentWidget*                   CachedWeaponEquipmen;                                     // 0x0438(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslInventoryWidget");
		return ptr;
	}


	void SetEasyDropOrDetachMode(bool bNewEasyDropOrDetachMode);
	void ReleasedEasyDropOrDetachMode();
	void PreasedEasyDropOrDetachMode();
	void OnUpdateVicinity();
	void OnUpdateInventory();
	void OnUpdateEquipment();
	bool IsEasyDropOrDetachMode();
};


// Class TslGame.TslMissionListBaseWidget
// 0x00E8 (0x04F0 - 0x0408)
class UTslMissionListBaseWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             CheckingCompletedAllSwitcher_Binder;                      // 0x0408(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      NewAchievedMissionList_Binder;                            // 0x0430(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      NonAchievedMissionList_Binder;                            // 0x0450(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      InProgressMissionList_Binder;                             // 0x0470(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      AlreadyAchievedMissionList_Binder;                        // 0x0490(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      ScrollBox_Binder;                                         // 0x04B0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      MissionItemBaseWidgetClass;                               // 0x04D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                CompletedAllIndex;                                        // 0x04D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                NotCompletedIndex;                                        // 0x04DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<class UTslMissionItemBaseWidget*>           MissionItemWidgets;                                       // 0x04E0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMissionListBaseWidget");
		return ptr;
	}


	void ScrollMissionList(float InScrollOffset);
};


// Class TslGame.TslMissionListCanvasWidget
// 0x0020 (0x0428 - 0x0408)
class UTslMissionListCanvasWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 MissionListWidget_Binder;                                 // 0x0408(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMissionListCanvasWidget");
		return ptr;
	}

};


// Class TslGame.TslNewWorldMapWidget
// 0x0228 (0x0630 - 0x0408)
class UTslNewWorldMapWidget : public UBlockInputUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnHideMyself;                                             // 0x0408(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FUmgWidgetBinder_Animation                  MapFadeInBinder;                                          // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_ScaleBox                   FlaregunScaleBoxBinder;                                   // 0x0438(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 MapWidgetBinder;                                          // 0x0460(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             HelpWidgetXboxSwitcherBinder;                             // 0x0480(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             HelpWidgetBinder;                                         // 0x04A8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              XboxHelp_PlaceMarkerBinder;                               // 0x04D0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              XboxHelp_RemoveMarkerBinder;                              // 0x04F8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   MinimizeHelpButtonBinder;                                 // 0x0520(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RestoreHelpButtonBinder;                                  // 0x0540(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      PadGuideImgBinder;                                        // 0x0560(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class UCurveFloat*                                 MapSizeCurve;                                             // 0x0588(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 MapSizeChangeTimeCurve;                                   // 0x0590(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 PositionMoveTimeCurve;                                    // 0x0598(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 MovePadGuideCurve;                                        // 0x05A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 ZoomMultiplierCurve;                                      // 0x05A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   SizeOffset;                                               // 0x05B0(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartSize;                                                // 0x05B8(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartPosition;                                            // 0x05C0(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   PositionOffset;                                           // 0x05C8(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   MouseDownPosition;                                        // 0x05D0(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TWeakObjectPtr<class UMapGridWidget>               MapGrid;                                                  // 0x05D8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x05E0(0x0020) MISSED OFFSET
	struct FStringClassReference                       SpawnKitWidgetClass;                                      // 0x0600(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)
	struct FUmgWidgetBinder_Panel                      Panel_SpawnKitParent;                                     // 0x0610(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNewWorldMapWidget");
		return ptr;
	}


	void StartChangeMapSize(bool bIsPad);
	void OnRestoreHelpButtonClicked();
	void OnPutMarkerPad();
	void OnPadGuideMoveUp(float Add);
	void OnPadGuideMoveRight(float Add);
	void OnPadGuideMoveingReayReleased();
	void OnPadGuideMoveingReayPressed();
	void OnMoveMapGridViewCenterToMyIconCenter();
	void OnMinimizeHelpButtonClicked();
	void OnMarkerForReplay();
	void OnMarkerDelete();
	void OnMarker();
	void OnMapZoomPad(float AdditaionalZoom);
	void OnMapZoom(float AdditaionalZoom);
	void OnMapResetZoomGamePad();
	void OnMapMoveY(float Value);
	void OnMapMoveX(float Value);
	void OnMapMoveGamepadY(float Value);
	void OnMapMoveGamepadX(float Value);
	void OnMapMove();
	void OnHideWorldMap();
	void OffMapMove();
	void MovePosition();
};


// Class TslGame.TslPCKeyGuideWidget
// 0x0130 (0x0538 - 0x0408)
class UTslPCKeyGuideWidget : public UBlockInputUserWidget
{
public:
	class UDataTable*                                  KeyGuideDataTable;                                        // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      KeyGuideContentWidgetClass;                               // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FString                                     DividerNamePrefix;                                        // 0x0418(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FTslInputKey                                UnassignedKey;                                            // 0x0428(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FString                                     SystemMenuSceneName;                                      // 0x0448(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            MainInvalidationBox_Binder;                               // 0x0458(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 KeyboardWidget_Binder;                                    // 0x0480(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 MouseWidget_Binder;                                       // 0x04A0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      DescriptionPanel_Binder;                                  // 0x04C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 TabSelectorWidget_Binder;                                 // 0x04E0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UTslKeyboardWidget*                          KeyboardWidget;                                           // 0x0500(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslMouseWidget*                             MouseWidget;                                              // 0x0508(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslTabSelectorWidget*                       TabSelectorWidget;                                        // 0x0510(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UPanelWidget*>                        CachedDescriptionColumns;                                 // 0x0518(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0528(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPCKeyGuideWidget");
		return ptr;
	}


	void UpdateCategory(const struct FString& CategoryId);
};


// Class TslGame.TslPopupBoxWidget
// 0x0178 (0x0580 - 0x0408)
class UTslPopupBoxWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_Border                     WaitingBinder;                                            // 0x0408(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  PopupEmergingBinder;                                      // 0x0438(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonCancelBinder;                                       // 0x0458(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonOKBinder;                                           // 0x0478(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextCancelBinder;                                         // 0x0498(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextTitleBinder;                                          // 0x04B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextOKBinder;                                             // 0x04D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextMessageBinder;                                        // 0x04F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FText                                       OkText;                                                   // 0x0518(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FText                                       CancelText;                                               // 0x0530(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FText                                       MessageText;                                              // 0x0548(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	TWeakObjectPtr<class UButton>                      BtnCancel;                                                // 0x0560(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FScriptDelegate                             PopupButtonEvent;                                         // 0x0568(0x000E) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0568(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned char                                      UnknownData01[0x1];                                       // 0x0578(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslPopupBoxWidget.SaveStyle

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPopupBoxWidget");
		return ptr;
	}


	void OnWidgetInputActionB();
	void OnBtnOkClicked();
	void OnBtnCancelClicked();
	void BuildPopupBoxInfo(const struct FText& Title, const struct FText& Message, const struct FScriptDelegate& PressedDelegate);
};


// Class TslGame.TslReportPlayerWidget
// 0x0120 (0x0528 - 0x0408)
class UTslReportPlayerWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             SelectSubjectWidgetSwitcherBinder;                        // 0x0408(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SelectSubjectComboBoxBinder;                              // 0x0430(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ReportCausesComboBoxBinder;                               // 0x0450(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonOKBinder;                                           // 0x0470(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonCancelBinder;                                       // 0x0490(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  SubjectToReportBinder;                                    // 0x04B0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameBinder;                                         // 0x04D0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 DetailReportManagerBinder;                                // 0x04F0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FString                                     SelectedNetId;                                            // 0x0510(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0520(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslReportPlayerWidget.SelectedReportCause
	unsigned char                                      UnknownData01[0x1];                                       // 0x0521(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslReportPlayerWidget.SubjectToReportType

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReportPlayerWidget");
		return ptr;
	}


	void UpdateSubjectToReportType();
	void OnSelectionChangedBySelecteSubject(const struct FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);
	void OnSelectionChangedByReportCauses(const struct FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);
	void OnRequestHideWidget();
	void OnChangeCauser(const struct FString& SelectCauser);
	void OnBtnOkClicked();
	void OnBtnCancelClicked();
};


// Class TslGame.TslStackCountHandlingSliderPopupWidget
// 0x01C0 (0x05C8 - 0x0408)
class UTslStackCountHandlingSliderPopupWidget : public UBlockInputUserWidget
{
public:
	TScriptInterface<class USlotContainerInterface>    SlotContainer;                                            // 0x0408(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TScriptInterface<class USlotInterface>             ItemSlot;                                                 // 0x0418(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AInventory*                                  Inventory;                                                // 0x0428(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bNeedToFocus : 1;                                         // 0x0430(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInit : 1;                                                // 0x0431(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDoOnce : 1;                                              // 0x0432(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bNeedToFocusWhenChanged : 1;                              // 0x0433(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinimumStackCount;                                        // 0x0434(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FText                                       OkText;                                                   // 0x0438(0x0018)
	class UMaterialInstanceDynamic*                    IconMat;                                                  // 0x0450(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UItem*                                       DropItem;                                                 // 0x0458(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  ItemNameBinder;                                           // 0x0460(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ActionTypeTextBinder;                                     // 0x0480(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextOKBinder;                                             // 0x04A0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  MaxQuantityTextBinder;                                    // 0x04C0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      IconBinder;                                               // 0x04E0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InputAmountTextBinder;                                    // 0x0508(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   QuantitySliderBinder;                                     // 0x0528(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonOKBinder;                                           // 0x0548(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonCancelBinder;                                       // 0x0568(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             WidgetSwitcherBinder;                                     // 0x0588(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnStackCountUpdated;                                      // 0x05B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	class UStringTable*                                UIStringTable;                                            // 0x05C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslStackCountHandlingSliderPopupWidget");
		return ptr;
	}


	bool UpdateInputAmountTextWhenTextChanged();
	void UpdateButtonState();
	void SetSlider(float NewValue);
	void SetInputAmountText(const struct FText& NewText);
	void OnValueChanged(float Value);
	void OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod);
	void OnTextChanged(const struct FText& Text);
	void OnSynchronizationValue(int SelectAmount, int MaxAmount);
	void OnPrepass_2(class UWidget* BoundWidget);
	void OnPrepass_1(class UWidget* BoundWidget);
	void OnOk();
	void OnNotifyDropSlotOnOtherContainer(const TScriptInterface<class USlotContainerInterface>& ContainerInterface, const TScriptInterface<class USlotInterface>& SlotInterface, const TScriptInterface<class USlotContainerInterface>& OtherContainer);
	void OnMouseWheelUpDown(float Value);
	void OnItemDropOtherContainer(class UItem* Item);
	void OkAction();
	void NotifyToCapacityWidget();
	void NotifyStackCountUpdated();
	bool IsPickup();
	bool IsInteractionValid();
	void InitOkText();
	void InitMaxQuantityText();
	void InitItemName();
	void InitInputAmountText();
	void InitIcon();
	int GetMaxCount();
	struct FText GetMaxButtonText();
	class AInventory* GetInventory();
	void FocusOnInputAmountText();
	void ClosePopup();
	void CloseAction();
	bool ClampInputAmountText(int Value);
};


// Class TslGame.TslSystemMenu
// 0x00E8 (0x04F0 - 0x0408)
class UTslSystemMenu : public UBlockInputUserWidget
{
public:
	TScriptInterface<class UTslNaviWidgetInterface>    LastFocusedWidget;                                        // 0x0408(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     SystemMenuSceneName;                                      // 0x0418(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              BlockContructTimeAfterDestruct;                           // 0x0428(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BlockDestructTimeAfterConstruct;                          // 0x042C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_InvalidationBox            MainInvalidationBox_Binder;                               // 0x0430(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      OutsidePanel_Binder;                                      // 0x0458(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlatformTextBlock_Binder;                                 // 0x0478(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  VersionTextBlock_Binder;                                  // 0x0498(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	float                                              LastDestructTime;                                         // 0x04B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Panel                      SystemMenuVerticalBox_Binder;                             // 0x04C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x10];                                      // 0x04E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSystemMenu");
		return ptr;
	}


	void ShowCanvasPanel(bool bShow);
	void RestartLobby();
	void RecoverFocusToLastFocusedButton();
	void NotifySystemMenuEnter();
	bool IsConstructable();
	void HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleGamepadEnterOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslTeamManageInfoBaseWidget
// 0x00A8 (0x0460 - 0x03B8)
class UTslTeamManageInfoBaseWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnReportButtonClicked;                                    // 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x40];                                      // 0x03C8(0x0040) MISSED OFFSET
	struct FTslReportUserInfo                          ReportInfo;                                               // 0x0408(0x0048)
	float                                              VisualVolumeModifier;                                     // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ActualVolumeMin;                                          // 0x0454(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ActualVolumeMax;                                          // 0x0458(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTeamManageInfoBaseWidget");
		return ptr;
	}

};


// Class TslGame.TslTeamManageBaseWidget
// 0x0098 (0x04A0 - 0x0408)
class UTslTeamManageBaseWidget : public UBlockInputUserWidget
{
public:
	struct FString                                     WidgetName;                                               // 0x0408(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FString                                     InGameMenuWidgetName;                                     // 0x0418(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InfoWidgetPanel_Binder;                                   // 0x0428(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      InfoWidgetClass;                                          // 0x0448(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FMargin                                     InfoWidgetPadding;                                        // 0x0450(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	float                                              ActualVolumeMax;                                          // 0x0460(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	struct FString                                     ReportPlayerWidgetName;                                   // 0x0468(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<class UWidget*>                             InfoWidgets;                                              // 0x0478(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class ATeam*>                               TeamMembers;                                              // 0x0488(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTeamManageBaseWidget");
		return ptr;
	}


	void OnTeamMemberVoiceMuteStateChanged(const struct FString& PlayerId, const struct FString& ChannelId, bool bIsMuted);
	void OnSuccessfullyReportPlayer(const struct FString& UniqueId);
	void OnReport(const struct FTslReportUserInfo& ReportInfo);
	void OnNotifyReportTeamMember();
	void OnInfoWidgetToggleVoiceMute(const struct FString& UniqueId, bool bMute);
};


// Class TslGame.TslPcTeamManageWidget
// 0x0048 (0x04E8 - 0x04A0)
class UTslPcTeamManageWidget : public UTslTeamManageBaseWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   CloseBtn_Binder;                                          // 0x04A0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 ReportWidget_Binder;                                      // 0x04C0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04E0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPcTeamManageWidget");
		return ptr;
	}


	void OnCloseButtonClicked();
};


// Class TslGame.TslXboxTeamManageWidget
// 0x0000 (0x04A0 - 0x04A0)
class UTslXboxTeamManageWidget : public UTslTeamManageBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslXboxTeamManageWidget");
		return ptr;
	}


	void OnTeamMemberVoiceMuteStateChanged(const struct FString& PlayerId, const struct FString& ChannelId, bool bIsMuted);
	void OnSuccessfullyReportPlayer(const struct FString& UniqueId);
	void OnReport(const struct FTslReportUserInfo& ReportInfo);
	void OnNotifyReportTeamMember();
	void OnInfoWidgetToggleVoiceMute(const struct FString& UniqueId, bool bMute);
};


// Class TslGame.TslWheelBaseWidget
// 0x01A8 (0x05B0 - 0x0408)
class UTslWheelBaseWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_Overlay                    WheelOverlay_Binder;                                      // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MouseCursorIcon_Binder;                                   // 0x0430(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CenterImage_Binder;                                       // 0x0458(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CenterTitleTextBlock_Binder;                              // 0x0480(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CenterDescriptionTextBlock_Binder;                        // 0x04A0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    CloseGuideSizeBox_Binder;                                 // 0x04C0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeInAnimation_Binder;                                   // 0x04E8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimation_Binder;                                  // 0x0508(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FString                                     WidgetName;                                               // 0x0528(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              AngleOffset;                                              // 0x0538(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DelayTimeBeforeUnfocusOnGamepad;                          // 0x053C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FText                                       UnavailableSystemMessageText;                             // 0x0540(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UClass*                                      SubWidgetClass;                                           // 0x0558(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bShowMouseCursor : 1;                                     // 0x0560(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0561(0x0003) MISSED OFFSET
	float                                              GamepadSafeZoneRadius;                                    // 0x0564(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MouseSafeZoneRadius;                                      // 0x0568(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x056C(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWheelBaseWidget.MouseSelectType
	unsigned char                                      UnknownData02[0x1];                                       // 0x056D(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWheelBaseWidget.GamepadSelectType
	unsigned char                                      UnknownData03[0x2];                                       // 0x056E(0x0002) MISSED OFFSET
	TArray<class UTslWheelBaseSubWidget*>              SubWidgets;                                               // 0x0570(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0580(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData05[0x1];                                       // 0x0580(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWheelBaseWidget.SelectType
	unsigned char                                      UnknownData06[0x1B];                                      // 0x0589(0x001B) MISSED OFFSET
	unsigned char                                      UnknownData07[0x1];                                       // 0x0589(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWheelBaseWidget.MouseCursorDirectionType
	unsigned char                                      UnknownData08[0x3];                                       // 0x05A5(0x0003) MISSED OFFSET
	float                                              RestrictedDistanceFromCenter;                             // 0x05A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWheelBaseWidget");
		return ptr;
	}


	void WidgetShow();
	void WidgetHide();
	void OnClicked();
	void Cancel();
};


// Class TslGame.TslEmoteWheelWidget
// 0x0078 (0x0628 - 0x05B0)
class UTslEmoteWheelWidget : public UTslWheelBaseWidget
{
public:
	TArray<struct FName>                               EmoteRowNames;                                            // 0x05B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FName>                               EmoteShorcutNames;                                        // 0x05C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FEmoteDBDataRow>                     EmoteDataRows;                                            // 0x05D0(0x0010) (CPF_ZeroConstructor)
	TArray<struct FName>                               MovementAxises;                                           // 0x05E0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FTslAxisInputCallbackConfig>         GamepadMovementAxises;                                    // 0x05F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FName>                               TurnAxises;                                               // 0x0600(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              BlockMovingTime;                                          // 0x0610(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0614(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEmoteWheelWidget");
		return ptr;
	}


	void OnSelect9();
	void OnSelect8();
	void OnSelect7();
	void OnSelect6();
	void OnSelect5();
	void OnSelect4();
	void OnSelect3();
	void OnSelect2();
	void OnSelect12();
	void OnSelect11();
	void OnSelect10();
	void OnSelect1();
	void DoNothingFloat(float Value);
	void DoNothing();
};


// Class TslGame.TslItemWheelWidget
// 0x0010 (0x05C0 - 0x05B0)
class UTslItemWheelWidget : public UTslWheelBaseWidget
{
public:
	TArray<class UClass*>                              ItemClasses;                                              // 0x05B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslItemWheelWidget");
		return ptr;
	}

};


// Class TslGame.TslHealItemWheelWidget
// 0x0000 (0x05C0 - 0x05C0)
class UTslHealItemWheelWidget : public UTslItemWheelWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHealItemWheelWidget");
		return ptr;
	}

};


// Class TslGame.TslThrowableItemWheelWidget
// 0x0000 (0x05C0 - 0x05C0)
class UTslThrowableItemWheelWidget : public UTslItemWheelWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslThrowableItemWheelWidget");
		return ptr;
	}

};


// Class TslGame.BluezoneGuideWidget
// 0x0000 (0x03B8 - 0x03B8)
class UBluezoneGuideWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BluezoneGuideWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.BluezoneGpsBaseWidget
// 0x0370 (0x0728 - 0x03B8)
class UBluezoneGpsBaseWidget : public UBluezoneGuideWidget
{
public:
	struct FUmgWidgetBinder_Image                      BluezoneGaugeImageBinder;                                 // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      PlayerIconImageBinder;                                    // 0x03E0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  MovingAnimationBinder;                                    // 0x0408(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	TArray<struct FUmgWidgetBinder_Animation>          WarningAnimationList;                                     // 0x0428(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_Animation>          ReleasingTextAnimationList;                               // 0x0438(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FUmgWidgetBinder_Animation                  EnterNextPlayzoneAnimBinder;                              // 0x0448(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  LeaveNextPlayzoneAnimBinder;                              // 0x0468(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  WidgetEmergingAnimBinder;                                 // 0x0488(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  WidgetVanishingAminBinder;                                // 0x04A8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       PlayZoneStartParmName;                                    // 0x04C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BluezoneEndParamName;                                     // 0x04D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ColorMultiplyParmName;                                    // 0x04D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                InNextPlayzoneColorMultiply;                              // 0x04E0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FSequence_Float                             BluezoneResetSequence;                                    // 0x04F0(0x00A0) (CPF_Edit, CPF_BlueprintVisible)
	struct FSequence_Float                             PlayzoneResetSequence;                                    // 0x0590(0x00A0) (CPF_Edit, CPF_BlueprintVisible)
	struct FSequence_Float                             PlayerIconResetSequence;                                  // 0x0630(0x00A0) (CPF_Edit, CPF_BlueprintVisible)
	float                                              PlayerIconPositionX_Start;                                // 0x06D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PlayerIconPositionX_End;                                  // 0x06D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x06D8(0x0008) MISSED OFFSET
	unsigned char                                      bSaveWantShow : 1;                                        // 0x06E0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x47];                                      // 0x06E1(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BluezoneGpsBaseWidget");
		return ptr;
	}


	void UpdateBluezoneGpsWidget(class UWidget* Widget);
	void OnNotifyNextGasIn(const struct FVector& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void OnGameUserSettingApplied();
};


// Class TslGame.BluezonePhaseWidget
// 0x0020 (0x03D8 - 0x03B8)
class UBluezonePhaseWidget : public UBluezoneGuideWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  BluezonePhaseTextBinder;                                  // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BluezonePhaseWidget");
		return ptr;
	}

};


// Class TslGame.BluezoneTimeWidget
// 0x00E8 (0x04A0 - 0x03B8)
class UBluezoneTimeWidget : public UBluezoneGuideWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  BluezoneTimeTextBinder;                                   // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	TArray<struct FUmgWidgetBinder_Animation>          ReleasingTextAnimationList;                               // 0x03D8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FText                                       TimeTextFormat;                                           // 0x03E8(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bOverrideWarningTimeText : 1;                             // 0x0400(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0401(0x0007) MISSED OFFSET
	struct FText                                       OverrideWarningTimeText;                                  // 0x0408(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bOverrideReleaseTimeText : 1;                             // 0x0420(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	struct FText                                       OverrideReleaseTimeText;                                  // 0x0428(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x48];                                      // 0x0440(0x0048) MISSED OFFSET
	class UImage*                                      CacedCautionImage;                                        // 0x0488(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UWidget*                                     CachedTimeTextSpacer;                                     // 0x0490(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BluezoneTimeWidget");
		return ptr;
	}

};


// Class TslGame.ObserverBluezoneTimeWidget
// 0x0020 (0x04C0 - 0x04A0)
class UObserverBluezoneTimeWidget : public UBluezoneTimeWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x04A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverBluezoneTimeWidget");
		return ptr;
	}

};


// Class TslGame.BluezoneWidget
// 0x0018 (0x03D0 - 0x03B8)
class UBluezoneWidget : public UUmgBaseWidget
{
public:
	TArray<class UWidget*>                             BluezoneArea;                                             // 0x03B8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BluezoneWidget");
		return ptr;
	}

};


// Class TslGame.BoostAndBuffCanvasWidget
// 0x0090 (0x0448 - 0x03B8)
class UBoostAndBuffCanvasWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 BoostGaugeWidgetBinder;                                   // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                BoostGaugeRetainerBoxBinder;                              // 0x03D8(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 BuffIconListWidgetBinder;                                 // 0x0400(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                BuffIconRetainerBoxBinder;                                // 0x0420(0x0028) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BoostAndBuffCanvasWidget");
		return ptr;
	}

};


// Class TslGame.CaptureAreaStatusWidget
// 0x0108 (0x04C0 - 0x03B8)
class UCaptureAreaStatusWidget : public UUmgBaseWidget
{
public:
	struct FCaptureObjectWidgetData                    CaptureObjectWidgetData;                                  // 0x03B8(0x0108) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CaptureAreaStatusWidget");
		return ptr;
	}

};


// Class TslGame.CharacterStanceBaseWidget
// 0x0038 (0x03F0 - 0x03B8)
class UCharacterStanceBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      StanceIconImageBinder;                                    // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FName                                       IconStateParamName;                                       // 0x03E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSaveShow : 1;                                            // 0x03E8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              SaveState;                                                // 0x03EC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CharacterStanceBaseWidget");
		return ptr;
	}

};


// Class TslGame.CharacterStateCanvasBaseWidget
// 0x0180 (0x0538 - 0x03B8)
class UCharacterStateCanvasBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeWidgetBinder;                                    // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                LifeGaugeRetainerBoxBinder;                               // 0x03D8(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 CharacterStanceWidgetBinder;                              // 0x0400(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                CharacterStanceRetainerBoxBinder;                         // 0x0420(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 BreathBarWidgetBinder;                                    // 0x0448(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 BreathADSBarWidgetBinder;                                 // 0x0468(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                BreathBarRetainerBoxBinder;                               // 0x0488(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                BreathADSBarRetainerBoxBinder;                            // 0x04B0(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 EquipableIconHudWidgetBinder;                             // 0x04D8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                EquipableIconHudRetainerBoxBinder;                        // 0x04F8(0x0028) (CPF_Edit)
	struct FSaveDataForLifegauge                       SaveLifegaugeData;                                        // 0x0520(0x0018) (CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CharacterStateCanvasBaseWidget");
		return ptr;
	}

};


// Class TslGame.ConstraintSlotOwnerItemIconWidget
// 0x0020 (0x03D8 - 0x03B8)
class UConstraintSlotOwnerItemIconWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.ConstraintSlotOwnerItemIconWidget.EquipSlotId
	unsigned char                                      UnknownData01[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	class UImage*                                      IconImageBinder;                                          // 0x03C0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FLinearColor                                IconColor;                                                // 0x03C8(0x0010) (CPF_Edit, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ConstraintSlotOwnerItemIconWidget");
		return ptr;
	}


	void SetEquipSlotID();
};


// Class TslGame.EquipableItemIconBaseWidget
// 0x00C0 (0x0478 - 0x03B8)
class UEquipableItemIconBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipableItemIconBaseWidget.EquipSlotId
	unsigned char                                      UnknownData01[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	struct FDurabilityColorSet                         DurabilityColorSet;                                       // 0x03C0(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseWrning : 1;                                           // 0x03D0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	struct FFloatInterval                              WarningRange;                                             // 0x03D4(0x0008) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData03[0x1];                                       // 0x03DC(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipableItemIconBaseWidget.IconVisibilityType
	unsigned char                                      UnknownData04[0x3];                                       // 0x03DD(0x0003) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x03E0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       IconTexParamName;                                         // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       IconColorParamName;                                       // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultColor;                                             // 0x0418(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  WarningAnimBinder;                                        // 0x0428(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  NoBagSpaceAnimBinder;                                     // 0x0448(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	class UEquipableItem*                              SaveEquipableItem;                                        // 0x0468(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SaveDurabilityRatio;                                      // 0x0470(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bNeedUpdate : 1;                                          // 0x0474(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.EquipableItemIconBaseWidget");
		return ptr;
	}


	void OnNoBagSpaceEvent();
};


// Class TslGame.EquipableItemIconHudBaseWidget
// 0x0018 (0x03D0 - 0x03B8)
class UEquipableItemIconHudBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bSaveShow : 1;                                            // 0x03B8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	TArray<struct FUmgWidgetBinder_UserWidget>         EquipableItemIconSlotList;                                // 0x03C0(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.EquipableItemIconHudBaseWidget");
		return ptr;
	}

};


// Class TslGame.EquipableItemIconHud_Observer
// 0x0000 (0x03D0 - 0x03D0)
class UEquipableItemIconHud_Observer : public UEquipableItemIconHudBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.EquipableItemIconHud_Observer");
		return ptr;
	}

};


// Class TslGame.FppWeaponSlotHudBaseWidget
// 0x0098 (0x0450 - 0x03B8)
class UFppWeaponSlotHudBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 WeaponSlotBinder;                                         // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                WeaponSlotRetainerBoxBinder;                              // 0x03D8(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 WeaponSlotListBinder;                                     // 0x0400(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                WeaponSlotListRetainerBoxBinder;                          // 0x0420(0x0028) (CPF_Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0448(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.FppWeaponSlotHudBaseWidget.SavedColorBlindType

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FppWeaponSlotHudBaseWidget");
		return ptr;
	}


	void ChangeWeaponListWidgetPosition();
};


// Class TslGame.FppWeaponSlotListWidget
// 0x0038 (0x03F0 - 0x03B8)
class UFppWeaponSlotListWidget : public UUmgBaseWidget
{
public:
	class UWeaponProcessorComponent*                   SaveWeaponProcessor;                                      // 0x03B8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class ATslWeapon*                                  SaveWeapon;                                               // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       SaveCurrentWeaponClassName;                               // 0x03C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FName>                               SaveWeaponListClassNames;                                 // 0x03D0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bSaveIsUnarmed : 1;                                       // 0x03E0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	int                                                SaveLoadedAmmoCount;                                      // 0x03E4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                SaveThrowableCount;                                       // 0x03E8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FppWeaponSlotListWidget");
		return ptr;
	}

};


// Class TslGame.GameInfoCanvasBaseWidget
// 0x0110 (0x04C8 - 0x03B8)
class UGameInfoCanvasBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             GamePlayInfoSwitcherBinder;                               // 0x03B8(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             KillCountOrTeamCountSwitcherBinder;                       // 0x03E0(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 AlivePlayerWidgetBinder;                                  // 0x0408(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_InvalidationBox            AlivePlayerInfoInvalidationBoxBinder;                     // 0x0428(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 KillCountWidgetBinder;                                    // 0x0450(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                TimeLimitRetainerBoxBinder;                               // 0x0470(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  TimeLimitTextBinder;                                      // 0x0498(0x0020) (CPF_Edit)
	class UTimerTextBlockUpdater*                      TimeLimitTextUpdater;                                     // 0x04B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GameInfoCanvasBaseWidget");
		return ptr;
	}


	void OnTimeLimitTextUpdated(const struct FString& TimeText);
};


// Class TslGame.GameProgressTimeWidget
// 0x0020 (0x03D8 - 0x03B8)
class UGameProgressTimeWidget : public UUmgBaseWidget
{
public:
	struct FText                                       TimeTextFormat;                                           // 0x03B8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UTextBlock*                                  CachedProgressTimeText;                                   // 0x03D0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GameProgressTimeWidget");
		return ptr;
	}

};


// Class TslGame.HudMainBaseWidget
// 0x0010 (0x03C8 - 0x03B8)
class UHudMainBaseWidget : public UUmgBaseWidget
{
public:
	struct FString                                     UiKey;                                                    // 0x03B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.HudMainBaseWidget");
		return ptr;
	}


	bool OnInit_Widget(class ATslBaseHUD* TslBaseHUD);
	bool OnInit_Replay(class ATslBaseHUD* TslBaseHUD);
	bool OnInit_Input(class ATslBaseHUD* TslBaseHUD);
	bool OnInit_Delegate(class ATslBaseHUD* TslBaseHUD);
};


// Class TslGame.ImageInTextWidget
// 0x0110 (0x04C8 - 0x03B8)
class UImageInTextWidget : public UUmgBaseWidget
{
public:
	struct FText                                       FormatText;                                               // 0x03B8(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	TMap<struct FString, class UTexture2D*>            ParamTextures;                                            // 0x03D0(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FSlateFontInfo                              FontInfo;                                                 // 0x0420(0x0068) (CPF_Edit, CPF_BlueprintVisible)
	float                                              ImageVecticalSize;                                        // 0x0488(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EVerticalAlignment>                    VecticalAlignment;                                        // 0x048C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x048D(0x0003) MISSED OFFSET
	struct FUmgWidgetBinder_HorizontalBox              TextHorizontalBox_Binder;                                 // 0x0490(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FString                                     ImageParamPrefix;                                         // 0x04B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ImageInTextWidget");
		return ptr;
	}


	void Update();
};


// Class TslGame.InteractionBaseWidget
// 0x02F0 (0x06A8 - 0x03B8)
class UInteractionBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     MainLayer;                                                // 0x03B8(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  InteractionMessageTextBinder;                             // 0x03E8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     InteractionMessageTextBgBinder;                           // 0x0408(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  AdditionalTextBinder;                                     // 0x0438(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      SuitableWeaponImageBinder;                                // 0x0458(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	float                                              SuitableWeaponImageHeight;                                // 0x0480(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      KeyImageBinder;                                           // 0x0488(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  InteractionKeyTextBinder;                                 // 0x04B0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     InteractionKeyTextBorder_Binder;                          // 0x04D0(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      InteractionKeyImage_Left_Binder;                          // 0x0500(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      InteractionKeyImage_Right_Binder;                         // 0x0528(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AdditionalMessageBlinkingBinder;                          // 0x0550(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AdditionalMessageNormalBinder;                            // 0x0570(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ShowAnimationBinder;                                      // 0x0590(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  HiddenAnimationBinder;                                    // 0x05B0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             InteractionInputMethodSwitcherBinder;                     // 0x05D0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       InteractionKeyName;                                       // 0x05F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      ProgressCircle_Binder;                                    // 0x0600(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FLinearColor                                InteractionTextColor_Interactable;                        // 0x0628(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                InteractionTextShadowColor_Interactable;                  // 0x0638(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                InteractionTextColor_NotInteractable;                     // 0x0648(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                InteractionTextShadowColor_NotInteractable;               // 0x0658(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0668(0x0008) MISSED OFFSET
	class UObject*                                     CachedInteractionObject;                                  // 0x0670(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UObject*                                     LastOutlinedCachedInteractionObject;                      // 0x0678(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0680(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.InteractionBaseWidget");
		return ptr;
	}


	void SetMainLayerVisibility();
	void SetInteractionText(const struct FText& InText, const struct FLinearColor& InColor);
	void OnNotifyInteractionItemChanged(bool bIsInteractEnable);
	void OnInventoryUpdated();
	void OnChangeTargetingType();
};


// Class TslGame.InteractionCanvasBaseWidget
// 0x0048 (0x0400 - 0x03B8)
class UInteractionCanvasBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 InteractionWidgetBinder;                                  // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                InteractionRetainerBoxBinder;                             // 0x03D8(0x0028) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.InteractionCanvasBaseWidget");
		return ptr;
	}

};


// Class TslGame.ItemToolTipGaugeWidget
// 0x0070 (0x0428 - 0x03B8)
class UItemToolTipGaugeWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      GaugeImage_Binder;                                        // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FLinearColor                                ComparingBaseColor;                                       // 0x03E0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                ComparingEmphasizingColor;                                // 0x03F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                NonComparingBaseColor;                                    // 0x0400(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                NonComparingZeroColor;                                    // 0x0410(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemToolTipGaugeWidget");
		return ptr;
	}


	void Update(float BeginGap, float EndGap, bool bCompareMode);
};


// Class TslGame.ItemToolTipWidget
// 0x0318 (0x06D0 - 0x03B8)
class UItemToolTipWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      IconImage_Binder;                                         // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                IconVerticalBox_Binder;                                   // 0x03E0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    IconSizeBox_Binder;                                       // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ItemNameTextBlock_Binder;                                 // 0x0430(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ItemSkinNameTextBlock_Binder;                             // 0x0450(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DescTextBlock_Binder;                                     // 0x0470(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CategoryTextBlock_Binder;                                 // 0x0490(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CapacityTextBlock_Binder;                                 // 0x04B0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              ComparisonHorizontalBox_Binder;                           // 0x04D0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ComparisonTextBlock_Binder;                               // 0x04F8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              AmmoInfoHorizontalBox_Binder;                             // 0x0518(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MagazineIconImage_Binder;                                 // 0x0540(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AmmoNameTextBlock_Binder;                                 // 0x0568(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AmmoPerClipTextBlock_Binder;                              // 0x0588(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     DamageBlockBorder_Binder;                                 // 0x05A8(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                WeaponGunBlockVerticalBox_Binder;                         // 0x05D8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 DamageGaugeWidget_Binder;                                 // 0x0600(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 EffectRangeGaugeWidget_Binder;                            // 0x0620(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 AccuracyGaugeWidget_Binder;                               // 0x0640(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 FiringRateGaugeWidget_Binder;                             // 0x0660(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              MaxDamage;                                                // 0x0680(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxEffectRange;                                           // 0x0684(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxAccuracy;                                              // 0x0688(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxFiringRate;                                            // 0x068C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultDelayTime;                                         // 0x0690(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bPrintWeaponInfoToScreen : 1;                             // 0x0694(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0695(0x0003) MISSED OFFSET
	struct FText                                       CapacityLocText;                                          // 0x0698(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TScriptInterface<class USlotInterface>             CachedSlot;                                               // 0x06B0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x06C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemToolTipWidget");
		return ptr;
	}


	void UpdateItemCountByCached();
	void SetToolTipVisibility(bool bVisible);
	void SetItemByInterface(const TScriptInterface<class USlotInterface>& SlotInterface);
	void SetItemByCached();
	void HandleMainPrepass(class UWidget* Widget);
};


// Class TslGame.KillCountBaseWidget
// 0x0050 (0x0408 - 0x03B8)
class UKillCountBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  KillCountTextBinder;                                      // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Animation                  IncreasingAnimBinder;                                     // 0x03D8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	float                                              IncreasingKillCountDisplayTime;                           // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LastKillCount;                                            // 0x03FC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bLastWantShow : 1;                                        // 0x0400(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	float                                              IncreasingKillCountDisplayStartTime;                      // 0x0404(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.KillCountBaseWidget");
		return ptr;
	}


	int GetLastKillCount();
};


// Class TslGame.LifeGaugeBaseWidget
// 0x0128 (0x04E0 - 0x03B8)
class ULifeGaugeBaseWidget : public UUmgBaseWidget
{
public:
	class UTslHealthGaugeData*                         LifeGaugeColorData;                                       // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      LifeGaugeImageBinder;                                     // 0x03C0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       LifeGaugeRatioValueParamName;                             // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LifeGaugeColorParamName;                                  // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      HealAmountImageBinder;                                    // 0x03F8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Overlay                    HitEffectLayer;                                           // 0x0420(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       HealAmountRatioValueParamName;                            // 0x0448(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       HealAmountRatioSartParamName;                             // 0x0450(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       HealAmountRatioEndParamName;                              // 0x0458(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       HealAmountColorParamName;                                 // 0x0460(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 HealEffectTimeCurve;                                      // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      HitEffectClass;                                           // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Item_Heal_FirstAid;                                       // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Item_Heal_MedKit;                                         // 0x0480(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  WarningAnimationBinder;                                   // 0x0488(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  GroggyAnimationBinder;                                    // 0x04A8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x18];                                      // 0x04C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LifeGaugeBaseWidget");
		return ptr;
	}


	void OnNotifyHit(float Damage);
	void OnNotifyHeal(float StartHealth, float GoalHealth, float MaxHealth);
};


// Class TslGame.LifeGaugeEffectBaseWidget
// 0x00B8 (0x0470 - 0x03B8)
class ULifeGaugeEffectBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET
	struct FName                                       OldLifeRatioParamName;                                    // 0x03C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       CurrentLifeRatioParamName;                                // 0x03D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      LifeEffectBinder;                                         // 0x03D8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_FloatCurve>       LifeEffectAnimationFloatCurveList;                        // 0x0400(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_VectorCurve>      LifeEffectAnimationVectorCurveList;                       // 0x0410(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      LifeEffectBackgroundBinder;                               // 0x0420(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_FloatCurve>       LifeEffectBgAnimationFloatCurveList;                      // 0x0448(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_VectorCurve>      LifeEffectBgAnimationVectorCurveList;                     // 0x0458(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      bAutoDestroyOnEffectPlayFinish : 1;                       // 0x0468(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LifeGaugeEffectBaseWidget");
		return ptr;
	}

};


// Class TslGame.LifeGaugeHitEffectBaseWidget
// 0x0098 (0x0450 - 0x03B8)
class ULifeGaugeHitEffectBaseWidget : public UUmgBaseWidget
{
public:
	TArray<struct FGaugeAlphaCurveType>                AlphaCurveList;                                           // 0x03B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FUmgWidgetBinder_Image                      HitEffectImage;                                           // 0x03C8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FName                                       BaseColorParamName;                                       // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ColorLerpParamName;                                       // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BrightAlphaParamName;                                     // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       HitEffectAlphaParamName;                                  // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       HitEffectStartParamName;                                  // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       HitEffectEndParamName;                                    // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0420(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LifeGaugeHitEffectBaseWidget");
		return ptr;
	}

};


// Class TslGame.LifeGaugeTemplateBaseWidget
// 0x0138 (0x04F0 - 0x03B8)
class ULifeGaugeTemplateBaseWidget : public UUmgBaseWidget
{
public:
	class UTslHealthGaugeData*                         LifeGaugeColorData;                                       // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      LifeGaugeImageBinder;                                     // 0x03C0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       LifeGaugeRatioValueParamName;                             // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LifeGaugeColorParamName;                                  // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  WarningAnimationBinder;                                   // 0x03F8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      BackgroundImageBinder;                                    // 0x0418(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bOverrideLifeGaugeMaterial : 1;                           // 0x0440(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0441(0x0007) MISSED OFFSET
	class UMaterialInterface*                          OverrideLifeGaugeMaterial;                                // 0x0448(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideBackgroundMaterial : 1;                          // 0x0450(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0451(0x0007) MISSED OFFSET
	class UMaterialInterface*                          OverrideBackgroundMaterial;                               // 0x0458(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseEffect : 1;                                           // 0x0460(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	class UClass*                                      DamageEffectClass;                                        // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      HealEffectClass;                                          // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      HealAmountEffectClass;                                    // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Overlay                    EffectLayerBinder;                                        // 0x0480(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	int                                                DamageEffectMax;                                          // 0x04A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                HealEffectMax;                                            // 0x04AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x04B0(0x0018) MISSED OFFSET
	TArray<class ULifeGaugeEffectBaseWidget*>          DamageEffects;                                            // 0x04C8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TArray<class ULifeGaugeEffectBaseWidget*>          HealEffects;                                              // 0x04D8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	class ULifeGaugeEffectBaseWidget*                  HealAmountEffect;                                         // 0x04E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LifeGaugeTemplateBaseWidget");
		return ptr;
	}


	void Update(float Life, float MaxLife, bool bIsGroggy, float HealAmount, bool bDisableEffect, bool bViewTargetChanged);
	void OnDestoryHealEffect(class ULifeGaugeEffectBaseWidget* HealEffect);
	void OnDestoryDamageEffect(class ULifeGaugeEffectBaseWidget* DamageEffect);
	bool HasEffect();
};


// Class TslGame.LocationNameWidget
// 0x0088 (0x0440 - 0x03B8)
class ULocationNameWidget : public UUmgBaseWidget
{
public:
	struct FMapLocationData                            MapLocationData;                                          // 0x03B8(0x0028) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FVector2D                                   MaximumSize;                                              // 0x03E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ScaleDenominator;                                         // 0x03E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     InBorderBinder;                                           // 0x03F0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  LocationNameTextBlockBinder;                              // 0x0420(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LocationNameWidget");
		return ptr;
	}

};


// Class TslGame.MapCaptureAreaWidget
// 0x0118 (0x04D0 - 0x03B8)
class UMapCaptureAreaWidget : public UUmgBaseWidget
{
public:
	struct FCaptureObjectWidgetData                    CaptureObjectWidgetData;                                  // 0x03B8(0x0108) (CPF_Edit)
	class ACaptureAreaActor*                           CaptureArea;                                              // 0x04C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MapCaptureAreaWidget");
		return ptr;
	}


	void OnTryingTeamChanged(int TryingTeamId);
};


// Class TslGame.MapCarePackageItemIconBaseWidget
// 0x0080 (0x0438 - 0x03B8)
class UMapCarePackageItemIconBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     IconImageBorderBinder;                                    // 0x03B8(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x03E8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       IconStateParamName;                                       // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       IconColorParamName;                                       // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0420(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MapCarePackageItemIconBaseWidget");
		return ptr;
	}


	struct FEventReply OnButtonDown(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent);
};


// Class TslGame.MapCharacterIconBaseWidget
// 0x0420 (0x07D8 - 0x03B8)
class UMapCharacterIconBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     IconImageBorderBinder;                                    // 0x03B8(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x03E8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_ScaleBox                   IconScaleBoxBinder;                                       // 0x0410(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       IconStateParamName;                                       // 0x0438(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       IconRotationParamName;                                    // 0x0440(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       IconColorParamName;                                       // 0x0448(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Border                     PlayerNameBoderBinder;                                    // 0x0450(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameBinder;                                         // 0x0480(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Overlay                    NameTagOverlayBinder;                                     // 0x04A0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     ObserverMuzzleFlashBoderBinder;                           // 0x04C8(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_UserWidget                 ObserverMuzzleFlashWidgetBinder;                          // 0x04F8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     LifeGaugeBorderBinder;                                    // 0x0518(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeWidgetBinder;                                    // 0x0548(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AttackedAnimBinder;                                       // 0x0568(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  HittedAnimBinder;                                         // 0x0588(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  GroggyAnimBinder;                                         // 0x05A8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimBinder;                                        // 0x05C8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     ButtonBInder;                                             // 0x05E8(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     TeamIconBorderBinder;                                     // 0x0618(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamIconImageBinder;                                      // 0x0648(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Spacer                     BackgroundSpacerBinder;                                   // 0x0670(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0690(0x0010) MISSED OFFSET
	unsigned char                                      bTeamNumber : 1;                                          // 0x06A0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x06A1(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TeamNumberText;                                           // 0x06A8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Overlay                    RiderLayerBinder;                                         // 0x06C8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	class UClass*                                      RiderIconClass;                                           // 0x06F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FText                                       DisplayNameFormatWithOtherPlayer;                         // 0x06F8(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	class UTexture*                                    MyDirectionIcon;                                          // 0x0710(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    TeamDirectionIcon;                                        // 0x0718(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Border                     SpectatedIconBorder;                                      // 0x0720(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      NameTagColorImageBinder;                                  // 0x0750(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	TArray<class UTexture2D*>                          TeamBackgroundImages;                                     // 0x0778(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0788(0x0018) MISSED OFFSET
	struct FVector2D                                   CachedPosition_MC;                                        // 0x07A0(0x0008) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x07A8(0x0008) MISSED OFFSET
	class UMaterialInterface*                          PendingIconMaterial;                                      // 0x07B0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class URiderIconWidget*>                    RiderIconList;                                            // 0x07B8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	class UTexture2D*                                  CachedTeamIcon;                                           // 0x07C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x07D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MapCharacterIconBaseWidget");
		return ptr;
	}


	void UpdateShowType(bool bShowIcon, bool bShowName);
	struct FEventReply OnButtonDown(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent);
};


// Class TslGame.MapGridWidget
// 0x0818 (0x0BD0 - 0x03B8)
class UMapGridWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      MapImageBinder;                                           // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                AircraftRouteLayerBinder;                                 // 0x03E0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                LocationNameLayerBinder;                                  // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                MyMarkerLayerBinder;                                      // 0x0430(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                TeamMarkerLayerBinder;                                    // 0x0458(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UClass*                                      MapMarkerClass;                                           // 0x0480(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      LastCircleMarkImageBinder;                                // 0x0488(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                MyMapIconLayerBinder;                                     // 0x04B0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                OtherMapIconLayerBinder;                                  // 0x04D8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CarePackageItemIconLayerBinder;                           // 0x0500(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                FlareGunDropZoneLayerBinder;                              // 0x0528(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                TeamIconsAtCenterOfMassLayerBinder;                       // 0x0550(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UClass*                                      MapCharacterIconClass;                                    // 0x0578(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      MapCarePackageItemIconClass;                              // 0x0580(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      ObserverPlayerIconHitEffectClass;                         // 0x0588(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      LocationNameWidgetClass;                                  // 0x0590(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowAircraftRoute : 1;                                   // 0x0598(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0599(0x0003) MISSED OFFSET
	float                                              AircraftRouteArrowHeadDesiredSizeRatio;                   // 0x059C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AircraftRouteArrowTailDesiredSizeRatio;                   // 0x05A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AircraftIconDesiredSizeRatio;                             // 0x05A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstance*                           ImageRotatorMaterial;                                     // 0x05A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstance*                           AircraftRouteArrowBodyMaterial;                           // 0x05B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstance*                           CombatAircraftRouteArrowBodyMaterial;                     // 0x05B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    AircraftRouteArrowHeadTexture;                            // 0x05C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    AircraftRouteArrowTailTexture;                            // 0x05C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    AircraftBombDropRouteTexture;                             // 0x05D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    AircraftRouteTexture;                                     // 0x05D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    AircraftTexture;                                          // 0x05E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ImageRotatorTextureParamName;                             // 0x05E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       AircraftRouteTextureParamName;                            // 0x05F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ImageRotatorAngleParamName;                               // 0x05F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ArrowStartXParamName;                                     // 0x0600(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ArrowStartYParamName;                                     // 0x0608(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ArrowEndXParamName;                                       // 0x0610(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ArrowEndYParamName;                                       // 0x0618(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       CurrentPositionXParamName;                                // 0x0620(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       CurrentPositionYParamName;                                // 0x0628(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       AircraftOnRouteParamName;                                 // 0x0630(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bShowNameIfNonObserving : 1;                              // 0x0638(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowNameIfObserving : 1;                                 // 0x0639(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsMinimap : 1;                                           // 0x063A(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bFillBluezone : 1;                                        // 0x063B(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDrawNextPlayzoneLine : 1;                                // 0x063C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDrawBluezoneLine : 1;                                    // 0x063D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x063E(0x0002) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      RedzoneImageBinder;                                       // 0x0640(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FName                                       RedzoneColorParamName;                                    // 0x0668(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FColorBlindColorSet                         RedzoneColorSet;                                          // 0x0670(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      ReplayzoneImageBinder;                                    // 0x0680(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    ImageSizeBoxBinder;                                       // 0x06A8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FColorBlindColorSet                         BluezoneColorSet;                                         // 0x06D0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	float                                              BluezoneDesaturation;                                     // 0x06E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Desaturation;                                             // 0x06E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Contrast;                                                 // 0x06E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowTeamIconAtCenterOfMass : 1;                          // 0x06EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x06ED(0x0003) MISSED OFFSET
	TArray<float>                                      TeamIconAtCenterOfMassDesiredRatioByPhase;                // 0x06F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              TeamIconAtCenterOfMassDesiredAlpha;                       // 0x0700(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowFlareGunDropZone : 1;                                // 0x0704(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0705(0x0003) MISSED OFFSET
	class UMaterial*                                   FlareGunDropZoneMaterial;                                 // 0x0708(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FlareGunDropZoneIconScale;                                // 0x0710(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0714(0x0004) MISSED OFFSET
	struct FColorBlindColorSet                         FlareGunDropZoneColorSet;                                 // 0x0718(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UCurveFloat*                                 FlareGunAlphaCurve;                                       // 0x0728(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FlareGunAlphaCurveLength;                                 // 0x0730(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x1C];                                      // 0x0734(0x001C) MISSED OFFSET
	class UDataTable*                                  LocationZoomTable;                                        // 0x0750(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowLocationName : 1;                                    // 0x0758(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0759(0x0003) MISSED OFFSET
	float                                              ZoomLevel;                                                // 0x075C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShowGridZoomLevel;                                        // 0x0760(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0764(0x0004) MISSED OFFSET
	class UCurveFloat*                                 ViewRatioCurve;                                           // 0x0768(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRectangleViewMode : 1;                                   // 0x0770(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0771(0x0007) MISSED OFFSET
	class UFont*                                       GridFont;                                                 // 0x0778(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       FontTypeFace;                                             // 0x0780(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FString>                             GridTextHorizentalArray;                                  // 0x0788(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FString>                             GridTextVerticalArray;                                    // 0x0798(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FLinearColor                                ColorLargeGrid;                                           // 0x07A8(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                ColorSmallGrid;                                           // 0x07B8(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                ColorText;                                                // 0x07C8(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                ColorSafetyZone;                                          // 0x07D8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	float                                              ThicknessLargeGrid;                                       // 0x07E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ThicknessSmallGrid;                                       // 0x07EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                ColorPoisonGasWarning;                                    // 0x07F0(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	unsigned char                                      bDrawGridLine : 1;                                        // 0x0800(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDrawGridText : 1;                                        // 0x0801(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDrawNextPlayzoneGuideLine : 1;                           // 0x0802(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseZOrderSort : 1;                                       // 0x0803(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRemoveDeadIcon : 1;                                      // 0x0804(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0805(0x0003) MISSED OFFSET
	struct FLinearColor                                DefaultCharacterIconColor;                                // 0x0808(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultIconNameTagColor;                                  // 0x0818(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FVector2D                                   MinimapViewSize_MC;                                       // 0x0828(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	float                                              PlatoonMapCharacterIconScale;                             // 0x0830(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x24];                                      // 0x0834(0x0024) MISSED OFFSET
	class UMaterialInstanceDynamic*                    MatInst;                                                  // 0x0858(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x18];                                      // 0x0860(0x0018) MISSED OFFSET
	class UMapMarkerBaseWidget*                        MyMapMarker;                                              // 0x0878(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TMap<class ATeam*, class UMapMarkerBaseWidget*>    TeamPlayerMarkers;                                        // 0x0880(0x0050) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FAircraftRouteData>                  AircraftRouteDataArray;                                   // 0x08D0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FAircraftRouteData>                  CombatAircraftRouteDataArray;                             // 0x08E0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UMapCharacterIconBaseWidget*                 MyCharacterMapIcon;                                       // 0x08F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TMap<struct FString, class UMapCharacterIconBaseWidget*> OtherCharacterMapIcons;                                   // 0x08F8(0x0050) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TMap<class ACarePackageItem*, class UMapCarePackageItemIconBaseWidget*> MapCarePackageItemIcons;                                  // 0x0948(0x0050) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	struct FTimerHandle                                ReplicatedCharacterListUpdateTimer;                       // 0x0998(0x0008) (CPF_Transient)
	struct FTimerHandle                                ReplicatedCarePackageItemListUpdateTimer;                 // 0x09A0(0x0008) (CPF_Transient)
	TArray<class ATslCharacter*>                       ReplicatedCharacterList;                                  // 0x09A8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ACarePackageItem*>                    ReplicatedCarePackageItemList;                            // 0x09B8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATeam*>                               ShowMarkerOnwerList;                                      // 0x09C8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ULocationNameWidget*>                 LocationNameWidgetList;                                   // 0x09D8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TMap<int, class UImage*>                           TeamIconsAtCenterOfMassList;                              // 0x09E8(0x0050) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	struct FVector2D                                   LocalMousePosition;                                       // 0x0A38(0x0008) (CPF_Transient, CPF_IsPlainOldData)
	struct FVector2D                                   MCMousePosition;                                          // 0x0A40(0x0008) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x20];                                      // 0x0A48(0x0020) MISSED OFFSET
	TArray<struct FFlareGunPackageDropZoneData>        FlareGunPackageDropZoneArray;                             // 0x0A68(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData13[0x60];                                      // 0x0A78(0x0060) MISSED OFFSET
	class UMaterialInstance*                           MyOrTeamIconMaterial;                                     // 0x0AD8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstance*                           OtherCharacterIconMaterial;                               // 0x0AE0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialParameterCollection*                MaterialParameterCollection;                              // 0x0AE8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    CloseMySelf;                                              // 0x0AF0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHideOwner;                                              // 0x0B00(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FUmgWidgetBinder_CanvasPanel                OutsideIconLayerBinder;                                   // 0x0B10(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UClass*                                      OutsideTeamIconWidgetClass;                               // 0x0B38(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<class UOutsideTeamIconWidget*>              OutsideTeamIconWidgets;                                   // 0x0B40(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData14[0x18];                                      // 0x0B50(0x0018) MISSED OFFSET
	struct FUmgWidgetBinder_CanvasPanel                MapCaptureAreaLayerBinder;                                // 0x0B68(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UClass*                                      MapCaptureAreaWidgetClass;                                // 0x0B90(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<class UMapCaptureAreaWidget*>               MapCaptureAreaWidgets;                                    // 0x0B98(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FOutsideTeamIconData>                OutsideTeamIconDatas;                                     // 0x0BA8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0BB8(0x0008) MISSED OFFSET
	TArray<class UMaterialInstanceDynamic*>            OutsideMapIconMaterials;                                  // 0x0BC0(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MapGridWidget");
		return ptr;
	}


	void UpdateZoomAndWidgetSize(float Zoom, const struct FVector2D& WidgetSize);
	bool UpdateWidgetSize_UC(const struct FVector2D& WidgetSize);
	void UpdateReplicatedCharacterList();
	void UpdateReplicatedCarePackageItemList();
	void UpdateRectangleViewByWidgetSize(const struct FVector2D& WidgetSize);
	void UpdateRectangleView();
	void UpdateMapCharacterIconShowType(bool bShowTeamIcon, bool bShowPlayerName);
	void UpdateLocationNameScale(float NewZoom);
	struct FVector2D UCtoMC(const struct FVector2D& UC);
	void SetZoomLevel(float NewZoomLevel);
	void SetImageBrush(class UMaterialInstanceDynamic* NewMatInst);
	void SetCharacterIconPositionAndRotation_UC(const struct FVector2D& Pos_UC, float Angle);
	void SetCenter_MC(const struct FVector2D& Center);
	void ResetZoomLevel();
	void OnMapIconClicked(class UMapCharacterIconBaseWidget* MapIconWidget);
	void OnMapCarePackageItemIconClicked(class UMapCarePackageItemIconBaseWidget* MapIconWidget);
	void OnGotoTimelineDone();
	void OnGameUserSettingApplied();
	void OnCaptureActorActivated(TArray<struct FString> ActivatedCaptureActorNames);
	void NotifyDeath(const struct FString& UniqueId);
	struct FVector2D MCtoUC(const struct FVector2D& MapCoord);
	bool IsMouseInMarker();
	float GetZoomLevel();
	struct FVector2D GetWidgetSize();
	struct FVector2D GetWidgetPosition();
	struct FVector2D GetScreenOffset();
	void GetMapImageWigetSizeAndImageOffset(struct FVector2D* WidgetSize, struct FVector2D* ImageOffset);
	struct FVector2D GetLocalMousePosition();
	struct FString GetCharacterGridVertical();
	struct FString GetCharacterGridTextHorizental();
	struct FVector2D GetAlignment();
	void DrawRedZone_UC(const struct FVector2D& Center_UC, float Radius_UC);
	void DrawMarker_UC(const struct FVector2D& MarkerCenter_UC);
	void CursorUCtoCenterMC(const struct FVector2D& UC, struct FVector2D* Offest_MC, bool* bUpdate);
	struct FVector2D ClampPositionByWidgetSize_UC(const struct FVector2D& Positon, const struct FVector2D& WidgetSize);
	struct FVector2D ClampPosition_UC(const struct FVector2D& Positon);
	void AddCenter_UC(const struct FVector2D& Offset_UC);
};


// Class TslGame.MapMarkerBaseWidget
// 0x0060 (0x0418 - 0x03B8)
class UMapMarkerBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      MarkerImageBinder;                                        // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       MarkerColorParmName;                                      // 0x03E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  MarkerEmergingAnimBinder;                                 // 0x03E8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0408(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MapMarkerBaseWidget");
		return ptr;
	}

};


// Class TslGame.MiniMapBaseWidget
// 0x0060 (0x0418 - 0x03B8)
class UMiniMapBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 MapWidgetBinder;                                          // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UMapGridWidget*                              CachedMapWidget;                                          // 0x03D8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCurveFloat*                                 ViewScale_AccelerationCurve;                              // 0x03E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCurveFloat*                                 ViewScale_DecelerationCurve;                              // 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DefaultViewScale1D;                                       // 0x03F0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ViewScale1DWithoutNextPlayzone;                           // 0x03F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewScaleInterpSpeed;                                     // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CurrentMinimapViewScale1D;                                // 0x03FC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SaveMinimapViewScale1D;                                   // 0x0400(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              OldSpeed;                                                 // 0x0404(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0408(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.MiniMapBaseWidget.WantMinimapFocus
	unsigned char                                      bForceUpdate : 1;                                         // 0x0409(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x040A(0x0002) MISSED OFFSET
	struct FVector2D                                   LastMinimapPos;                                           // 0x040C(0x0008) (CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MiniMapBaseWidget");
		return ptr;
	}

};


// Class TslGame.MinimapCanvasWidget
// 0x0208 (0x05C0 - 0x03B8)
class UMinimapCanvasWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 FlaregunWidgetBinder;                                     // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 BluezoneGpsWidgetBinder;                                  // 0x03D8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                BluezoneGpsRetainerBoxBinder;                             // 0x03F8(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 BluezoneTimeWidgetBinder;                                 // 0x0420(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                BluezoneTimeRetainerBoxBinder;                            // 0x0440(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 BluezonePhaseWidgetBinder;                                // 0x0468(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                BluezonePhaseRetainerBoxBinder;                           // 0x0488(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 CompassWidgetBinder;                                      // 0x04B0(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                CompassRetainerBoxBinder;                                 // 0x04D0(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_UserWidget                 MinimapWidgetBinder;                                      // 0x04F8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                MinimapRetainerBoxBinder;                                 // 0x0518(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_SizeBox                    MinimapSizeBox;                                           // 0x0540(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             BluezoneInfoSwitcherBinder;                               // 0x0568(0x0028) (CPF_Edit)
	TArray<struct FExtendedSizeConfig>                 ExtendedSizeConfigs;                                      // 0x0590(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FExtendedSizeConfig>                 ExtendedSizeConfigsForObserver;                           // 0x05A0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	int                                                DefaultMinimapSizeIndex;                                  // 0x05B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinimapSizeOffset;                                        // 0x05B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SelectMinimapSizeIndex;                                   // 0x05B8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bNeedMinimapSizeUpdate : 1;                               // 0x05BC(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MinimapCanvasWidget");
		return ptr;
	}


	void ToggleExtendedMinimap();
	void ResetMinimapSize();
	void PrevMinimapSize();
	void NextMinimapSize();
	bool IsShowingFlaregunUiWidget();
	bool IsExtendedSize();
	bool IsBluezoneGpsReset();
};


// Class TslGame.NetworkInfoWidget
// 0x0318 (0x06D0 - 0x03B8)
class UNetworkInfoWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_CanvasPanel                NetworkInfoTextCanvasPanel;                               // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PingTextBinder;                                           // 0x03E0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  RecvBytesTextBinder;                                      // 0x0400(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SendBytesTextBinder;                                      // 0x0420(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  RecvPacketsTextBinder;                                    // 0x0440(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SendPacketsTextBinder;                                    // 0x0460(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  RecvPktLossTextBinder;                                    // 0x0480(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SendPktLossTextBinder;                                    // 0x04A0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      HighPingIconBinder;                                       // 0x04C0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      HighPingVariationIconBinder;                              // 0x04E8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      PacketLossIconBinder;                                     // 0x0510(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       PingTextFormat;                                           // 0x0538(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       RecvBytesTextFormat;                                      // 0x0550(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       SendBytesTextFormat;                                      // 0x0568(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       RecvPacketsTextFormat;                                    // 0x0580(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       SendPacketsTextFormat;                                    // 0x0598(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       RecvPktLossTextFormat;                                    // 0x05B0(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       SendPktLossTextFormat;                                    // 0x05C8(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0xF0];                                      // 0x05E0(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NetworkInfoWidget");
		return ptr;
	}

};


// Class TslGame.NetworkProblemBaseWidget
// 0x0020 (0x03D8 - 0x03B8)
class UNetworkProblemBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Animation                  IconBlinkingAnimBinder;                                   // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NetworkProblemBaseWidget");
		return ptr;
	}

};


// Class TslGame.ObserverDamageIndicatorManager
// 0x0018 (0x03D0 - 0x03B8)
class UObserverDamageIndicatorManager : public UUmgBaseWidget
{
public:
	TArray<class UObserverDamageIndicatorWidget*>      PlayerIndicatorWidgets;                                   // 0x03B8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UClass*                                      WidgetTemplate;                                           // 0x03C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageIndicatorManager");
		return ptr;
	}


	void UpdateReplicateCharacter();
	void RemoveReplicateCharacter(TArray<class ATslCharacter*> Characters);
	void OnToggleObserverDamageIndicator();
	void AddReplicateCharacter(TArray<class ATslCharacter*> Characters);
};


// Class TslGame.ObserverDamageIndicatorWidget
// 0x00A8 (0x0460 - 0x03B8)
class UObserverDamageIndicatorWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_CanvasPanel                FreeCamCanvasPanelBinder;                                 // 0x03C8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      DamageInfoWidgetTemplate;                                 // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class ATslCharacter*                               Character;                                                // 0x03F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0400(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageIndicatorWidget");
		return ptr;
	}


	void OnFadeOutAnimationFinished(class UWidget* Widget);
};


// Class TslGame.ObserverDamageInfoWidget
// 0x0158 (0x0510 - 0x03B8)
class UObserverDamageInfoWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    FadeOutAnimationFinished;                                 // 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FUmgWidgetBinder_Border                     TeamColorBorderBinder;                                    // 0x03C8(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DamageAmountTextBinder;                                   // 0x03F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HeadShotSizeBoxBinder;                                    // 0x0418(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeInAnimationBinder;                                    // 0x0440(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimationBinder;                                   // 0x0460(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bFadeOutAnimationPlayStarted : 1;                         // 0x0480(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bFadeOutAnimationFinished : 1;                            // 0x0481(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bFadeInAnimationPlayStarted : 1;                          // 0x0482(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bFadeInAnimationFinished : 1;                             // 0x0483(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	class ATslCharacter*                               Character;                                                // 0x0488(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0490(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageInfoWidget");
		return ptr;
	}


	void UpdateFontColor(const struct FLinearColor& TeamColor);
};


// Class TslGame.ObserverDamageSpectatorDirectionListWidget
// 0x0040 (0x03F8 - 0x03B8)
class UObserverDamageSpectatorDirectionListWidget : public UUmgBaseWidget
{
public:
	TArray<class UObserverDamageSpectatorDirectionWidget*> DamageDirectionPool;                                      // 0x03B8(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	class UClass*                                      WidgetTemplate;                                           // 0x03C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Overlay                    DirectionOverlayBinder;                                   // 0x03D0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageSpectatorDirectionListWidget");
		return ptr;
	}


	void RemoveDamageInfoDirection(class UWidget* Widget);
};


// Class TslGame.ObserverDamageSpectatorDirectionWidget
// 0x0048 (0x0400 - 0x03B8)
class UObserverDamageSpectatorDirectionWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    FadeOutAnimationFinished;                                 // 0x03C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	class UCurveFloat*                                 AnimCurveTranslation;                                     // 0x03D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  AnimationBinder;                                          // 0x03E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageSpectatorDirectionWidget");
		return ptr;
	}

};


// Class TslGame.ObserverDamageSpectatorMessageListWidget
// 0x0058 (0x0410 - 0x03B8)
class UObserverDamageSpectatorMessageListWidget : public UUmgBaseWidget
{
public:
	int                                                MaxMessageSize;                                           // 0x03B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	TArray<class UObserverDamageSpectatorMessageWidget*> DamageInfoMessagePool;                                    // 0x03C0(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<class UObserverDamageSpectatorMessageWidget*> DamageInfoMessageDisplay;                                 // 0x03D0(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	class UClass*                                      WidgetTemplate;                                           // 0x03E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                MessageCanvasPanelBinder;                                 // 0x03E8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageSpectatorMessageListWidget");
		return ptr;
	}


	void RemoveDamageInfoMessage(class UWidget* Widget);
};


// Class TslGame.ObserverDamageSpectatorWidget
// 0x0130 (0x04E8 - 0x03B8)
class UObserverDamageSpectatorWidget : public UUmgBaseWidget
{
public:
	TMap<struct FString, class UObserverDamageSpectatorMessageListWidget*> DamageSpectatorMessageListMap;                            // 0x03B8(0x0050) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TMap<struct FString, class UObserverDamageSpectatorDirectionListWidget*> DamageSpectatorDirectionListMap;                          // 0x0408(0x0050) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FUmgWidgetBinder_Overlay                    DamageDirectionOverlayBinder;                             // 0x0458(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class ATslCharacter*                               CachedCharacter;                                          // 0x0480(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0488(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageSpectatorWidget");
		return ptr;
	}


	void OnToggleObserverDamageSpectator();
};


// Class TslGame.ObserverDamageSpectatorMessageWidget
// 0x02C8 (0x0680 - 0x03B8)
class UObserverDamageSpectatorMessageWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    FadeOutAnimationFinished;                                 // 0x03C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x03D0(0x00A0) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  AnimationBinder;                                          // 0x0470(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamWidgetSwitcher;                                       // 0x0490(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamColorBGImageBinder;                                   // 0x04B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamStripeBGImageBinder;                                  // 0x04E0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamNumberTextBinder;                                     // 0x0508(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamLogoImageBinder;                                      // 0x0528(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              AttackerInfoHorizontalBoxBinder;                          // 0x0550(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AttackerIDTextBinder;                                     // 0x0578(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FDamageSpectatorWidgetBinder                Left;                                                     // 0x0598(0x0070) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FDamageSpectatorWidgetBinder                Right;                                                    // 0x0608(0x0070) (CPF_Edit, CPF_DisableEditOnInstance)
	class UCurveFloat*                                 AnimCurveTranslation;                                     // 0x0678(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverDamageSpectatorMessageWidget");
		return ptr;
	}


	void UpdateStripeTexture(int TeamNumber);
	void StopHeadshotAnimation();
	void PlayHeadshotAnimation();
};


// Class TslGame.ObserverPlayerStatInfoWidget
// 0x00E8 (0x04A0 - 0x03B8)
class UObserverPlayerStatInfoWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03B8(0x0028) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  AvglKillTextBinder;                                       // 0x03E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvglKillRankTextBinder;                                   // 0x0400(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgDamageTextBinder;                                      // 0x0420(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgDamageRankTextBinder;                                  // 0x0440(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgAliveTimeTextBinder;                                   // 0x0460(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgAliveTimeRankTextBinder;                               // 0x0480(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverPlayerStatInfoWidget");
		return ptr;
	}


	void OnToggleObserverPlayerStatInfo();
};


// Class TslGame.ObserverRankingWidget
// 0x0240 (0x05F8 - 0x03B8)
class UObserverRankingWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x03B8(0x0038) MISSED OFFSET
	struct FUmgWidgetBinder_HorizontalBox              HorizontalBoxBinder;                                      // 0x03F0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  RankingTextBinder;                                        // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamNumberTextBinder;                                     // 0x0438(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamShortNameTextBinder;                                  // 0x0458(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ScoreTextBinder;                                          // 0x0478(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  RankingUpTextBinder;                                      // 0x0498(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  RankingDownTextBinder;                                    // 0x04B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamColorImage_Binder;                                    // 0x04D8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamLogoImage_Binder;                                     // 0x0500(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamLogoSwitcherBinder;                                   // 0x0528(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InMotionUpRanking;                                        // 0x0550(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InMotionDownRanking;                                      // 0x0570(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutMotionUpRanking;                                       // 0x0590(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutMotionDownRanking;                                     // 0x05B0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FLinearColor                                RankingUpTextColor;                                       // 0x05D0(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                RankingOriginalTextColor;                                 // 0x05E0(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverRankingWidget");
		return ptr;
	}


	void RefreshRankingUiBP(int TeamId);
};


// Class TslGame.ObserverRankingListWidget
// 0x0070 (0x0428 - 0x03B8)
class UObserverRankingListWidget : public UUmgBaseWidget
{
public:
	TArray<class UObserverRankingWidget*>              ObserverRankingWidgetList;                                // 0x03B8(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InMotionAnimationBinder;                                  // 0x03C8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutMotionAnimationBinder;                                 // 0x03E8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0408(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverRankingListWidget");
		return ptr;
	}

};


// Class TslGame.OutsideTeamIconWidget
// 0x0028 (0x03E0 - 0x03B8)
class UOutsideTeamIconWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.OutsideTeamIconWidget");
		return ptr;
	}

};


// Class TslGame.ReplayProblemBaseWidget
// 0x0080 (0x0438 - 0x03B8)
class UReplayProblemBaseWidget : public UUmgBaseWidget
{
public:
	int                                                CheckElapsedTime;                                         // 0x03B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  IconBlinkingAnimBinder;                                   // 0x03C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  DisplayTextBlock;                                         // 0x03E0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FText                                       DefaultFailureText;                                       // 0x0400(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FText                                       KillcamUnusualMovementText;                               // 0x0418(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0430(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReplayProblemBaseWidget");
		return ptr;
	}

};


// Class TslGame.ResultTitleWidget
// 0x0158 (0x0510 - 0x03B8)
class UResultTitleWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Animation                  MatchFinishAnimationBinder;                               // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Border                     CenterBorderBinder;                                       // 0x03D8(0x0030) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  ResultTextBinder;                                         // 0x0408(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameTextBinder;                                     // 0x0428(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  TotalPlayersTextBinder;                                   // 0x0448(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  FinalRankTextBinder;                                      // 0x0468(0x0020) (CPF_Edit)
	struct FLinearColor                                DefaultBackgroundColor;                                   // 0x0488(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                RedTeamBackgroundColor;                                   // 0x0498(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                BlueTeamBackgroundColor;                                  // 0x04A8(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultTextColor;                                         // 0x04B8(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                PlatoonTextColor;                                         // 0x04C8(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FText                                       BlueTeamWinText;                                          // 0x04D8(0x0018) (CPF_Edit)
	struct FText                                       RedTeamWinText;                                           // 0x04F0(0x0018) (CPF_Edit)
	class UAkAudioEvent*                               PlatoonWinAudio;                                          // 0x0508(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ResultTitleWidget");
		return ptr;
	}


	void OnTotalPlayersTextPrepass();
	void OnPlayerNameTextPrepass();
	void OnFinalRankTextPrepass();
};


// Class TslGame.RiderIconWidget
// 0x0028 (0x03E0 - 0x03B8)
class URiderIconWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      RiderIcon;                                                // 0x03B8(0x0028) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.RiderIconWidget");
		return ptr;
	}

};


// Class TslGame.ScreenIndicatorBaseWidget
// 0x0028 (0x03E0 - 0x03B8)
class UScreenIndicatorBaseWidget : public UUmgBaseWidget
{
public:
	struct FVector2D                                   ScreenEdgeSize;                                           // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FVector2D                                   IndicatorWidgetSize;                                      // 0x03C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x03C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ScreenIndicatorBaseWidget");
		return ptr;
	}

};


// Class TslGame.CaptureObjectIndicatorWidget
// 0x0110 (0x04F0 - 0x03E0)
class UCaptureObjectIndicatorWidget : public UScreenIndicatorBaseWidget
{
public:
	struct FCaptureObjectWidgetData                    CaptureObjectWidgetData;                                  // 0x03E0(0x0108) (CPF_Edit)
	class ACaptureAreaActor*                           CaptureAreaActor;                                         // 0x04E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CaptureObjectIndicatorWidget");
		return ptr;
	}

};


// Class TslGame.SmokeGrenadeIndicatorWidget
// 0x00E8 (0x04C8 - 0x03E0)
class USmokeGrenadeIndicatorWidget : public UScreenIndicatorBaseWidget
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x03E0(0x000C) MISSED OFFSET
	float                                              RemainTime;                                               // 0x03EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	float                                              BlinkGauge;                                               // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShowRemainTime;                                           // 0x03FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShowDistance;                                             // 0x0400(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	class UCurveFloat*                                 SmokeRemainCurve;                                         // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 SmokeScaleByDistance;                                     // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 SmokeAlphaByDistance;                                     // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      SmokeImageBinder;                                         // 0x0420(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    SmokeGaugeOverlay;                                        // 0x0448(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_ScaleBox                   SmokeGrenadeGaugeScaleBox;                                // 0x0470(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     SmokeGrenadeGaugeBorder;                                  // 0x0498(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SmokeGrenadeIndicatorWidget");
		return ptr;
	}


	void PlayToNearlyEmptyAnimation();
};


// Class TslGame.TeamMarkWidget
// 0x0280 (0x0660 - 0x03E0)
class UTeamMarkWidget : public UScreenIndicatorBaseWidget
{
public:
	float                                              OffsetZ;                                                  // 0x03E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParachutingOffsetZ;                                       // 0x03E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DeadMarkInvisibleTime;                                    // 0x03E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DeadMarkInvisibleDistance;                                // 0x03EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimationMaxPercent;                                      // 0x03F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimationMaxDistance;                                     // 0x03F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PlatoonOtherSquadInTeamScale;                             // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   StateSwitcherBinder;                                      // 0x0400(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameTextBinder;                                     // 0x0420(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      OutLineImageBinder;                                       // 0x0440(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DirectionImageBinder;                                     // 0x0468(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      NormalImageBinder;                                        // 0x0490(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      GroggyImageBinder;                                        // 0x04B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DeadImageBinder;                                          // 0x04E0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      VehicleImageBinder;                                       // 0x0508(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ParachuteImageBinder;                                     // 0x0530(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      QuitterImageBinder;                                       // 0x0558(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ImageMarkBorderBinder;                                    // 0x0580(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_ScaleBox                   ScaleBoxBinder;                                           // 0x05B0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class ATeam*                                       TeamMember;                                               // 0x05D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AmingImageAlpha;                                          // 0x05E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ScopingImageAlpha;                                        // 0x05E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AmingTextAlpha;                                           // 0x05E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ScopingTextAlpha;                                         // 0x05EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    GroggyImage;                                              // 0x05F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTexture*                                    VehicleImage;                                             // 0x05F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTexture*                                    ParachuteImage;                                           // 0x0600(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 AnimCurveMarkOpacity;                                     // 0x0608(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 AnimCurveNameOpacity;                                     // 0x0610(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 AnimCurveMarkScale;                                       // 0x0618(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 AnimCurveNameTranslation;                                 // 0x0620(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0628(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TeamMarkWidget");
		return ptr;
	}

};


// Class TslGame.TeamOverallKillCountBaseWidget
// 0x0090 (0x0448 - 0x03B8)
class UTeamOverallKillCountBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TeamOverallKillCountTextBinder;                           // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      TeamIconImageBinder;                                      // 0x03D8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamIconWidgetSwitcher;                                   // 0x0400(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	int                                                TotalKillTextIndex;                                       // 0x0428(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TeamIconImageIndex;                                       // 0x042C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DesiredXStart;                                            // 0x0430(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DesiredXEnd;                                              // 0x0434(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DesiredYStart;                                            // 0x0438(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DesiredYEnd;                                              // 0x043C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LastTeamOverallKillCount;                                 // 0x0440(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bLastWantShow : 1;                                        // 0x0444(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TeamOverallKillCountBaseWidget");
		return ptr;
	}


	int GetLastTeamOverallKillCount();
};


// Class TslGame.TslAlivePlayerInfoWidget
// 0x0108 (0x04C0 - 0x03B8)
class UTslAlivePlayerInfoWidget : public UUmgBaseWidget
{
public:
	class ATslGameState*                               CachedTslGS;                                              // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Border                     ColorOverlay_Binder;                                      // 0x03C0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Warning_Binder;                                           // 0x03F0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Increasing_Binder;                                        // 0x0410(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Decreasing_Binder;                                        // 0x0430(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Default_Binder;                                           // 0x0450(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AdditionalInfo_Binder;                                    // 0x0470(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  SurvivorCount_Binder;                                     // 0x0490(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bIsReplaying : 1;                                         // 0x04B0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsHidden : 1;                                            // 0x04B1(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04B2(0x0002) MISSED OFFSET
	int                                                CurrentCount;                                             // 0x04B4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LastCount;                                                // 0x04B8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAlivePlayerInfoWidget");
		return ptr;
	}


	void OnMatchStarted(bool bIsReconnect);
	void OnAliveCountChanged(int InKillCount);
};


// Class TslGame.AliveHumansInfoWidget
// 0x0000 (0x04C0 - 0x04C0)
class UAliveHumansInfoWidget : public UTslAlivePlayerInfoWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AliveHumansInfoWidget");
		return ptr;
	}


	void OnMatchStarted(bool bIsReconnect);
	void OnAliveCountChanged(int InKillCount);
};


// Class TslGame.AliveZombiesInfoWidget
// 0x0000 (0x04C0 - 0x04C0)
class UAliveZombiesInfoWidget : public UTslAlivePlayerInfoWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AliveZombiesInfoWidget");
		return ptr;
	}


	void OnMatchStarted(bool bIsReconnect);
	void OnAliveCountChanged(int InKillCount);
};


// Class TslGame.TslBaseOptionButtonWidget
// 0x0060 (0x04E0 - 0x0480)
class UTslBaseOptionButtonWidget : public UTslBaseOptionWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0480(0x0008) MISSED OFFSET
	struct FText                                       TitleText;                                                // 0x0488(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FText                                       DescText;                                                 // 0x04A0(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UTslGamepadOptionContentsWidget*             ParentContentsWidget;                                     // 0x04B8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslNaviWidgetComp*                          NaviWidgetComp;                                           // 0x04C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FTslStickInputHelper                        ModificationInputHelper;                                  // 0x04C8(0x000C)
	struct FTslStickInputHelper                        NavigationInputHelper;                                    // 0x04D4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBaseOptionButtonWidget");
		return ptr;
	}


	void UpdateDesign_Normal();
	void UpdateDesign_Focused();
};


// Class TslGame.TslGamepadSliderWidget
// 0x0080 (0x0560 - 0x04E0)
class UTslGamepadSliderWidget : public UTslBaseOptionButtonWidget
{
public:
	float                                              MinValue;                                                 // 0x04E0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValue;                                                 // 0x04E4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValue;                                             // 0x04E8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TimeStemp;                                                // 0x04EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AccelerationMultiplier;                                   // 0x04F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04F4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x04F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ValueText_Binder;                                         // 0x0518(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Slider_Binder;                                            // 0x0538(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0558(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadSliderWidget");
		return ptr;
	}

};


// Class TslGame.TslCrosshairColorSliderWidget
// 0x0000 (0x0560 - 0x0560)
class UTslCrosshairColorSliderWidget : public UTslGamepadSliderWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCrosshairColorSliderWidget");
		return ptr;
	}

};


// Class TslGame.TslGamepadStepperWidget
// 0x00B0 (0x0590 - 0x04E0)
class UTslGamepadStepperWidget : public UTslBaseOptionButtonWidget
{
public:
	struct FScriptMulticastDelegate                    OnRotateLeft;                                             // 0x04E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRotateRight;                                            // 0x04F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TArray<struct FText>                               StepperOptions;                                           // 0x0500(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FString>                             StepperStrings;                                           // 0x0510(0x0010) (CPF_ZeroConstructor)
	int                                                DefaultStepperIndex;                                      // 0x0520(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SelectedIndex;                                            // 0x0524(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x0528(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  StepperText_Binder;                                       // 0x0548(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 StepperCounter_Binder;                                    // 0x0568(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0588(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadStepperWidget");
		return ptr;
	}


	int GetSelectedOptionIndex();
};


// Class TslGame.TslKeyDisplayWidget
// 0x0060 (0x04E0 - 0x0480)
class UTslKeyDisplayWidget : public UTslBaseOptionWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyInputed;                                             // 0x0480(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TArray<class UTslKeyReceiverWidget*>               KeyReceiverWidgets;                                       // 0x0490(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_UserWidget>         KeyReceiverWidgetBinders;                                 // 0x04A0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FName                                       InputName;                                                // 0x04B0(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       CategoryName;                                             // 0x04B8(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FText                                       DisplayText;                                              // 0x04C0(0x0018) (CPF_BlueprintVisible)
	unsigned char                                      bGamepad : 1;                                             // 0x04D8(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAxisInput : 1;                                           // 0x04D9(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04DA(0x0002) MISSED OFFSET
	float                                              AxisScale;                                                // 0x04DC(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyDisplayWidget");
		return ptr;
	}


	void TransferInputEvent(const struct FTslInputKey& TslInputKey);
	void SetupKeyDisplayWidget(const struct FName& InInputName, const struct FText& InDisplayName, const struct FName& InCategoryName, bool InbAxisInput, float InAxisScale, bool InbGamepad);
	void InitializeKeyDisplayWidget(bool bDefault);
	void ApplyKey();
};


// Class TslGame.TslKeyOptionWidget
// 0x0070 (0x04F0 - 0x0480)
class UTslKeyOptionWidget : public UTslBaseOptionWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   ScrollBox_Binder;                                         // 0x0480(0x0020) (CPF_Edit)
	TArray<class UTslKeySettingWidget*>                KeySettingWidgets;                                        // 0x04A0(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor)
	class UClass*                                      MouseSettingWidgetClass;                                  // 0x04B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslBaseOptionWidget*                        MouseSettingWidget;                                       // 0x04B8(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UClass*                                      KeySettingWidgetClass;                                    // 0x04C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      GamePadSettingWidgetClass;                                // 0x04C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslBaseOptionWidget*                        GamePadSettingWidget;                                     // 0x04D0(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<struct FName>                               CategoryOrder;                                            // 0x04D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyOptionWidget");
		return ptr;
	}


	void OnKeyChanged(class UTslKeyDisplayWidget* InKeyDisplayWidget, const struct FTslInputKey& InInputedKey);
	void InitializeKeyAndMouseSetting();
};


// Class TslGame.TslKeySettingWidget
// 0x0070 (0x04F0 - 0x0480)
class UTslKeySettingWidget : public UTslBaseOptionWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyChanged;                                             // 0x0480(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	class UClass*                                      KeyDisplayWidgetClass;                                    // 0x0490(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   KeyScrollBoxBinder;                                       // 0x0498(0x0020) (CPF_Edit)
	TArray<class UTslKeyDisplayWidget*>                KeyDisplayWidgets;                                        // 0x04B8(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor)
	struct FText                                       DisplayText;                                              // 0x04C8(0x0018) (CPF_BlueprintVisible)
	struct FName                                       CategoryName;                                             // 0x04E0(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeySettingWidget");
		return ptr;
	}


	void TransferInputEvent(class UTslKeyDisplayWidget* KeyDisplayWidget, const struct FTslInputKey& TslInputKey);
	void StartupKeySettingWidget(const struct FName& InCategoryName, const struct FText& InDisplayText);
	void SetToDefault();
	void InitializeKeySettingWidget();
};


// Class TslGame.TslBoostGaugeWidget
// 0x0110 (0x04C8 - 0x03B8)
class UTslBoostGaugeWidget : public UUmgBaseWidget
{
public:
	class UMaterialInstanceDynamic*                    MID_Gauge0_21;                                            // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Gauge20_61;                                           // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Gauge60_91;                                           // 0x03C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Gauge90_101;                                          // 0x03D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  VanishingAnimBinder;                                      // 0x03D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  WarningAnimBinder;                                        // 0x03F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  EmergingAnimBinder;                                       // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost0_20ImageBinder;                                     // 0x0438(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost20_60ImageBinder;                                    // 0x0458(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost60_90ImageBinder;                                    // 0x0478(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost90_100ImageBinder;                                   // 0x0498(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	float                                              DisplayingBoost;                                          // 0x04B8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsWarning : 1;                                           // 0x04BC(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsVanished : 1;                                          // 0x04BD(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04BE(0x0002) MISSED OFFSET
	float                                              SaveBoostGauge;                                           // 0x04C0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SaveBoostGaugeMax;                                        // 0x04C4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBoostGaugeWidget");
		return ptr;
	}

};


// Class TslGame.TslBreatheBarWidget
// 0x0180 (0x0538 - 0x03B8)
class UTslBreatheBarWidget : public UUmgBaseWidget
{
public:
	class ATslHUD*                                     TslHudCached;                                             // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslPlayerController*                        TslPlayerControllerCached;                                // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCharacterBreathComponent*                   BreathComponentCached;                                    // 0x03C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   BreathGaugeLayer_Binder;                                  // 0x03D0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      BreathGaugeBG_Binder;                                     // 0x03F0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Breathing_Binder;                                         // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Drowning_Binder;                                          // 0x0438(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Vanishing_Binder;                                         // 0x0458(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Emerging_Binder;                                          // 0x0478(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Cooldown_Binder;                                          // 0x0498(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutOfBreath_Binder;                                       // 0x04B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FName                                       BreathComponentTag;                                       // 0x04D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       CooldownBuffName;                                         // 0x04E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BreathRatioDisplay;                                       // 0x04E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BreathRatio;                                              // 0x04EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LerpTolerance;                                            // 0x04F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LerpTime;                                                 // 0x04F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                BreathImgColor_Less_101;                                  // 0x04F8(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                BreathImgColor_Less_51;                                   // 0x0508(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                BreathImgColor_Less_11;                                   // 0x0518(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               OutOfBreathSound;                                         // 0x0528(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsVanishing : 1;                                         // 0x0530(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEventBound : 1;                                          // 0x0531(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsCooldown : 1;                                          // 0x0532(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBreatheBarWidget");
		return ptr;
	}


	void OnStartBuff(const struct FName& BuffName, bool bStart);
};


// Class TslGame.TslBuffIconListWidget
// 0x00B8 (0x0470 - 0x03B8)
class UTslBuffIconListWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_SizeBox                    RunBuffIconBlock_Binder;                                  // 0x03B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      RunBuffIcon_Binder;                                       // 0x03E0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HealBuffIconBlock_Binder;                                 // 0x0408(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      HealBuffIcon_Binder;                                      // 0x0430(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class UTexture*                                    HealBuffIconTex;                                          // 0x0458(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTexture*                                    RunBuffIconTex;                                           // 0x0460(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SaveBoostPercentage;                                      // 0x0468(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBuffIconListWidget");
		return ptr;
	}


	void UpdateRunBuffIconVisibility(float InBoostPercentage);
	void UpdateRunBuffIcon(float InBoostPercentage);
	void UpdateHealBuffIconVisibility(float InBoostPercentage);
	void UpdateHealBuffIcon(float InBoostPercentage);
	struct FLinearColor GetRunBuffIconOpacity(float InBoostPercentage);
	struct FLinearColor GetHealBuffIconOpacity(float InBoostPercentage);
};


// Class TslGame.TslCastableItemIconHudWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslCastableItemIconHudWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCastableItemIconHudWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslCastableItemIconWidget
// 0x00D0 (0x0488 - 0x03B8)
class UTslCastableItemIconWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B8(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData01[0x1];                                       // 0x03B8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslCastableItemIconWidget.CastableItemType
	unsigned char                                      UnknownData02[0x6];                                       // 0x03BA(0x0006) MISSED OFFSET
	class UTexture*                                    ItemIcon;                                                 // 0x03C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ItemIconRatio;                                            // 0x03C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x03CC(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                NoItemColor;                                              // 0x03DC(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Icon_Binder;                                              // 0x03F0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ItemCountText_Binder;                                     // 0x0410(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     WidgetBorder_Binder;                                      // 0x0430(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    IconSizeBox_Binder;                                       // 0x0460(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCastableItemIconWidget");
		return ptr;
	}


	int GetCastableItemCount();
};


// Class TslGame.TslCastingBarInfoTextWidget
// 0x0100 (0x04B8 - 0x03B8)
class UTslCastingBarInfoTextWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  CastingInfoTextBinder;                                    // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     CastingInfoCancelMsgLayerBinder;                          // 0x03D8(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              CastingInfoCancelMsgBoxBinder;                            // 0x0408(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KeyTextBinder;                                            // 0x0430(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  BlinkingAnimationBinder;                                  // 0x0450(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             CancelKeySwitcherBinder;                                  // 0x0470(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bIsCancelable : 1;                                        // 0x0498(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0499(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCastingBarInfoTextWidget");
		return ptr;
	}

};


// Class TslGame.TslColorPaletteWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslColorPaletteWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslColorPaletteWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslCompassMarkerWidget
// 0x0040 (0x03F8 - 0x03B8)
class UTslCompassMarkerWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      CompassMarkerImageBinder;                                 // 0x03B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	int                                                MarkerNumber;                                             // 0x03E0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              XViewSize;                                                // 0x03E4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShow : 1;                                                // 0x03E8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              CachedX;                                                  // 0x03EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsTeamMatch : 1;                                         // 0x03F0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              DistanceSquared;                                          // 0x03F4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCompassMarkerWidget");
		return ptr;
	}

};


// Class TslGame.TslCompassWidget
// 0x0220 (0x05D8 - 0x03B8)
class UTslCompassWidget : public UUmgBaseWidget
{
public:
	class UMaterialInterface*                          MI_Compass;                                               // 0x03B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Compass;                                              // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      CompassImageBinder;                                       // 0x03C8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MarkerImageBinder;                                        // 0x03F0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    MarkerOverlayBinder;                                      // 0x0418(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    PingOverlayBinder;                                        // 0x0440(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DirectionTextBlockBinder;                                 // 0x0468(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     CompassBorderBinder;                                      // 0x0488(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      CompassMarkerWidgetClass;                                 // 0x04B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      CompassPingWidgetClass;                                   // 0x04C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslCompassMarkerWidget*                     MyCompassMarkerWidget;                                    // 0x04C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UTslCompassMarkerWidget*>             TeamMarkerWidgetsOfTeam;                                  // 0x04D0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	float                                              DivisionLevel;                                            // 0x04E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Offset;                                                   // 0x04E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bClockwise : 1;                                           // 0x04E8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04E9(0x0003) MISSED OFFSET
	float                                              PingShowingTimeSeconds;                                   // 0x04EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TMap<int, struct FDirectionTextData>               OverrideDirectionTextDatas;                               // 0x04F0(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FLinearColor                                DefaultDirectionTextColor;                                // 0x0540(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	int                                                BearingUnit;                                              // 0x0550(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0554(0x0004) MISSED OFFSET
	class UTslCompassMarkerWidget*                     MyCompassPingWidget;                                      // 0x0558(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UTslCompassMarkerWidget*>             PingWidgetsOfTeam;                                        // 0x0560(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	float                                              Width;                                                    // 0x0570(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsInitilzed : 1;                                         // 0x0574(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0575(0x0003) MISSED OFFSET
	float                                              CompassYaw;                                               // 0x0578(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastCompassParam;                                         // 0x057C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastCompassYaw;                                           // 0x0580(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LastCharacterLocation;                                    // 0x0584(0x000C) (CPF_IsPlainOldData)
	TArray<struct FVector2D>                           LastMapMarkerPositions;                                   // 0x0590(0x0010) (CPF_ZeroConstructor)
	struct FVector2D                                   LastMyMapMarkerPosition;                                  // 0x05A0(0x0008) (CPF_IsPlainOldData)
	TArray<struct FVector2D>                           LastPingPositions;                                        // 0x05A8(0x0010) (CPF_ZeroConstructor)
	struct FVector2D                                   LastMyPingPosition;                                       // 0x05B8(0x0008) (CPF_IsPlainOldData)
	class ATslCharacter*                               LastViewTargetCharacter;                                  // 0x05C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslCharacter*                               CurrViewTargetCharacter;                                  // 0x05C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCompassChanged : 1;                                      // 0x05D0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCompassWidget");
		return ptr;
	}


	class UTslCompassMarkerWidget* CreateCompassPingWidget(int Num);
	class UTslCompassMarkerWidget* CreateCompassMarkerWidget(int Num);
};


// Class TslGame.TslConfirmationDialogWidget
// 0x00E8 (0x04A0 - 0x03B8)
class UTslConfirmationDialogWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0xE8];                                      // 0x03B8(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConfirmationDialogWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslConsoleGuideWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslConsoleGuideWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslConsoleGuideWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslDetailReportCauseCheckBox
// 0x0060 (0x0418 - 0x03B8)
class UTslDetailReportCauseCheckBox : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  DescriptionBinder;                                        // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CheckBoxBinder;                                           // 0x03D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03F8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDetailReportCauseCheckBox");
		return ptr;
	}


	void SetDetailCauseData(const struct FReportDetailCauseTypeDescription& DetailCauseDes);
	bool IsChecked();
	void GetDetailCauseType();
};


// Class TslGame.TslDetailReportCauseMgrWidget
// 0x0050 (0x0408 - 0x03B8)
class UTslDetailReportCauseMgrWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TextBlockBinder;                                          // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                ListBorderBinder;                                         // 0x03D8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class UClass*                                      ReportCauseTemplate;                                      // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDetailReportCauseMgrWidget");
		return ptr;
	}


	void UpdateDetailCause();
	void GetSelectedDetailReportCauseList();
};


// Class TslGame.TslEquipmentWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslEquipmentWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEquipmentWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslGameOptionDetailWidget
// 0x0118 (0x04D0 - 0x03B8)
class UTslGameOptionDetailWidget : public UUmgBaseWidget
{
public:
	struct FTslGameOptionSupplementaryData             RecentSupplementaryData;                                  // 0x03B8(0x0028) (CPF_Transient)
	struct FUmgWidgetBinder_TextBlock                  DisplayNameText_Binder;                                   // 0x03E0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DescriptionText_Binder;                                   // 0x0400(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DetailedDescriptionText_Binder;                           // 0x0420(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SupplementaryWidgetSizeBox_Binder;                        // 0x0440(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SupplementaryWidgetSwitcher_Binder;                       // 0x0460(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0480(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslGameOptionDetailWidget.SupplementaryWidgetClasses

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionDetailWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionItemDropDownListSelectableWidget
// 0x0088 (0x0440 - 0x03B8)
class UTslGameOptionItemDropDownListSelectableWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bTitle : 1;                                               // 0x03B8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bSelected : 1;                                            // 0x03B9(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03BA(0x0006) MISSED OFFSET
	class UTslGameOptionItemDropDownListWidget*        Owner;                                                    // 0x03C0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  DisplayText_Binder;                                       // 0x03C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CheckImage_Binder;                                        // 0x03E8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FLinearColor                                NormalColor;                                              // 0x0410(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                HighlightColor;                                           // 0x0420(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                SelectedColor;                                            // 0x0430(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemDropDownListSelectableWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionItemKeyBinderSlotWidget
// 0x0128 (0x04E0 - 0x03B8)
class UTslGameOptionItemKeyBinderSlotWidget : public UUmgBaseWidget
{
public:
	TArray<struct FKey>                                AvailableMouseButtons;                                    // 0x03B8(0x0010) (CPF_ZeroConstructor)
	class UTslGameOptionItemKeyBinderWidget*           Owner;                                                    // 0x03C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                SlotIndex;                                                // 0x03D0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHighlighted : 1;                                         // 0x03D4(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bFocused : 1;                                             // 0x03D5(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDetectingInput : 1;                                      // 0x03D6(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bKeyDetected : 1;                                         // 0x03D7(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FKey>                                KeyStack;                                                 // 0x03D8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FTslInputKey                                BuildUp;                                                  // 0x03E8(0x0020) (CPF_Transient)
	struct FTslInputKey                                InputKeyAssigned;                                         // 0x0408(0x0020) (CPF_Transient)
	unsigned char                                      bForceToUseLeftModifierKeys : 1;                          // 0x0428(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0429(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     InputKeyDisplayBorder_Binder;                             // 0x0430(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InputKeyIconizer_Binder;                                  // 0x0460(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Highlighter_Binder;                                       // 0x0480(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FLinearColor                                BackgroundColorNormal;                                    // 0x04A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                BackgroundColorHighlighted;                               // 0x04B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                BackgroundColorFocused;                                   // 0x04C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnKeyBinderSlotValueChangeEvent;                          // 0x04D0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemKeyBinderSlotWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionItemStepperIndicatorWidget
// 0x00A8 (0x0460 - 0x03B8)
class UTslGameOptionItemStepperIndicatorWidget : public UUmgBaseWidget
{
public:
	class UTslGameOptionItemStepperWidget*             Owner;                                                    // 0x03B8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                Index;                                                    // 0x03C0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_SizeBox                    SizeBox_Binder;                                           // 0x03C8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Button_Binder;                                            // 0x03F0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     InnerBorder_Binder;                                       // 0x0410(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FLinearColor                                ColorNormal;                                              // 0x0440(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                ColorHighlighted;                                         // 0x0450(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemStepperIndicatorWidget");
		return ptr;
	}


	void OnClicked();
};


// Class TslGame.TslGameOptionItemDropDownListWidget
// 0x00B0 (0x0528 - 0x0478)
class UTslGameOptionItemDropDownListWidget : public UTslGameOptionItemWidget
{
public:
	unsigned char                                      bHighlighted : 1;                                         // 0x0478(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bComboBoxOpened : 1;                                      // 0x0479(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x047A(0x0002) MISSED OFFSET
	int                                                InitialDropDownListIndex;                                 // 0x047C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurrIndex;                                                // 0x0480(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	TArray<struct FTslGameOptionItemStepperData>       DropDownListData;                                         // 0x0488(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UTslGameOptionItemDropDownListSelectableWidget* CachedContentWidget;                                      // 0x0498(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UTslGameOptionItemDropDownListSelectableWidget*> CachedSelectableWidgets;                                  // 0x04A0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	int                                                LastGeneratedIndex;                                       // 0x04B0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04B4(0x0004) MISSED OFFSET
	class UStringTable*                                DropDownListStringTable;                                  // 0x04B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UStringTable*                                DropDownListDetailedStringTable;                          // 0x04C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   DropDownList_Binder;                                      // 0x04C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DownArrowImage_Binder;                                    // 0x04E8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UClass*                                      DropDownListSelectableWidgetClass;                        // 0x0510(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnDropDownListSelectionChangeEvent;                       // 0x0518(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemDropDownListWidget");
		return ptr;
	}


	class UWidget* OnGenerateWidget(const struct FString& KeyStr);
	void OnComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);
	void OnComboBoxOpening();
	void OnComboBoxClosing();
};


// Class TslGame.TslGameOptionItemSliderWidget
// 0x0080 (0x04F8 - 0x0478)
class UTslGameOptionItemSliderWidget : public UTslGameOptionItemWidget
{
public:
	float                                              InitialSliderRawValue;                                    // 0x0478(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x047C(0x0004) MISSED OFFSET
	struct FText                                       DetailedDescriptionText;                                  // 0x0480(0x0018) (CPF_Transient)
	struct FVector2D                                   OptValueRange;                                            // 0x0498(0x0008) (CPF_Transient, CPF_IsPlainOldData)
	int                                                OptValueTextPrecision;                                    // 0x04A0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsAdjustingSlider : 1;                                   // 0x04A4(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsEditingText : 1;                                       // 0x04A5(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04A6(0x0002) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Slider_Binder;                                            // 0x04A8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SliderEditableValueText_Binder;                           // 0x04C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnSliderValueChangeEvent;                                 // 0x04E8(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemSliderWidget");
		return ptr;
	}


	void OnSliderValueTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod);
	void OnSliderValueTextChanged(const struct FText& Text);
	void OnSliderValueChanged(float MappedValue);
	void OnSliderAdjustmentEnd();
	void OnSliderAdjustmentBegin();
};


// Class TslGame.TslGameOptionItemStepperWidget
// 0x00E0 (0x0558 - 0x0478)
class UTslGameOptionItemStepperWidget : public UTslGameOptionItemWidget
{
public:
	unsigned char                                      bRotatable : 1;                                           // 0x0478(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bHighlighted : 1;                                         // 0x0479(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x047A(0x0002) MISSED OFFSET
	int                                                InitialStepperIndex;                                      // 0x047C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurrIndex;                                                // 0x0480(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	TArray<struct FTslGameOptionItemStepperData>       StepperData;                                              // 0x0488(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UStringTable*                                StepperStringTable;                                       // 0x0498(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UStringTable*                                StepperDetailedStringTable;                               // 0x04A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  StepperText_Binder;                                       // 0x04A8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              StepperIndicatorHorizontalBox_Binder;                     // 0x04C8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UClass*                                      StepperIndicatorWidgetClass;                              // 0x04F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   LeftArrowButton_Binder;                                   // 0x04F8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RightArrowButton_Binder;                                  // 0x0518(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              TotalStepperIndicatorWidthLengthLimit;                    // 0x0538(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StepperIndicatorWidth;                                    // 0x053C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StepperIndicatorHorizontalMargin;                         // 0x0540(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0544(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStepperValueChangeEvent;                                // 0x0548(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionItemStepperWidget");
		return ptr;
	}


	void OnRightArrowButtonClicked();
	void OnLeftArrowButtonClicked();
};


// Class TslGame.TslGameOptionSupplementaryWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslGameOptionSupplementaryWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionSupplementaryWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslGameOptionSupplementaryPreviewImageWidget
// 0x0078 (0x0430 - 0x03B8)
class UTslGameOptionSupplementaryPreviewImageWidget : public UTslGameOptionSupplementaryWidget
{
public:
	TMap<struct FString, class UTexture2D*>            PreviewImageTextures;                                     // 0x03B8(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Image_Binder;                                             // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionSupplementaryPreviewImageWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionSupplementaryPreviewCrosshairWidget
// 0x0028 (0x03E0 - 0x03B8)
class UTslGameOptionSupplementaryPreviewCrosshairWidget : public UTslGameOptionSupplementaryWidget
{
public:
	struct FUmgWidgetBinder_Image                      Crosshair_Binder;                                         // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionSupplementaryPreviewCrosshairWidget");
		return ptr;
	}

};


// Class TslGame.TslGameOptionSupplementaryMicrophoneVolumeUnitMeterWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslGameOptionSupplementaryMicrophoneVolumeUnitMeterWidget : public UTslGameOptionSupplementaryWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionSupplementaryMicrophoneVolumeUnitMeterWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslGameOptionTabLabelWidget
// 0x0090 (0x0448 - 0x03B8)
class UTslGameOptionTabLabelWidget : public UUmgBaseWidget
{
public:
	struct FName                                       BoundTabName;                                             // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   LabelButton_Binder;                                       // 0x03C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  LabelText_Binder;                                         // 0x03E0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              HighlightDecoration_Binder;                               // 0x0400(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FLinearColor                                LabelTextColor;                                           // 0x0428(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0438(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionTabLabelWidget");
		return ptr;
	}


	void OnLabelButtonClicked();
};


// Class TslGame.TslGameOptionTabSelectorWidget
// 0x0038 (0x03F0 - 0x03B8)
class UTslGameOptionTabSelectorWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      TabLabelWidgetClass;                                      // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_HorizontalBox              TabLabelWidgetsBox_Binder;                                // 0x03C0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              LabelIntervalWidth;                                       // 0x03E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOptionTabSelectorWidget");
		return ptr;
	}

};


// Class TslGame.TslGamepadHudWidget
// 0x00B8 (0x0470 - 0x03B8)
class UTslGamepadHudWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   CharacterCanvasBinder;                                    // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            KeyHintIBBinder;                                          // 0x03D8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            ReloadingGuideIBBinder;                                   // 0x0400(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 KeyHintBinder;                                            // 0x0428(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 ReloadingGuideBinder;                                     // 0x0448(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadHudWidget");
		return ptr;
	}


	void RuntimeInit_Implementation();
	void OnStanceChanged(TEnumAsByte<EStanceMode> OldStance, TEnumAsByte<EStanceMode> NewStance);
	void OnPossessPawnChanged();
	void NotifyWeaponUnarmed(bool bIsUnarmed);
	void NotifyReloadingNeed();
};


// Class TslGame.TslGamepadKeyGuideWidget
// 0x0028 (0x03E0 - 0x03B8)
class UTslGamepadKeyGuideWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             ContentsSwitcher_Binder;                                  // 0x03B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadKeyGuideWidget");
		return ptr;
	}

};


// Class TslGame.TslGamepadKeyHintSet
// 0x0070 (0x0428 - 0x03B8)
class UTslGamepadKeyHintSet : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGamepadKeyHintSet.KeyHintType
	unsigned char                                      UnknownData01[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	TArray<struct FHintKeyInfo>                        HintKeys_1;                                               // 0x03C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FHintKeyInfo>                        HintKeys_2;                                               // 0x03D0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	class UClass*                                      KeyHintContentClass;                                      // 0x03E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HintVerticalBox_Binder;                                   // 0x03E8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HintAnimation_Binder;                                     // 0x0408(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadKeyHintSet");
		return ptr;
	}

};


// Class TslGame.TslGamepadKeyHintContentWidget
// 0x0060 (0x0418 - 0x03B8)
class UTslGamepadKeyHintContentWidget : public UUmgBaseWidget
{
public:
	struct FKey                                        FirstKey;                                                 // 0x03B8(0x0018) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FKey                                        SecondKey;                                                // 0x03D0(0x0018) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FText                                       DisplayName;                                              // 0x03E8(0x0018) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0400(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGamepadKeyHintContentWidget.ResponseType
	unsigned char                                      bHideInProneStance : 1;                                   // 0x0401(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHideInSeatStance : 1;                                    // 0x0402(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0403(0x0005) MISSED OFFSET
	TArray<struct FTslKeyIconData>                     KeyIconDatas;                                             // 0x0408(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadKeyHintContentWidget");
		return ptr;
	}


	void UpdateDesign_Normal();
};


// Class TslGame.TslGamepadOptionDescWidget
// 0x0040 (0x03F8 - 0x03B8)
class UTslGamepadOptionDescWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DescText_Binder;                                          // 0x03D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionDescWidget");
		return ptr;
	}

};


// Class TslGame.TslGamepadOptionSeparator
// 0x0038 (0x03F0 - 0x03B8)
class UTslGamepadOptionSeparator : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03B8(0x0018) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x03D0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadOptionSeparator");
		return ptr;
	}

};


// Class TslGame.TslGroggyCircleWidget
// 0x0060 (0x0418 - 0x03B8)
class UTslGroggyCircleWidget : public UUmgBaseWidget
{
public:
	class UMaterialInstanceDynamic*                    MID_ProgressCircle;                                       // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          MI_ProgressCircle;                                        // 0x03C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      CircleImageBinder;                                        // 0x03C8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CrossImageBinder;                                         // 0x03F0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGroggyCircleWidget");
		return ptr;
	}

};


// Class TslGame.TslHealItemSelectorWidget
// 0x0068 (0x0420 - 0x03B8)
class UTslHealItemSelectorWidget : public UUmgBaseWidget
{
public:
	class AInventory*                                  InventoryCached;                                          // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FTimerHandle                                HealItemSelectorTimer;                                    // 0x03C0(0x0008)
	struct FTimerHandle                                WidgetHideTimer;                                          // 0x03C8(0x0008)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03D0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslHealItemSelectorWidget.LastSelectedHealItemType
	unsigned char                                      UnknownData01[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET
	TArray<struct FHealItemSelectorData>               HealItemDatas;                                            // 0x03D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ItemIcon_Binder;                                          // 0x03E8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FVector2D                                   InitialPosition;                                          // 0x0410(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	struct FVector2D                                   OffsetWhenTpsWeaponIconEnabled;                           // 0x0418(0x0008) (CPF_Edit, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHealItemSelectorWidget");
		return ptr;
	}


	void OnUseHealItem();
	void OnSelectNextHealItem();
	void OnHideWidget();
	void NotifyHealItemSelectorInput();
};


// Class TslGame.TslHoldButtonWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslHoldButtonWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHoldButtonWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslInGameMenuButton
// 0x0010 (0x03C8 - 0x03B8)
class UTslInGameMenuButton : public UUmgBaseWidget
{
public:
	struct FTslStickInputHelper                        NaviInputHelper;                                          // 0x03B8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslInGameMenuButton");
		return ptr;
	}


	void NotifyOnGamepadUp();
	void NotifyOnGamepadDown();
	void NotifyOnGamepadB();
	void NotifyOnGamepadA();
	void NotifyOnFocusReceived();
};


// Class TslGame.TslPopupInterface
// 0x0000 (0x0028 - 0x0028)
class UTslPopupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPopupInterface");
		return ptr;
	}

};


// Class TslGame.TslInventoryCapacityWidget
// 0x0010 (0x03C8 - 0x03B8)
class UTslInventoryCapacityWidget : public UUmgBaseWidget
{
public:
	float                                              GameMaxSpace;                                             // 0x03B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	class AInventory*                                  InventoryCached;                                          // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslInventoryCapacityWidget");
		return ptr;
	}


	class AInventory* GetInventoryCached();
	void GetFeedbackParamsFromVicinityItem(float CurrMaxSpace, float CurrSpace, float ItemSpace, float* OutFeedbackStart, float* OutFeedbackEnd, bool* OutIsPositive);
	void GetFeedbackParamsFromVicinityEquipment(float CurrMaxSpace, float CurrSpace, class UEquipableItem* EquipableItem, float* OutFeedbackStart, float* OutFeedbackEnd, bool* OutIsPositive);
	void GetFeedbackParamsFromInventoryItem(float CurrMaxSpace, float CurrSpace, float ItemSpace, float* OutFeedbackStart, float* OutFeedbackEnd, bool* OutIsPositive);
	void GetFeedbackParamsFromEquipmentSlot(float CurrMaxSpace, float CurrSpace, class UEquipableItem* EquipableItem, float* OutFeedbackStart, float* OutFeedbackEnd, bool* OutIsPositive);
	void GetCapacityParams(float CurrMaxSpace, float CurrSpace, float* OutCurrMaxSpaceStart, float* OutCurrSpaceStart);
};


// Class TslGame.TslInventorySlotWidget
// 0x0020 (0x03D8 - 0x03B8)
class UTslInventorySlotWidget : public UUmgBaseWidget
{
public:
	TScriptInterface<class USlotInterface>             SlotInterface;                                            // 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    SlotContainerInterface;                                   // 0x03C8(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslInventorySlotWidget");
		return ptr;
	}


	bool IsCharacterCasting();
};


// Class TslGame.TslItemlistSlotWidget
// 0x0000 (0x03D8 - 0x03D8)
class UTslItemlistSlotWidget : public UTslInventorySlotWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslItemlistSlotWidget");
		return ptr;
	}


	bool IsCharacterCasting();
};


// Class TslGame.TslItemListWidget
// 0x0038 (0x03F0 - 0x03B8)
class UTslItemListWidget : public UUmgBaseWidget
{
public:
	TScriptInterface<class USlotContainerInterface>    SlotContainerInterface;                                   // 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FTimerHandle                                TimerHandle_SlotSpawn;                                    // 0x03C8(0x0008) (CPF_Transient)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslItemListWidget");
		return ptr;
	}


	void SetSlotContainerInterface(const TScriptInterface<class USlotContainerInterface>& InSlotContainerInterface);
	void RefreshList();
	void Clear();
};


// Class TslGame.TslKeyboardAndMouseHintSet
// 0x0060 (0x0418 - 0x03B8)
class UTslKeyboardAndMouseHintSet : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslKeyboardAndMouseHintSet.KeyHintType
	unsigned char                                      UnknownData01[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	TArray<struct FKeyboardAndMouseActionAndAxisBindingHintInfo> HintActionAndAxisBindings;                                // 0x03C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	class UClass*                                      KeyHintContentClass;                                      // 0x03D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HintVerticalBox_Binder;                                   // 0x03D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HintAnimation_Binder;                                     // 0x03F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyboardAndMouseHintSet");
		return ptr;
	}

};


// Class TslGame.TslKeyboardAndMouseHintContentWidget
// 0x0080 (0x0438 - 0x03B8)
class UTslKeyboardAndMouseHintContentWidget : public UUmgBaseWidget
{
public:
	struct FTslInputKey                                Key;                                                      // 0x03B8(0x0020) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FTslInputKey                                Key_InvertedAxis;                                         // 0x03D8(0x0020) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bActionBinding : 1;                                       // 0x03F8(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAxisBinding : 1;                                         // 0x03F9(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDummyBinding : 1;                                        // 0x03FA(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03FB(0x0005) MISSED OFFSET
	struct FName                                       BindingName;                                              // 0x0400(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FText                                       HintText;                                                 // 0x0408(0x0018) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bHold : 1;                                                // 0x0420(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRelease : 1;                                             // 0x0421(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHideInProneStance : 1;                                   // 0x0422(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHideInSeatStance : 1;                                    // 0x0423(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	TArray<struct FTslKeyIconData>                     KeyIconDatas;                                             // 0x0428(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyboardAndMouseHintContentWidget");
		return ptr;
	}


	void UpdateDesign_Normal();
	bool IsUsingFunctionKeys();
	bool IsInvertedAxisKeyUsingFunctionKeys();
};


// Class TslGame.TslKeyboardAndMouseHintWidget
// 0x00A0 (0x0458 - 0x03B8)
class UTslKeyboardAndMouseHintWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03B8(0x0028) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   SizeBox_Binder;                                           // 0x03E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            InvalidationBox_Binder;                                   // 0x0400(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   HintSetSwitcher_Binder;                                   // 0x0428(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<struct FTslKeyHintData>                     KeyHintDatas;                                             // 0x0448(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyboardAndMouseHintWidget");
		return ptr;
	}


	void OnWidgetShowChanged(const struct FString& WidgetName, class UObject* OptionalParam, class ATslBaseHUD* BaseHUD, bool bWidgetNewShow);
	void OnStanceChanged(TEnumAsByte<EStanceMode> OldStance, TEnumAsByte<EStanceMode> NewStance);
	void OnPossessPawnChanged();
	void OnMinimapExtentChanged();
	void OnGameUserSettingApplied();
};


// Class TslGame.TslKeyboardWidget
// 0x0078 (0x0430 - 0x03B8)
class UTslKeyboardWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Panel                      KeysPanel_Binder;                                         // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FKey                                        CtrlUnrealKey;                                            // 0x03D8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FKey                                        AltUnrealKey;                                             // 0x03F0(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FKey                                        ShiftUnrealKey;                                           // 0x0408(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TArray<class UTslKeyWidget*>                       KeysOnKeyboard;                                           // 0x0420(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyboardWidget");
		return ptr;
	}

};


// Class TslGame.TslKeyGuideContentWidget
// 0x0068 (0x0420 - 0x03B8)
class UTslKeyGuideContentWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  DescriptionTextBlock_Binder;                              // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              KeyImageHorizontalBox;                                    // 0x03D8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DebugTextBlock_Binder;                                    // 0x0400(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyGuideContentWidget");
		return ptr;
	}

};


// Class TslGame.TslKeyImageWidget
// 0x00B8 (0x0470 - 0x03B8)
class UTslKeyImageWidget : public UUmgBaseWidget
{
public:
	struct FTslInputKey                                DefaultInputKey;                                          // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Panel                      ModifierPanel_Binder;                                     // 0x03D8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ModifierKeyImage_Binder;                                  // 0x03F8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      KeyImage_Binder;                                          // 0x0420(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlusTextBlock_Binder;                                     // 0x0448(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              DesiredWidgetHeight;                                      // 0x0468(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                DesiredPlusTextFontSize;                                  // 0x046C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyImageWidget");
		return ptr;
	}


	void UpdateByInputKey(const struct FTslInputKey& TslInputKey);
};


// Class TslGame.TslKeyReceiverWidget
// 0x00A0 (0x0458 - 0x03B8)
class UTslKeyReceiverWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyReceived;                                            // 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FTslInputKey                                OriginKey;                                                // 0x03C8(0x0020) (CPF_BlueprintVisible)
	struct FKey                                        FirstDownKey;                                             // 0x03E8(0x0018) (CPF_BlueprintVisible)
	struct FTslInputKey                                CurrentDownKey;                                           // 0x0400(0x0020) (CPF_BlueprintVisible)
	struct FTslInputKey                                LastDownedKey;                                            // 0x0420(0x0020) (CPF_BlueprintVisible)
	unsigned char                                      bFocused : 1;                                             // 0x0440(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableInput : 1;                                         // 0x0441(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsKeyUp : 1;                                             // 0x0442(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAxisInput : 1;                                           // 0x0443(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AxisScale;                                                // 0x0444(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FKey>                                MouseButtons;                                             // 0x0448(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyReceiverWidget");
		return ptr;
	}


	void UpdateKeyUp(const struct FKey& InKey);
	void UpdateKeyDown(const struct FKey& InKey);
	void KeyUp(const struct FKey& InKey);
	void KeyDown(const struct FKey& InKey);
	bool IsInputKeyDown();
	struct FText GetLastDownedKeyName();
};


// Class TslGame.TslKeyWidget
// 0x0138 (0x04F0 - 0x03B8)
class UTslKeyWidget : public UUmgBaseWidget
{
public:
	struct FString                                     KeyName;                                                  // 0x03B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FKey                                        MatchingUnrealKey;                                        // 0x03C8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FSlateFontInfo                              KeyNameFont;                                              // 0x03E0(0x0068) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	TEnumAsByte<EVerticalAlignment>                    KeyNameVerticalAlignment;                                 // 0x0448(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EHorizontalAlignment>                  KeyNameHorizontalAlignment;                               // 0x0449(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextJustify>                          KeyNameJustification;                                     // 0x044A(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x044B(0x0001) MISSED OFFSET
	float                                              KeyNameWrapTextAt;                                        // 0x044C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                NonSelectedBorderColor;                                   // 0x0450(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FLinearColor                                SelectedBorderColor;                                      // 0x0460(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FLinearColor                                NonSelectedTextColor;                                     // 0x0470(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FLinearColor                                SelectedTextColor;                                        // 0x0480(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	class UTexture2D*                                  SelectedKeyBorderImage;                                   // 0x0490(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  NonSelectedKeyBorderImage;                                // 0x0498(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSelected : 1;                                            // 0x04A0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  KeyNameTextBlock_Binder;                                  // 0x04A8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      BorderImage_Binder;                                       // 0x04C8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKeyWidget");
		return ptr;
	}


	void SetSelected(bool bInSelected);
	bool IsSelected();
};


// Class TslGame.TslKickPopupWidget
// 0x0090 (0x0448 - 0x03B8)
class UTslKickPopupWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   YesButtonBinder;                                          // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   NoButtonBinder;                                           // 0x03D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CancelTextBinder;                                         // 0x03F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KickQuestionBinder;                                       // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FScriptMulticastDelegate                    ButttonClick;                                             // 0x0438(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKickPopupWidget");
		return ptr;
	}


	void SetPopupWidget(const struct FText& Title, const struct FText& Message, const struct FScriptDelegate& PressedDelegate);
	void OnClickedYesButton();
	void OnClickedNoButtion();
};


// Class TslGame.TslKillMessageHudWidget
// 0x0138 (0x04F0 - 0x03B8)
class UTslKillMessageHudWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      KillMessageTemplate;                                      // 0x03B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      GamePlayMessageTemplate;                                  // 0x03C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SystemMessageTemplate;                                    // 0x03C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      ObserverKillMessageWidget;                                // 0x03D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_InvalidationBox            IconOtherKillMessage_InvalidationBoxBinder;               // 0x03D8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            OtherKillMessage_InvalidationBoxBinder;                   // 0x0400(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            MyKillMessageBox_InvalidationBoxBinder;                   // 0x0428(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 MyKillMessageBoxBinder;                                   // 0x0450(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 OtherKillMessageBinder;                                   // 0x0470(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 IconOtherKillMessageBinder;                               // 0x0490(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<class UUserWidget*>                         KillMessagePool;                                          // 0x04B0(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              MessageShowTimeMax;                                       // 0x04C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MessageDeleteAfterTime;                                   // 0x04C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TWeakObjectPtr<class UTslKillMessageListWidget>    IconOtherKillMessage;                                     // 0x04C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TWeakObjectPtr<class UTslNewMessageBorderWidget>   MyKillMessageBox;                                         // 0x04D0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TWeakObjectPtr<class UTslNewMessageBorderWidget>   OtherKillMessage;                                         // 0x04D8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<struct FKillQueueInfo>                      KillQueueInfo;                                            // 0x04E0(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKillMessageHudWidget");
		return ptr;
	}


	void OnKillCountChanged(int KillCount);
	void OnGameUserSettingApplied();
	void OnDisplayKilledMessage(const struct FDeathMessage& DeathMessage);
	class UTslNewSystemMessageWidget* CreateSystemMessage(const struct FText& Message, const struct FKillMessageSettings& MessageSettings, class UAkAudioEvent* AudioEvent);
	class UTslNewSystemMessageWidget* CreateKillMessage(const struct FDeathMessage& DeathMessage, const struct FKillMessageSettings& KillSettings, bool bShowMyKillCount, bool bUseMessagePool);
	class UTslNewSystemMessageWidget* CreateGamePlayMessage(const struct FText& Message, const struct FKillMessageSettings& MessageSettings, class UAkAudioEvent* AudioEvent);
};


// Class TslGame.TslKillMessageListWidget
// 0x0048 (0x0400 - 0x03B8)
class UTslKillMessageListWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      KillMessageWidgetClass;                                   // 0x03B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_VerticalBox                VerticalBox_Binder;                                       // 0x03C0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<class UTslKillMessageWidget*>               FreeMessageWidgets;                                       // 0x03E8(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              FadeoutStartTime;                                         // 0x03F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bReverseOrder : 1;                                        // 0x03FC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKillMessageListWidget");
		return ptr;
	}


	void TrimKillMessageWidgetArrayByNumLimit(int NewNumLimit);
	void SetKillMessageWidgetClass(class UClass* NewKillMessageClass);
	void ReserveMessageWidgetPool(int Count);
	void OnVanishFinished(class UWidget* Widget);
	void OnListSizeLimitChange();
	void EnqueueDeathMessage(const struct FDeathMessage& DeathMessage);
};


// Class TslGame.TslLoadingScreenPage
// 0x0070 (0x0428 - 0x03B8)
class UTslLoadingScreenPage : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x03B8(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslLoadingScreenPage.DefaultBackgroundsByType
	TAssetPtr<class UTexture2D>                        BackgroundTexturePtr;                                     // 0x0408(0x0020) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLoadingScreenPage");
		return ptr;
	}


	void OnUpdate(const struct FText& Title, const struct FText& Description, class UTexture2D* BackgroundTexture, const struct FLinearColor& BackgroundColor);
};


// Class TslGame.TslLobbyNameTagHudWidget
// 0x0048 (0x0400 - 0x03B8)
class UTslLobbyNameTagHudWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      LobbyNameNameTagWidgetClass;                              // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                CanvasPanel_Binder;                                       // 0x03C0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bUseNameTagOffsetTranslations : 1;                        // 0x03E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET
	TArray<struct FVector>                             NameTagOffsetTranslations;                                // 0x03F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLobbyNameTagHudWidget");
		return ptr;
	}


	void SetNameTagWidget_Internal(int SlotIndex);
	void ResetNameTagWidget_Internal(int SlotIndex);
	class UTslLobbyNameTagWidget* GetNameTagWidget_Internal(int SlotIndex);
};


// Class TslGame.TslLobbyNameTagWidget
// 0x0148 (0x0500 - 0x03B8)
class UTslLobbyNameTagWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  NickName_Binder;                                          // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RankEmblem_Binder;                                        // 0x03D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             VoiceSwitcher_Binder;                                     // 0x03F8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    VoiceSizeBox_Binder;                                      // 0x0420(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HostSizeBox_Binder;                                       // 0x0448(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    StateIconSizeBox_Binder;                                  // 0x0470(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             StateWidgetSwitcher_Binder;                               // 0x0498(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BackgroundBlur_Binder;                                    // 0x04C0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bTestAlwaysShowIcons : 1;                                 // 0x04E0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bHideIfAlone : 1;                                         // 0x04E1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHideStateIconIfAlone : 1;                                // 0x04E2(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHideIdleStateIcon : 1;                                   // 0x04E3(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SlotIndex;                                                // 0x04E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       NameTagSocketName;                                        // 0x04E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     NameTagOffsetTranslation;                                 // 0x04F0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      bIsHost : 1;                                              // 0x04FC(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsReady : 1;                                             // 0x04FD(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSpeaking : 1;                                          // 0x04FE(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsLogout : 1;                                            // 0x04FF(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLobbyNameTagWidget");
		return ptr;
	}


	void UpdateWidgetSwitchers();
	void UpdateWidgetsVisibilities();
	void SetSpeaking(bool InbSpeaking);
	void SetReady(bool InbReady);
	void SetRankEmblem();
	void SetOffsetTranslation(const struct FVector& InOffsetTranslation);
	void SetNickName(const struct FString& InNickName);
	void SetHost(bool InbHost);
	void SetBinding();
	void OnVoiceChatUpdated(const struct FString& InUniqueId, bool InbTeamChannel, bool InbSpeaking, float InEnergy);
	bool IsAlone();
	void InitWidget(const struct FString& InNickName);
};


// Class TslGame.TslMessageHudWidget
// 0x0138 (0x04F0 - 0x03B8)
class UTslMessageHudWidget : public UUmgBaseWidget
{
public:
	TArray<struct FSystemMessageInfo>                  ImportMessages;                                           // 0x03B8(0x0010) (CPF_ZeroConstructor)
	struct FUmgWidgetBinder_Gerneral                   SystemMessageBoxBinder;                                   // 0x03C8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ImportantMessageBoxBinder;                                // 0x03E8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VoiceChannelLimmitBoxBinder;                              // 0x0408(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ObserverAssignMessageBorderWidgetBinder;                  // 0x0428(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SystemMessageBox_RetainerBoxBinder;                       // 0x0448(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VoiceChannelLimmitBox_RetainerBoxBinder;                  // 0x0468(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ImportantMessageBox_RetainerBoxBinder;                    // 0x0488(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ObserverAssingMessage_RetainerBoxBinder;                  // 0x04A8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SystemMessageCanvasBinder;                                // 0x04C8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	class UStringTable*                                UIStringTable;                                            // 0x04E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMessageHudWidget");
		return ptr;
	}


	void RemoveSameMessage(const struct FText& Message, TArray<struct FSystemMessageInfo>* Messages);
	void Process_CheckRequestAndRequestRender(class UTslNewMessageBorderWidget* MessageBorder, class URetainerBox* RetainerBox);
	void OnMainPrepass();
	void OnDisplayVoiceChannelStateMessage();
	void OnDisplayTeamEliminationMessage(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int EliminatedTeamRanking);
	void OnDisplayMessage(const struct FText& Message, float Duration, class UAkAudioEvent* Sound);
	void InitializeMessageHUD();
	struct FText GetTeamNameDecorated(int TeamNum);
	void DisplayMessage(float InDeltaTime, TArray<struct FSystemMessageInfo>* Messages);
	void DesignateTeamLogo(class UImage* LogoImage, int TeamNumber);
	class UTslNewSystemMessageWidget* CreateVoiceChannelStateMessage();
	class UTslObserverTeamKilledMessageWidget* CreateTeamKilledMessage(const struct FText& EliminatorTeamText, const struct FText& EliminatedTeamText, bool IsWipedOut, TEnumAsByte<ETextJustify> TextAlignment, const struct FSlateColor& TextColor, int TextSize, float Duration, bool bUseFade_In, class UAkAudioEvent* Sound);
	class UTslNewSystemMessageWidget* CreateSystemMessage(const struct FText& Message, TEnumAsByte<ETextJustify> TextAlignment, const struct FSlateColor& TextColor, int TextSize, float Duration, bool bUseFade_In, class UAkAudioEvent* Sound);
	class UTslNewSystemMessageWidget* CreateGamePlayMessage(const struct FText& Message, TEnumAsByte<ETextJustify> TextAlignment, int TextSize, float Duration, bool bUseFade_In, class UAkAudioEvent* Sound);
};


// Class TslGame.TslMissionGroupBaseWidget
// 0x0198 (0x0550 - 0x03B8)
class UTslMissionGroupBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                MissionItemVerticalBox_Binder;                            // 0x03C0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  MissionGroupText_Binder;                                  // 0x03E8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ProgressImage_Binder;                                     // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ProgressText_Binder;                                      // 0x0430(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  LockWidgetAnimation_Binder;                               // 0x0450(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     LockBorder_Binder;                                        // 0x0470(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ButtonBorder_Binder;                                      // 0x04A0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ExpandImage_Binder;                                       // 0x04D0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    WidgetBody_Binder;                                        // 0x04F8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UTexture2D*                                  ExpandTexture;                                            // 0x0520(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTexture2D*                                  CollapsTexture;                                           // 0x0528(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0530(0x0008) MISSED OFFSET
	class UTslNaviWidgetComp*                          NaviWidgetProperties;                                     // 0x0538(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnExpanded;                                               // 0x0540(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMissionGroupBaseWidget");
		return ptr;
	}


	void UpdateDesign_Normal();
	void UpdateDesign_Focused();
	struct FEventReply OnButtonDown(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent);
	void NotifyWidgetInputA();
	TArray<class UTslMissionItemBaseWidget*> GetMissionItems();
	class UPanelWidget* GetMissionItemPanel();
};


// Class TslGame.TslMissionItemBaseWidget
// 0x01E8 (0x05A0 - 0x03B8)
class UTslMissionItemBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  DescriptionText_Binder;                                   // 0x03C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ProgressText_Binder;                                      // 0x03E8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      IconImage_Binder;                                         // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      StateImage_Binder;                                        // 0x0430(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ProgressBarImage_Binder;                                  // 0x0458(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ProgressBarBorder_Binder;                                 // 0x0480(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     MissionListBorder_Binder;                                 // 0x04B0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TMap<struct FString, class UTexture2D*>            MissionIcons;                                             // 0x04E0(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UTexture2D*                                  DefaultMissionIcon;                                       // 0x0530(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTexture2D*                                  LockTexture;                                              // 0x0538(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTexture2D*                                  CompleteTexture;                                          // 0x0540(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InactiveIconAlpha;                                        // 0x0548(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InactiveTextAlpha;                                        // 0x054C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InactiveProgressBarBorderAlpha;                           // 0x0550(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                ActiveMissionBorderColor;                                 // 0x0554(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                AchievedMissionBorderColor;                               // 0x0564(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0574(0x0004) MISSED OFFSET
	struct FName                                       ScalarParamNameFirstEnd;                                  // 0x0578(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ScalarParamNameSecondEnd;                                 // 0x0580(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FString                                     MissionId;                                                // 0x0588(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UTslNaviWidgetComp*                          NaviWidgetProperties;                                     // 0x0598(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMissionItemBaseWidget");
		return ptr;
	}


	void UpdateDesign_Normal();
	void UpdateDesign_Focused();
};


// Class TslGame.TslMouseWidget
// 0x0058 (0x0410 - 0x03B8)
class UTslMouseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Panel                      KeysPanel_Binder;                                         // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MiddleMouseButton_Binder;                                 // 0x03D8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TArray<struct FString>                             MiddleMouseButtonActionsOrAxies;                          // 0x0400(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMouseWidget");
		return ptr;
	}

};


// Class TslGame.TslNewCastingBarWidget
// 0x0078 (0x0430 - 0x03B8)
class UTslNewCastingBarWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      CircleProgressBinder;                                     // 0x03B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextBinder;                                               // 0x03E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CastingBarCanvasBinder;                                   // 0x0400(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class UMaterialInstanceDynamic*                    CircleProgressMaterial;                                   // 0x0428(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNewCastingBarWidget");
		return ptr;
	}


	void OnInteract();
};


// Class TslGame.TslNewMessageBorderWidget
// 0x00E0 (0x0498 - 0x03B8)
class UTslNewMessageBorderWidget : public UUmgBaseWidget
{
public:
	TEnumAsByte<EVerticalAlignment>                    MessageAlignment;                                         // 0x03B8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03B9(0x0003) MISSED OFFSET
	int                                                NumofMaxMessge;                                           // 0x03BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceAddMessage : 1;                                     // 0x03C0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUniqueCheck : 1;                                         // 0x03C1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03C2(0x0006) MISSED OFFSET
	class UCurveFloat*                                 MoveCurve;                                                // 0x03C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   BorderSize;                                               // 0x03D0(0x0008) (CPF_Edit, CPF_IsPlainOldData)
	unsigned char                                      bOverrideCanvasInSize : 1;                                // 0x03D8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMove : 1;                                                // 0x03D9(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03DA(0x0006) MISSED OFFSET
	TArray<class UTslNewSystemMessageWidget*>          CheckList;                                                // 0x03E0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UTslNewSystemMessageWidget*                  LastMessageWidget;                                        // 0x03F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   TopBinder;                                                // 0x03F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BottomBinder;                                             // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   MessageCanvasBinder;                                      // 0x0438(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FVector2D                                   OverridedBorderSize;                                      // 0x0458(0x0008) (CPF_IsPlainOldData)
	TArray<struct FVector2D>                           WidgetPositionList;                                       // 0x0460(0x0010) (CPF_ZeroConstructor)
	float                                              MessageHeight;                                            // 0x0470(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   MessageSize;                                              // 0x0474(0x0008) (CPF_IsPlainOldData)
	struct FVector2D                                   BasePosition;                                             // 0x047C(0x0008) (CPF_IsPlainOldData)
	struct FVector2D                                   MoveVector;                                               // 0x0484(0x0008) (CPF_IsPlainOldData)
	float                                              TimeCheck;                                                // 0x048C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Count;                                                    // 0x0490(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUpdateSizeRule : 1;                                      // 0x0494(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNewMessageBorderWidget");
		return ptr;
	}


	void UpdateSizeRule();
	void UpdatePositionInfo();
	void SetSizeRule(TEnumAsByte<ESlateSizeRule> TopSize, TEnumAsByte<ESlateSizeRule> BottomSize);
	void OnRemoveMessage(class UTslNewSystemMessageWidget* SystemMessageWidget);
	void MoveTick(float InDeltaTime);
	bool IsFull();
	bool HasMessage();
	class UTslNewSystemMessageWidget* GetLastMessage();
	bool CheckWantRequestRender();
};


// Class TslGame.TslObserverAssignMessageBorderWidget
// 0x0000 (0x0498 - 0x0498)
class UTslObserverAssignMessageBorderWidget : public UTslNewMessageBorderWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverAssignMessageBorderWidget");
		return ptr;
	}


	void UpdateSizeRule();
	void UpdatePositionInfo();
	void SetSizeRule(TEnumAsByte<ESlateSizeRule> TopSize, TEnumAsByte<ESlateSizeRule> BottomSize);
	void OnRemoveMessage(class UTslNewSystemMessageWidget* SystemMessageWidget);
	void MoveTick(float InDeltaTime);
	bool IsFull();
	bool HasMessage();
	class UTslNewSystemMessageWidget* GetLastMessage();
	bool CheckWantRequestRender();
};


// Class TslGame.TslNewSystemMessageWidget
// 0x0098 (0x0450 - 0x03B8)
class UTslNewSystemMessageWidget : public UUmgBaseWidget
{
public:
	struct FText                                       Message;                                                  // 0x03B8(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	float                                              Duration;                                                 // 0x03D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextJustify>                          TextAlignment;                                            // 0x03D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	struct FSlateColor                                 TextColor;                                                // 0x03D8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	int                                                TextSize;                                                 // 0x0400(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseFadeIn : 1;                                           // 0x0404(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0405(0x0003) MISSED OFFSET
	class UAkAudioEvent*                               Sound;                                                    // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    EndMessage;                                               // 0x0410(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      bUsed : 1;                                                // 0x0420(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	struct FTimerHandle                                SaveTimer;                                                // 0x0428(0x0008)
	struct FUmgWidgetBinder_TextBlock                  MessageTextBinder;                                        // 0x0430(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslNewSystemMessageWidget");
		return ptr;
	}


	void StartFadeOut();
	void StartFadeIn(class UWidgetAnimation* Animation, float Time);
	void SetTextSize(class UTextBlock* TextBlock);
	void PlayFadeIn();
	void OnFadeOutFinished();
	void OnFadeInFinished();
	bool IsUseable();
	void InitializeMessage();
	class UWidgetAnimation* GetFadeOutAnimation();
	class UWidgetAnimation* GetFadeInAnimation();
	void ClearAnimation(class UWidgetAnimation* WidgetAnimation);
	void Clear();
};


// Class TslGame.TslKillNewMessageWidget
// 0x0390 (0x07E0 - 0x0450)
class UTslKillNewMessageWidget : public UTslNewSystemMessageWidget
{
public:
	struct FSlateColor                                 TeamColor;                                                // 0x0450(0x0028)
	struct FSlateColor                                 ImportantColor;                                           // 0x0478(0x0028)
	struct FSlateColor                                 NormalColor;                                              // 0x04A0(0x0028)
	struct FSlateColor                                 TeamKillerColor;                                          // 0x04C8(0x0028)
	struct FSlateColor                                 TeamKillerDBNOColor;                                      // 0x04F0(0x0028)
	struct FSlateColor                                 TeamVictimColor;                                          // 0x0518(0x0028)
	struct FSlateColor                                 TeamVictimDBNOColor;                                      // 0x0540(0x0028)
	struct FSlateColor                                 MyMsgColor;                                               // 0x0568(0x0028)
	struct FSlateColor                                 NormalDBNOColor;                                          // 0x0590(0x0028)
	struct FSlateColor                                 MyKillLogColor;                                           // 0x05B8(0x0028)
	unsigned char                                      bNotDisplayKiller : 1;                                    // 0x05E0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsStealFriendlyFire : 1;                                 // 0x05E1(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x05E2(0x0006) MISSED OFFSET
	struct FText                                       KillMsgText;                                              // 0x05E8(0x0018)
	struct FUmgWidgetBinder_TextBlock                  AlivePlayerBinder;                                        // 0x0600(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KillMsgBlockBinder;                                       // 0x0620(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  MyKillsBinder;                                            // 0x0640(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                VerticalBoxBinder;                                        // 0x0660(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              HorizontalBoxBinder;                                      // 0x0688(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     BorderBinder;                                             // 0x06B0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   KillCountLayerBinder;                                     // 0x06E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bDetailKillMessage : 1;                                   // 0x0700(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0701(0x0007) MISSED OFFSET
	struct FDeathMessage                               DeathMessage;                                             // 0x0708(0x00D0) (CPF_Edit, CPF_BlueprintVisible)
	class UStringTable*                                UIStringTable;                                            // 0x07D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslKillNewMessageWidget");
		return ptr;
	}


	void UpdateMyKills();
	void SetKillMessageText();
	void SetKillMessageFont();
	bool IsVictimTeam();
	bool IsKillerTeam();
	void InitializeKillMessageText();
	int GetTeamAlive();
	int GetNumStartTeam();
	int GetLocalPlayerKillNum();
	struct FLinearColor GetBrushColor();
	int GetAlivePlayerNum();
};


// Class TslGame.TslObserverTeamKilledMessageWidget
// 0x0050 (0x04A0 - 0x0450)
class UTslObserverTeamKilledMessageWidget : public UTslNewSystemMessageWidget
{
public:
	struct FUmgWidgetBinder_Image                      KillerLogoImageBinder;                                    // 0x0450(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      VictimLogoImageBinder;                                    // 0x0478(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverTeamKilledMessageWidget");
		return ptr;
	}


	class UImage* GetVictimLogoImage();
	class UImage* GetKillerLogoImage();
};


// Class TslGame.TslObserverPlayerInfoWidget
// 0x0380 (0x0738 - 0x03B8)
class UTslObserverPlayerInfoWidget : public UUmgBaseWidget
{
public:
	class UTexture*                                    UnArmedIcon;                                              // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              UnArmedIconRatio;                                         // 0x03C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	class ATslCharacter*                               CachedCharacter;                                          // 0x03C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                OldAmmoCount;                                             // 0x03D0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  AmmoIncreasingAnimBinder;                                 // 0x03D8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AmmoDecreasingAnimBinder;                                 // 0x03F8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  UserNameText_Binder;                                      // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UserHealthText_Binder;                                    // 0x0438(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     PlayerNameBorder_Binder;                                  // 0x0458(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamNameText_Binder;                                      // 0x0488(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     TeamNameBorder_Binder;                                    // 0x04A8(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamColorEndTriangleImage_Binder;                         // 0x04D8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              TeamNameOuterBox_Binder;                                  // 0x0500(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    TeamIconOverlay_Binder;                                   // 0x0528(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamIconImage_Binder;                                     // 0x0550(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                AmmoCanvas_Binder;                                        // 0x0578(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AmmoCountText_Binder;                                     // 0x05A0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AmmoTotalCountText_Binder;                                // 0x05C0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KillCountText_Binder;                                     // 0x05E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeTemplateWidget_Binder;                           // 0x0600(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ScopeIconImage_Binder;                                    // 0x0620(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      WeaponIconImageBinder;                                    // 0x0648(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_SizeBox                    WeaponIconImageSizeBoxBinder;                             // 0x0670(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       WeaponIconTextureParmName;                                // 0x0698(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       WeaponIconColorParmName;                                  // 0x06A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                WeaponColor_Armed;                                        // 0x06A8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                WeaponColor_Normal;                                       // 0x06B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FColorBlindColorSet                         WeaponColorSet_NoReload;                                  // 0x06C8(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	TMap<class UClass*, class UTexture2D*>             WeaponAttachableTextureMap;                               // 0x06D8(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<class UTexture2D*>                          TeamBackgroundTextures;                                   // 0x0728(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverPlayerInfoWidget");
		return ptr;
	}

};


// Class TslGame.TslObserverPlayerListTileInfoWidget
// 0x0198 (0x0550 - 0x03B8)
class UTslObserverPlayerListTileInfoWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03B8(0x0020) MISSED OFFSET
	class ATslCharacter*                               Character;                                                // 0x03D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  SelectedAnim;                                             // 0x03E0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  UnSelectedAnim;                                           // 0x0400(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  DisableAnim;                                              // 0x0420(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PlayerId;                                                 // 0x0440(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PlayerKillCount;                                          // 0x0460(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeWidgetBinder;                                    // 0x0480(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   BtnPlayer;                                                // 0x04A0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   KickOrReportButton_Binder;                                // 0x04C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KickOrReportText_Binder;                                  // 0x04E0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	class ULifeGaugeTemplateBaseWidget*                LifeGauge;                                                // 0x0500(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FString                                     PlayerUniqueId;                                           // 0x0508(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     PlayerName;                                               // 0x0518(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     ClanName;                                                 // 0x0528(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0538(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverPlayerListTileInfoWidget");
		return ptr;
	}


	void OnMouseClicked();
	void OnKickOrReportButtonClicked();
	void KickPlayer();
};


// Class TslGame.TslObserverPlayerListTileWidget
// 0x01E8 (0x05A0 - 0x03B8)
class UTslObserverPlayerListTileWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Panel                      InforPanel;                                               // 0x03C0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   TeamRank;                                                 // 0x03E0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamRankText;                                             // 0x0400(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             SwitcherTeamLogo;                                         // 0x0420(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamImage;                                                // 0x0448(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamColor;                                                // 0x0470(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     TeamBorderColor;                                          // 0x0498(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamListColor;                                            // 0x04C8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamNum;                                                  // 0x04F0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             SwitcherTeamInfo;                                         // 0x0510(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamInfoKill;                                             // 0x0538(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamInfoScore;                                            // 0x0558(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	class UTexture2D*                                  CachedTeamTexture;                                        // 0x0578(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0580(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverPlayerListTileWidget");
		return ptr;
	}

};


// Class TslGame.TslObserverPlayerListWidget
// 0x0188 (0x0540 - 0x03B8)
class UTslObserverPlayerListWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      TileWidgetTemplate;                                       // 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      TileInfoWidgetTemplate;                                   // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FStringClassReference                       TileTemplateClass;                                        // 0x03C8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FStringClassReference                       TileInfoTemplateClass;                                    // 0x03D8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      TilePanel;                                                // 0x03E8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             TileSwitcher;                                             // 0x0408(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BtnSwitchLeft;                                            // 0x0430(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BtnSwitchRight;                                           // 0x0450(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FTimerHandle                                TimerHandler;                                             // 0x0470(0x0008) (CPF_Transient)
	class ATslCharacter*                               CachedTargetCharacter;                                    // 0x0478(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TMap<struct FString, struct FRegistedPlayer>       RegistedPlayers;                                          // 0x0480(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	TMap<int, class UTslObserverTeamData*>             RegistedTeams;                                            // 0x04D0(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0520(0x0010) UNKNOWN PROPERTY: ArrayProperty TslGame.TslObserverPlayerListWidget.ObserverSteps
	unsigned char                                      UnknownData01[0x10];                                      // 0x0530(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObserverPlayerListWidget");
		return ptr;
	}


	void UpdateWidget();
	void SetUpTimerForUpdateReplicatedCharacters(float InRate);
	void OnSelectWidget(class UTslObserverPlayerListTileInfoWidget* SelectedWidget);
	void OnNeedSort();
	void OnMoveTileRight();
	void OnMoveTileLeft();
	void ClearTimerForUpdateReplicatedCharacter();
};


// Class TslGame.TslObsrvTeamEliDataQueueWidget
// 0x0010 (0x03C8 - 0x03B8)
class UTslObsrvTeamEliDataQueueWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslObsrvTeamEliDataQueueWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslRankEmblemWidget
// 0x00A0 (0x0458 - 0x03B8)
class UTslRankEmblemWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      EmblemImage_Binder;                                       // 0x03B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    EmblemSizeBox_Binder;                                     // 0x03E0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0408(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslRankEmblemWidget.RankEmblems

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslRankEmblemWidget");
		return ptr;
	}


	void SetRankEmblemFromRankType();
};


// Class TslGame.TslReloadingGuideWidget
// 0x00E0 (0x0498 - 0x03B8)
class UTslReloadingGuideWidget : public UUmgBaseWidget
{
public:
	struct FTimerHandle                                TimerHandle_HideWidget;                                   // 0x03B8(0x0008)
	struct FUmgWidgetBinder_Border                     TopBorder_Binder;                                         // 0x03C0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      HoldTriangleImage_Binder;                                 // 0x03F0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ProgressBarImage_Binder;                                  // 0x0418(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KeyGuideText_Binder;                                      // 0x0440(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HideAnimation_Binder;                                     // 0x0460(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FName                                       ActionName;                                               // 0x0480(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0488(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReloadingGuideWidget");
		return ptr;
	}


	void OnReloadPadInput(bool bPressed);
	void OnNotifyGroggy();
	void OnCharacterVault();
	void OnCharacterDeath();
};


// Class TslGame.TslScreenIndicatorCanvasWidget
// 0x0050 (0x0408 - 0x03B8)
class UTslScreenIndicatorCanvasWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      IndicatorWidgetClass;                                     // 0x03B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                CanvasLayerBinder;                                        // 0x03C0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<class UScreenIndicatorBaseWidget*>          IndicatorWidgets;                                         // 0x03E8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslScreenIndicatorCanvasWidget");
		return ptr;
	}

};


// Class TslGame.CaptureObjIndicatorCanvasWidget
// 0x0060 (0x0468 - 0x0408)
class UCaptureObjIndicatorCanvasWidget : public UTslScreenIndicatorCanvasWidget
{
public:
	TMap<struct FString, class UCaptureObjectIndicatorWidget*> CaptureObjectIndicatorWidgets;                            // 0x0408(0x0050) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class ACaptureAreaActor*>                   CaptureAreaActors;                                        // 0x0458(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CaptureObjIndicatorCanvasWidget");
		return ptr;
	}


	void OnActivatedCaptureAreaUpdated(TArray<struct FString> ActivatedCaptureAreaNames);
};


// Class TslGame.SmokeIndicatorCanvasWidget
// 0x0010 (0x0418 - 0x0408)
class USmokeIndicatorCanvasWidget : public UTslScreenIndicatorCanvasWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0408(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SmokeIndicatorCanvasWidget");
		return ptr;
	}

};


// Class TslGame.TslTeamWidget
// 0x0010 (0x0418 - 0x0408)
class UTslTeamWidget : public UTslScreenIndicatorCanvasWidget
{
public:
	TArray<class UTeamMarkWidget*>                     TeamMarkWidgets;                                          // 0x0408(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTeamWidget");
		return ptr;
	}

};


// Class TslGame.TslSpawnKitItemWidget
// 0x00A8 (0x0460 - 0x03B8)
class UTslSpawnKitItemWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x03B8(0x0048) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Button_Hover;                                             // 0x0400(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Gerneral                   Button_Selector;                                          // 0x0420(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  TextBlock_Title;                                          // 0x0440(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSpawnKitItemWidget");
		return ptr;
	}


	void OnUnHovered();
	void OnSelected();
	void OnHovered();
};


// Class TslGame.TslSpawnKitWidget
// 0x01C0 (0x0578 - 0x03B8)
class UTslSpawnKitWidget : public UUmgBaseWidget
{
public:
	struct FStringClassReference                       SpawnKitDataClass;                                        // 0x03B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)
	class USpawnKitData*                               SpawnKitData;                                             // 0x03C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FStringClassReference                       SpawnKitItemWidgetClass;                                  // 0x03D0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)
	unsigned char                                      UnknownData00[0x48];                                      // 0x03E0(0x0048) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Widget_Description;                                       // 0x0428(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Gerneral                   Widget_Weapon;                                            // 0x0448(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  Widget_WeaponContent;                                     // 0x0468(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Gerneral                   Widget_Armor;                                             // 0x0488(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  Widget_ArmorContent;                                      // 0x04A8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Gerneral                   Widget_Ammo;                                              // 0x04C8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  Widget_AmmoContent;                                       // 0x04E8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Gerneral                   Widget_Option;                                            // 0x0508(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  Widget_OptionContent;                                     // 0x0528(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Panel                      Panel_SelectorParent;                                     // 0x0548(0x0020) (CPF_Edit)
	TArray<class UTslSpawnKitItemWidget*>              Widget_Selectors;                                         // 0x0568(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSpawnKitWidget");
		return ptr;
	}


	void OnUnHover(int UnHoverIndex);
	void OnSelected(int HoverIndex);
	void OnHover(int HoverIndex);
};


// Class TslGame.TslStepperCounterContentWidget
// 0x0028 (0x03E0 - 0x03B8)
class UTslStepperCounterContentWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             Switcher_Binder;                                          // 0x03B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslStepperCounterContentWidget");
		return ptr;
	}


	void UpdateDesign_Selected();
	void UpdateDesign_Normal();
};


// Class TslGame.TslStepperCounterWidget
// 0x0048 (0x0400 - 0x03B8)
class UTslStepperCounterWidget : public UUmgBaseWidget
{
public:
	float                                              SizePerContent;                                           // 0x03B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumToShrink;                                              // 0x03BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SelectedIndex;                                            // 0x03C0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	TArray<class UTslStepperCounterContentWidget*>     CounterContents;                                          // 0x03C8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UClass*                                      ContentWidgetClass;                                       // 0x03D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HorizontalBox_Binder;                                     // 0x03E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslStepperCounterWidget");
		return ptr;
	}

};


// Class TslGame.TslSystemMenuButton
// 0x00B0 (0x0468 - 0x03B8)
class UTslSystemMenuButton : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	class UTslNaviWidgetComp*                          NaviWidgetComp;                                           // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FTslStickInputHelper                        NavigationInputHelper;                                    // 0x03C8(0x000C)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  NameTextBlock_Binder;                                     // 0x03D8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InternalButton_Binder;                                    // 0x03F8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FText                                       ButtonNameText;                                           // 0x0418(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0430(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslSystemMenuButton.ButtonEnumType
	unsigned char                                      UnknownData03[0x7];                                       // 0x0431(0x0007) MISSED OFFSET
	struct FName                                       ButtonName;                                               // 0x0438(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                HighlightedColor;                                         // 0x0440(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x0450(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      bIsShowInLobby : 1;                                       // 0x0460(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsShowInMatch : 1;                                       // 0x0461(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSystemMenuButton");
		return ptr;
	}


	void UpdateDesign_Normal();
	void UpdateDesign_Focused();
	void OnButtonUnhovered();
	void OnButtonHovered();
	void GetButtonType();
};


// Class TslGame.TslTabSelectorContentsWidget
// 0x00C8 (0x0480 - 0x03B8)
class UTslTabSelectorContentsWidget : public UUmgBaseWidget
{
public:
	struct FScriptDelegate                             OnClickedContentsWidget;                                  // 0x03B8(0x000E) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03B8(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FText                                       TitleText;                                                // 0x03C8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FString                                     TitleKeyString;                                           // 0x03E0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FUmgWidgetBinder_TextBlock                  TitleTextNormal_Binder;                                   // 0x03F0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TitleTextSelected_Binder;                                 // 0x0410(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             Switcher_Binder;                                          // 0x0430(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Button_Binder;                                            // 0x0458(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0478(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTabSelectorContentsWidget");
		return ptr;
	}


	void UpdateDesign_Selected();
	void OnClicked();
};


// Class TslGame.TslTabSelectorWidget
// 0x0058 (0x0410 - 0x03B8)
class UTslTabSelectorWidget : public UUmgBaseWidget
{
public:
	TArray<class UTslTabSelectorContentsWidget*>       TabWidgets;                                               // 0x03B8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	struct FUmgWidgetBinder_Gerneral                   TabHorizontalBox_Binder;                                  // 0x03C8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnTabRotated;                                             // 0x03E8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptDelegate                             OnTabSelectorUpdated;                                     // 0x03F8(0x000E) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03F8(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned char                                      UnknownData01[0x8];                                       // 0x0408(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTabSelectorWidget");
		return ptr;
	}


	void UpdateIndexTo(int NewIndex);
	void RotateRight();
	void RotateLeft();
	void ResetSelector();
};


// Class TslGame.TslTeamInfoListWidget
// 0x0060 (0x0418 - 0x03B8)
class UTslTeamInfoListWidget : public UUmgBaseWidget
{
public:
	TArray<class UTslTeamInfoWidget*>                  TeamInfoWidgetList;                                       // 0x03B8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UClass*                                      TeamInfoWidgetClass;                                      // 0x03C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_VerticalBox                VerticalBoxBinder;                                        // 0x03D0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	class ATeam*                                       CurrentViewingTeamMember;                                 // 0x03F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0400(0x0008) MISSED OFFSET
	TArray<struct FSaveTeamMemberData>                 SavedTeamMemberDatas;                                     // 0x0408(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTeamInfoListWidget");
		return ptr;
	}

};


// Class TslGame.TslTeamInfoWidget
// 0x0278 (0x0630 - 0x03B8)
class UTslTeamInfoWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bBindVoiceChatEvent : 1;                                  // 0x03B8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSpeaking : 1;                                            // 0x03B9(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMute : 1;                                                // 0x03BA(0x0001)
	unsigned char                                      bIsRestricted : 1;                                        // 0x03BA(0x0001)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03BB(0x0005) MISSED OFFSET
	struct FUmgWidgetBinder_HorizontalBox              TeamHpAreaBinder;                                         // 0x03C0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     TeamInfoAreaBinder;                                       // 0x03E8(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     InfoIconBorderBinder;                                     // 0x0418(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             InfoIconSwitcherBinder;                                   // 0x0448(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             SpeakingIconSwitcherBinder;                               // 0x0470(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    MarkerIconSizeBoxBinder;                                  // 0x0498(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MarkerImageBinder;                                        // 0x04C0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      BoostImageBinder;                                         // 0x04E8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bUdateTeamNameColor : 1;                                  // 0x0510(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0511(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TeamNameBinder;                                           // 0x0518(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OnSpeakAnimBinder;                                        // 0x0538(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 HealthGaugeWidgetBinder;                                  // 0x0558(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FColorBlindColorSet                         ColorBlindColorSet;                                       // 0x0578(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamMemberColorBinder;                                    // 0x0588(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     PlayerIconBorderBinder;                                   // 0x05B0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlayerIconTextBinder;                                     // 0x05E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	class ATeam*                                       Team;                                                     // 0x0600(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                QuitColor;                                                // 0x0608(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x0618(0x0014) MISSED OFFSET
	float                                              PrevVoiceUpdateTime;                                      // 0x062C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTeamInfoWidget");
		return ptr;
	}


	void UpdateVoiceStatusOnly(bool bIsMicActive, float FastMicEnergy, float CurrNoiseLevel);
	void UpdateVoiceImage();
	void UpdateVoiceChat(const struct FString& UniqueId, bool bIsTeamChannel, bool InbSpeaking, float InMeterEnergy);
	void UpdateTeamMemberName();
	void UpdateTeamMemberIcon();
	void UpdateTeamMemberColor();
	void UpdateTeamMarkerBorder();
	void UpdateTeamMarker();
	void UpdateTeamInfoIcon();
	void UpdateTeamInfoArea();
	void UpdatePlayerIcon();
	void UpdateHealthGaugeAndVisibility();
	void UpdateBoostGauge();
	void SetTeam(class ATeam* InTeam);
	void OnVoiceChat(bool InbSpeaking, float InMeterEnergy);
	void OnParticipantRestrictionChanged(class ATeam* Team, const struct FString& UniqueId, bool bIsRestricted);
	void OnParticipantMuteChanged(class ATeam* Team, const struct FString& ParticipantId, const struct FString& ChannelId, bool bIsMuted);
	void OnNativeParticipantRestrictionChanged(const struct FString& UniqueId, bool bIsRestricted);
	void OnNativeParticipantMuteChanged(const struct FString& ParticipantId, const struct FString& ChannelId, bool bIsMuted);
	void DecideTeamNameColor();
	void BindVoiceChatIfNeed();
};


// Class TslGame.TslPcTeamManageInfoWidget
// 0x0200 (0x0660 - 0x0460)
class UTslPcTeamManageInfoWidget : public UTslTeamManageInfoBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0460(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      PlayerIconImage_Binder;                                   // 0x0470(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UserNameTextBlock_Binder;                                 // 0x0498(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ReportBtnBorder_Binder;                                   // 0x04B8(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ReportBtn_Binder;                                         // 0x04E8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             VoiceButtonWidgetSwitcher_Binder;                         // 0x0508(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	int                                                VoiceMuteButtonIndex;                                     // 0x0530(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                VoiceUnmuteButtonIndex;                                   // 0x0534(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   VoiceMuteBtn_Binder;                                      // 0x0538(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VoiceUnmuteBtn_Binder;                                    // 0x0558(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VolumeSlider_Binder;                                      // 0x0578(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  VolumeTextBlock_Binder;                                   // 0x0598(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HighlightSizeBox_Binder;                                  // 0x05B8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     PlayerInfoBorder_Binder;                                  // 0x05E0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FLinearColor                                DefaultColor;                                             // 0x0610(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                HoverColor;                                               // 0x0620(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                DisabledColor;                                            // 0x0630(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FText                                       DuplicatedReportText;                                     // 0x0640(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0658(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPcTeamManageInfoWidget");
		return ptr;
	}


	void NotifyVolumeSliderUpdated(float Val);
	void NotifyToggleVoiceMuteButtonClicked();
	void NotifyReportButtonClicked();
};


// Class TslGame.TslXboxTeamManageInfoWidget
// 0x00E8 (0x0548 - 0x0460)
class UTslXboxTeamManageInfoWidget : public UTslTeamManageInfoBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnNavigate;                                               // 0x0460(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnShowGamerCard;                                          // 0x0470(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnToggleVoiceMute;                                        // 0x0480(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnRequestClose;                                           // 0x0490(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04A0(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     WidgetBorder_Binder;                                      // 0x04A8(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UserNameTextBlock_Binder;                                 // 0x04D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             VoiceIconSwitcher_Binder;                                 // 0x04F8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	int                                                VoiceChatIconIndex;                                       // 0x0520(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                VoiceMutedIconIndex;                                      // 0x0524(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                BorderColorOnFocused;                                     // 0x0528(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                BorderColorOnUnfocused;                                   // 0x0538(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslXboxTeamManageInfoWidget");
		return ptr;
	}

};


// Class TslGame.TslThrowableItemIconWidget
// 0x00D8 (0x0490 - 0x03B8)
class UTslThrowableItemIconWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	class UClass*                                      WeaponType;                                               // 0x03C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    ItemIcon;                                                 // 0x03C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ItemIconRatio;                                            // 0x03D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x03D4(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                NoItemColor;                                              // 0x03E4(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Icon_Binder;                                              // 0x03F8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ItemCountText_Binder;                                     // 0x0418(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     WidgetBorder_Binder;                                      // 0x0438(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    IconSizeBox_Binder;                                       // 0x0468(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslThrowableItemIconWidget");
		return ptr;
	}


	int GetThrowableItemCount(class UClass* InItemType);
};


// Class TslGame.TslVehicleStanceAndTeamListManageWidget
// 0x0020 (0x03D8 - 0x03B8)
class UTslVehicleStanceAndTeamListManageWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   SkydiveStateWidget_Binder;                                // 0x03B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleStanceAndTeamListManageWidget");
		return ptr;
	}

};


// Class TslGame.TslWeaponEquipmentWidget
// 0x0000 (0x03B8 - 0x03B8)
class UTslWeaponEquipmentWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeaponEquipmentWidget");
		return ptr;
	}


	bool SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void RuntimeInitBP();
	void OnFakeCursorY(float Val);
	void OnFakeCursorX(float Val);
	void OnFakeCursorUp();
	void OnFakeCursorDown();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class TslGame.TslWebPopupInterface
// 0x0000 (0x0028 - 0x0028)
class UTslWebPopupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWebPopupInterface");
		return ptr;
	}

};


// Class TslGame.TslWebPopup
// 0x0048 (0x0400 - 0x03B8)
class UTslWebPopup : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x03B8(0x0040) MISSED OFFSET
	class UTslCoherentWidget*                          WebViewBinder;                                            // 0x03F8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWebPopup");
		return ptr;
	}


	void UpdateWebPopup(const struct FWebPopupParam& WebPopupParam, bool bLoadURI);
	void SetWebPopupVisibility(bool bNewShow);
	void SetReuse(bool bNewReuse);
	void SetLayout(float X, float Y, float Width, float Height);
	void OnUpdateWebPopup(const struct FWebPopupParam& WebPopupParam);
	void OnCloseWebPopup();
	bool IsWebPopupShow();
	bool IsReuse();
	struct FWebPopupParam GetSaveWebPopupParam();
	void CloseWebPopup(bool bForceRemoveParent);
};


// Class TslGame.TslWheelBaseSubWidget
// 0x0108 (0x04C0 - 0x03B8)
class UTslWheelBaseSubWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_CanvasPanel                OutsideCanvasWidget_Binder;                               // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             FocusSwitcher_Binder;                                     // 0x03E0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    TargetImageOverlay_Binder;                                // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TargetImage_Binder;                                       // 0x0430(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InitAnimation_Binder;                                     // 0x0458(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForSelectedAnimation_Binder;                       // 0x0478(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForNonSelectedAnimation_Binder;                    // 0x0498(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	int                                                NonFocusedWidgetIndex;                                    // 0x04B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                FocusedWidgetIndex;                                       // 0x04BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWheelBaseSubWidget");
		return ptr;
	}


	void SetFocus(bool bOnFocus);
	void PlaySelectAnimation(bool bFocus);
	struct FText GetNameText();
	struct FText GetDescriptionText();
	bool DoAction();
};


// Class TslGame.TslEmoteWheelSubWidget
// 0x00B0 (0x0570 - 0x04C0)
class UTslEmoteWheelSubWidget : public UTslWheelBaseSubWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  ShortcutTextBlock_Binder;                                 // 0x04C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             ShowShortcutWidgetSwitcherOnFocus_Binder;                 // 0x04E0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             ShowShortcutWidgetSwitcherOffFocus_Binder;                // 0x0508(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	int                                                ShowShortcutWidgetIndex;                                  // 0x0530(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                HideShortcutWidgetIndex;                                  // 0x0534(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FString                                     ActionNamePrefix;                                         // 0x0538(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0548(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEmoteWheelSubWidget");
		return ptr;
	}


	struct FText GetNameText();
	bool DoAction();
};


// Class TslGame.TslItemWheelSubWidget
// 0x0098 (0x0558 - 0x04C0)
class UTslItemWheelSubWidget : public UTslWheelBaseSubWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  ItemStackCountTextBlock_Binder;                           // 0x04C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForNonSelectedUnsuableAnimation_Binder;            // 0x04E0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FLinearColor                                UnusableItemImageColor;                                   // 0x0500(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                UsableItemImageColor;                                     // 0x0510(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                UnusableItemNameColor;                                    // 0x0520(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                UsableItemNameColor;                                      // 0x0530(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0540(0x0008) MISSED OFFSET
	class UItem*                                       DefaultItem;                                              // 0x0548(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0550(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslItemWheelSubWidget");
		return ptr;
	}


	void UpdateItemImage();
	void PlaySelectAnimation(bool bFocus);
	int GetStackCount();
	struct FText GetNameText();
	struct FText GetDescriptionText();
	bool DoAction();
};


// Class TslGame.TslHealItemWheelSubWidget
// 0x0018 (0x0570 - 0x0558)
class UTslHealItemWheelSubWidget : public UTslItemWheelSubWidget
{
public:
	struct FText                                       CannotUseItemText;                                        // 0x0558(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHealItemWheelSubWidget");
		return ptr;
	}


	int GetStackCount();
	bool DoAction();
};


// Class TslGame.TslThrowableItemWheelSubWidget
// 0x0018 (0x0570 - 0x0558)
class UTslThrowableItemWheelSubWidget : public UTslItemWheelSubWidget
{
public:
	struct FText                                       CannotEquipItemText;                                      // 0x0558(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslThrowableItemWheelSubWidget");
		return ptr;
	}


	int GetStackCount();
	bool DoAction();
};


// Class TslGame.TwoTeamScoreboardWidget
// 0x0160 (0x0518 - 0x03B8)
class UTwoTeamScoreboardWidget : public UUmgBaseWidget
{
public:
	class UTimerTextBlockUpdater*                      RespawnTimerUpdater;                                      // 0x03B8(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTimerTextBlockUpdater*                      TimeLimitTimerUpdater;                                    // 0x03C0(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  RespawnTimeTextBinder;                                    // 0x03C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TimeLimitTextBinder;                                      // 0x03E8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_Image>              TeamValueImageBinders;                                    // 0x0408(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamValueTextBinders;                                     // 0x0418(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamMemberCountTextBinders;                               // 0x0428(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     GameStatusMessageBorder_Binder;                           // 0x0438(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  VSFadeInAnimation_Binder;                                 // 0x0468(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  VSFadeOutAnimation_Binder;                                // 0x0488(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UpperTargetScoreText_Binder;                              // 0x04A8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FName                                       ColorParamName;                                           // 0x04C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       GaugeParamName;                                           // 0x04D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseRespawnTimer : 1;                                     // 0x04D8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseTimeLimitTimer : 1;                                   // 0x04D9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseAnimOnMatchStart : 1;                                 // 0x04DA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bPlayGaugeAnim : 1;                                       // 0x04DB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GaugeAnimSpeed;                                           // 0x04DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GaugeAnimTime;                                            // 0x04E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	TArray<struct FLinearColor>                        TeamColors;                                               // 0x04E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x20];                                      // 0x04F8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TwoTeamScoreboardWidget");
		return ptr;
	}


	void OnTimeLimitUpdated(const struct FString& TimeString);
	void OnRespawnTimeUpdated(const struct FString& TimeString);
	void OnMyTeamScoreChanged(float TeamScore);
	void OnMyTeamRankChanged(int Rank);
	void OnMyGainScoreChanged(float ScoreGained);
	void OnModeStarted(const struct FStartModeProperties& StartModeProperties);
	void OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void OnMatchStarted(bool bReconnect);
	void OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.BRTwoTeamScoreboardWidget
// 0x0018 (0x0530 - 0x0518)
class UBRTwoTeamScoreboardWidget : public UTwoTeamScoreboardWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0518(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BRTwoTeamScoreboardWidget");
		return ptr;
	}


	void OnTimeLimitUpdated(const struct FString& TimeString);
	void OnRespawnTimeUpdated(const struct FString& TimeString);
	void OnMyTeamScoreChanged(float TeamScore);
	void OnMyTeamRankChanged(int Rank);
	void OnMyGainScoreChanged(float ScoreGained);
	void OnModeStarted(const struct FStartModeProperties& StartModeProperties);
	void OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void OnMatchStarted(bool bReconnect);
	void OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.CustomTwoTeamScoreboardWidget
// 0x0040 (0x0558 - 0x0518)
class UCustomTwoTeamScoreboardWidget : public UTwoTeamScoreboardWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TargetScoreTextBinder;                                    // 0x0518(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FText                                       TargetScoreText;                                          // 0x0538(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0550(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CustomTwoTeamScoreboardWidget");
		return ptr;
	}


	void OnTimeLimitUpdated(const struct FString& TimeString);
	void OnRespawnTimeUpdated(const struct FString& TimeString);
	void OnMyTeamScoreChanged(float TeamScore);
	void OnMyTeamRankChanged(int Rank);
	void OnMyGainScoreChanged(float ScoreGained);
	void OnModeStarted(const struct FStartModeProperties& StartModeProperties);
	void OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void OnMatchStarted(bool bReconnect);
	void OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.ConquestModeWidget
// 0x0090 (0x05E8 - 0x0558)
class UConquestModeWidget : public UCustomTwoTeamScoreboardWidget
{
public:
	class UClass*                                      CaptureAreaStatusWidgetClass;                             // 0x0558(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      CurrentlyCapturingAreaStatusWidgetClass;                  // 0x0560(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_HorizontalBox              CaptureAreaStatusListBinder;                              // 0x0568(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              CurrentlyCapturingAreaStatusListBinder;                   // 0x0590(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bHiddenCurrentlyCapturingWidgetInList : 1;                // 0x05B8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x05B9(0x0007) MISSED OFFSET
	struct FString                                     MapWidgetName;                                            // 0x05C0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<class UCaptureAreaStatusWidget*>            CaptureAreaStatusWidgets;                                 // 0x05D0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UCaptureAreaStatusWidget*                    CurrentlyCapturingAreaStatusWidget;                       // 0x05E0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ConquestModeWidget");
		return ptr;
	}


	void OnActivatedCaptureAreaUpdated(TArray<struct FString> ActivatedCaptureAreaNames);
};


// Class TslGame.WarTwoTeamScoreboardWidget
// 0x0080 (0x05D8 - 0x0558)
class UWarTwoTeamScoreboardWidget : public UCustomTwoTeamScoreboardWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TargetScoreMessageTextBinder;                             // 0x0558(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PointFeedbackTextBinder;                                  // 0x0578(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  ScorePositiveAnimationBinder;                             // 0x0598(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  ScoreNegativeAnimationBinder;                             // 0x05B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WarTwoTeamScoreboardWidget");
		return ptr;
	}


	void OnMyTeamScoreChanged(float TeamScore);
	void OnMyGainScoreChanged(float ScoreGained);
	void OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void OnMatchStarted(bool bIsReconnect);
	void OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.VehicleFuelBaseWidget
// 0x00C8 (0x0480 - 0x03B8)
class UVehicleFuelBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      OilGaugeImageBinder;                                      // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      OilGaugeBgImageBinder;                                    // 0x03E0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      OilArrowImageBinder;                                      // 0x0408(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Overlay                    GaugeBodyBinder;                                          // 0x0430(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FLinearColor                                NormalColor;                                              // 0x0458(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FLinearColor                                FuelEmptyColor;                                           // 0x0468(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FName                                       GaugePramName;                                            // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleFuelBaseWidget");
		return ptr;
	}

};


// Class TslGame.VehicleRadioBaseWidget
// 0x0020 (0x03D8 - 0x03B8)
class UVehicleRadioBaseWidget : public UUmgBaseWidget
{
public:
	class UCheckBox*                                   PowerCheckBox;                                            // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTextBlock*                                  ChannelTextBlock;                                         // 0x03C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UProgressBar*                                VolumeProgressBar;                                        // 0x03C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              LastRadioVolume;                                          // 0x03D0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      LastRadioChannel;                                         // 0x03D4(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bLastRadioPowerOn : 1;                                    // 0x03D5(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsShowRadioWidget : 1;                                   // 0x03D6(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleRadioBaseWidget");
		return ptr;
	}

};


// Class TslGame.VehicleSeatInfoBaseWidget
// 0x0048 (0x0400 - 0x03B8)
class UVehicleSeatInfoBaseWidget : public UUmgBaseWidget
{
public:
	int                                                SeatIndex;                                                // 0x03B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	struct FName                                       StateParamName;                                           // 0x03C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Image                      SeatImageBinder;                                          // 0x03C8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class APawn*                                       CachedVehiclePawn;                                        // 0x03F0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTslVehicleSeatComponent*                    CachedSeatComponent;                                      // 0x03F8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleSeatInfoBaseWidget");
		return ptr;
	}


	int GetSeatState();
};


// Class TslGame.VehicleStanceBaseWidget
// 0x00C0 (0x0478 - 0x03B8)
class UVehicleStanceBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_VerticalBox                VehicleIconAreaBinder;                                    // 0x03B8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_CanvasPanel                VehicleDetailInfoBinder;                                  // 0x03E0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  SpeedTextBinder;                                          // 0x0408(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeWidgetBinder;                                    // 0x0428(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_UserWidget                 FuelGaugeWidgetBinder;                                    // 0x0448(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class APawn*                                       CachedVehiclePawn;                                        // 0x0468(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UUserWidget*                                 CachedVehicleIconWidget;                                  // 0x0470(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleStanceBaseWidget");
		return ptr;
	}

};


// Class TslGame.VehicleWheelInfoBaseWidget
// 0x0068 (0x0420 - 0x03B8)
class UVehicleWheelInfoBaseWidget : public UUmgBaseWidget
{
public:
	int                                                WheelIndex;                                               // 0x03B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      WheelImageBinder;                                         // 0x03C0(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      PunctureImageBinder;                                      // 0x03E8(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class ATslWheeledVehicle*                          CachedVehiclePawn;                                        // 0x0410(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTslWheeledVehicleMovement*                  CachedVehicleMovement;                                    // 0x0418(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleWheelInfoBaseWidget");
		return ptr;
	}

};


// Class TslGame.VersionInfoBaseWidget
// 0x0030 (0x03E8 - 0x03B8)
class UVersionInfoBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bReturnEmptyVersionTextIfNickNameInvalid : 1;             // 0x03B8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHideRegionIfInvalid : 1;                                 // 0x03B9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03BA(0x0006) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  VersionInfoTextBinder;                                    // 0x03C0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUpdated : 1;                                             // 0x03E0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VersionInfoBaseWidget");
		return ptr;
	}


	void ForceUpdate();
};


// Class TslGame.VersionInfoCanvasBaseWidget
// 0x0048 (0x0400 - 0x03B8)
class UVersionInfoCanvasBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 VersionInfoWidgetBinder;                                  // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_RetainerBox                VersionInfoRetainerBoxBinder;                             // 0x03D8(0x0028) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VersionInfoCanvasBaseWidget");
		return ptr;
	}

};


// Class TslGame.WarModeRankingItemWidget
// 0x0080 (0x0438 - 0x03B8)
class UWarModeRankingItemWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TeamRankTextBinder;                                       // 0x03B8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamLeaderNameTextBinder;                                 // 0x03D8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamScoreTextBinder;                                      // 0x03F8(0x0020) (CPF_Edit)
	struct FLinearColor                                MyTeamColor;                                              // 0x0418(0x0010) (CPF_Edit, CPF_IsPlainOldData)
	struct FLinearColor                                EnemyTeamColor;                                           // 0x0428(0x0010) (CPF_Edit, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WarModeRankingItemWidget");
		return ptr;
	}

};


// Class TslGame.WarModeRankingWidget
// 0x0248 (0x0600 - 0x03B8)
class UWarModeRankingWidget : public UUmgBaseWidget
{
public:
	TMap<int, struct FRankingItemWidgets>              RankingItemWidgetsContainer;                              // 0x03B8(0x0050) (CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_VerticalBox>        TeamRankingWidgetBinders;                                 // 0x0408(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_SizeBox>            TeamRankingHeadWidgetBinders;                             // 0x0418(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamTextBlockBinders;                                     // 0x0428(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_Image>              TeamScoreImageBinders;                                    // 0x0438(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamScoreTextBlockBinders;                                // 0x0448(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamGoalScoreTextBlockBinders;                            // 0x0458(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FUmgWidgetBinder_VerticalBox>        RankingWidgetVerticalBoxBinders;                          // 0x0468(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FUmgWidgetBinder_UserWidget                 MyTeamRankingBinder;                                      // 0x0478(0x0020) (CPF_Edit)
	class UClass*                                      RankingItemWidgetClass;                                   // 0x0498(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RankTableMaxLen;                                          // 0x04A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04A4(0x0004) MISSED OFFSET
	struct FName                                       GaugeParam;                                               // 0x04A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x150];                                     // 0x04B0(0x0150) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WarModeRankingWidget");
		return ptr;
	}


	void OnScoreChanged();
	void OnRep_StartModeProperties(const struct FStartModeProperties& StartModeProperties);
	void OnPlayerCountChanged(int PlayerCount);
};


// Class TslGame.WarModeScoreDelimiter
// 0x0130 (0x04E8 - 0x03B8)
class UWarModeScoreDelimiter : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             RankWidgetSwitcher;                                       // 0x03B8(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamUpAnimationBinder;                                  // 0x03E0(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamDownAnimationBinder;                                // 0x0400(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamUpAnimationBinder;                               // 0x0420(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamDownAnimationBinder;                             // 0x0440(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_HorizontalBox              EnemyDownWidgetBinder;                                    // 0x0460(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_Image                      MyTeamGaugeBinder;                                        // 0x0488(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_Image                      EnemyGaugeBinder;                                         // 0x04B0(0x0028) (CPF_Edit)
	int                                                LastMyTeamRank;                                           // 0x04D8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LastMyTeamScore;                                          // 0x04DC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                LastEnemyHighScore;                                       // 0x04E0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bNeedDraw : 1;                                            // 0x04E4(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WarModeScoreDelimiter");
		return ptr;
	}

};


// Class TslGame.WarModeWidget
// 0x0328 (0x06E0 - 0x03B8)
class UWarModeWidget : public UUmgBaseWidget
{
public:
	class UTimerTextBlockUpdater*                      RespawnTimerUpdater;                                      // 0x03B8(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTimerTextBlockUpdater*                      TimeLimitTimerUpdater;                                    // 0x03C0(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  RespawnTimeTextBinder;                                    // 0x03C8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  TimeLimitTextBinder;                                      // 0x03E8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamModeSwitcherBinder;                                   // 0x0408(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamCountTextBinder;                                      // 0x0430(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  MyTeamScoreTextBinder;                                    // 0x0450(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  GoalScoreTextBinder;                                      // 0x0470(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  MyTeamRankTextBinder;                                     // 0x0490(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  HighEnemyScoreTextBinder;                                 // 0x04B0(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  BigTeamMyTeamScoreTextBinder;                             // 0x04D0(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  BigTeamGoalScoreTextBinder;                               // 0x04F0(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  BigTeamHighEnemyScoreTextBinder;                          // 0x0510(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  SpectatingRespawnTimeTextBinder;                          // 0x0530(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_TextBlock                  PointFeedbackTextBinder;                                  // 0x0550(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  ScorePositiveAnimationBinder;                             // 0x0570(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  ScoreNegativeAnimationBinder;                             // 0x0590(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             RankWidgetSwitcher;                                       // 0x05B0(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamUpAnimationBinder;                                  // 0x05D8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamDownAnimationBinder;                                // 0x05F8(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamUpAnimationBinder;                               // 0x0618(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamDownAnimationBinder;                             // 0x0638(0x0020) (CPF_Edit)
	struct FUmgWidgetBinder_HorizontalBox              EnemyDownWidgetBinder;                                    // 0x0658(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_Image                      MyTeamGaugeBinder;                                        // 0x0680(0x0028) (CPF_Edit)
	struct FUmgWidgetBinder_Image                      EnemyGaugeBinder;                                         // 0x06A8(0x0028) (CPF_Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x06D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WarModeWidget");
		return ptr;
	}


	void OnTimeLimitUpdated(const struct FString& TimeString);
	void OnRespawnTimeUpdated(const struct FString& TimeString);
	void OnMyTeamScoreChanged(float TeamScore);
	void OnMyTeamRankChanged(int Rank);
	void OnMyGainScoreChanged(float ScoreGained);
	void OnModeStrated(const struct FStartModeProperties& StartModeProperties);
	void OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void OnHighEnemyScoreChanged(float TeamScore);
	void CollapseKillcamButtonUI(class UTslUserWidget* Widget);
};


// Class TslGame.WeaponSlotBaseWidget
// 0x0348 (0x0700 - 0x03B8)
class UWeaponSlotBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bListInSlot : 1;                                          // 0x03B8(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03B9(0x0003) MISSED OFFSET
	int                                                WeaponIndex;                                              // 0x03BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03C0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.WeaponSlotBaseWidget.ListSlotNoReloadGuideType
	unsigned char                                      bUseWeaponIcon : 1;                                       // 0x03C1(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03C2(0x0006) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      WeaponIconImageBinder;                                    // 0x03C8(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_SizeBox                    WeaponIconImageSizeBoxBinder;                             // 0x03F0(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	float                                              WeaponIconImageSizeBoxHeight;                             // 0x0418(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	struct FName                                       WeaponIconTextureParmName;                                // 0x0420(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       WeaponIconColorParmName;                                  // 0x0428(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                WeaponColor_Armed;                                        // 0x0430(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                WeaponColor_Normal;                                       // 0x0440(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FLinearColor                                WeaponColor_Unarmed;                                      // 0x0450(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  ScaleUpAnimBinder;                                        // 0x0460(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ScaleDownAnimBinder;                                      // 0x0480(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FColorBlindColorSet                         WeaponColorSet_NoReload;                                  // 0x04A0(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseAmmoTextAndIcon : 1;                                  // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData04[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  WeaponHandsOnLoadedAmmoCountTextBinder;                   // 0x04B8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  WeaponListLoadedAmmoCountTextBinder;                      // 0x04D8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AmmoIncreasingAnimBinder;                                 // 0x04F8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AmmoDecreasingAnimBinder;                                 // 0x0518(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  WeaponHandsOnUnloadedAmmoCountTextBinder;                 // 0x0538(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  UnloadedAmmoIncreasingAnimBinder;                         // 0x0558(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  UnloadedAmmoDecreasingAnimBinder;                         // 0x0578(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Image                      WeaponHandsOnAmmoIconBinder;                              // 0x0598(0x0028) (CPF_Edit, CPF_BlueprintVisible)
	struct FName                                       AmmoTexParamName;                                         // 0x05C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseWeaponFiringModeTextBinder : 1;                       // 0x05C8(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData05[0x7];                                       // 0x05C9(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  WeaponFiringModeTextBinder;                               // 0x05D0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     WeaponIconBackground;                                     // 0x05F0(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Border                     AmmoAndFringModeBackground;                               // 0x0620(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	float                                              SlotBackgroundAlpha_Armed;                                // 0x0650(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SlotBackgroundAlpha_Unarmed;                              // 0x0654(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SlotBackgroundAlpha_Normal;                               // 0x0658(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x065C(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  FadeInWeaponSlotAnimBinder;                               // 0x0660(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutWeaponSlotAnimBinder;                              // 0x0680(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeInUnarmedWeaponSlotAminBinder;                        // 0x06A0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutUnarmedWeaponSlotAminBinder;                       // 0x06C0(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData07[0x20];                                      // 0x06E0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponSlotBaseWidget");
		return ptr;
	}

};


// Class TslGame.WeaponSlotHudBaseWidget
// 0x0190 (0x0548 - 0x03B8)
class UWeaponSlotHudBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 CurrentWeaponSlotWidgetBinder;                            // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	TArray<struct FUmgWidgetBinder_UserWidget>         WeaponSlotWidgetBinderList;                               // 0x03D8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FUmgWidgetBinder_Border                     WeaponSlotListBorderBinder;                               // 0x03E8(0x0030) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeInSlotListAminBinder;                                 // 0x0418(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutSlotListAminBinder;                                // 0x0438(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	float                                              SlotOffsetMultiply;                                       // 0x0458(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SlotPadding;                                              // 0x045C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FSequence_Float                             MovingSequence;                                           // 0x0460(0x00A0) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0500(0x0038) MISSED OFFSET
	struct FTimerHandle                                FinishTimer;                                              // 0x0538(0x0008) (CPF_Transient)
	class UWeaponProcessorComponent*                   CachedWeaponProcessor;                                    // 0x0540(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponSlotHudBaseWidget");
		return ptr;
	}


	void OnNotifyWeaponUnarm(bool bIsUnarmed);
	void OnNotifyWeaponChange(int WeaponIndex, float Duration);
	void OnNotifyWeaponArmed();
	void OnMovingStarted();
	void OnMovingFinished();
};


// Class TslGame.ZeroingDistanceBaseWidget
// 0x0080 (0x0438 - 0x03B8)
class UZeroingDistanceBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  ZeroingdistanceTextBinder;                                // 0x03B8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ZeroDistIncreasingAnimBinder;                             // 0x03D8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ZeroDistDecreasingAnimBinder;                             // 0x03F8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	struct FText                                       ZeroingTextFormat;                                        // 0x0418(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0430(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ZeroingDistanceBaseWidget");
		return ptr;
	}

};


// Class TslGame.TslVehicleAnimInstance
// 0x0320 (0x0C10 - 0x08F0)
class UTslVehicleAnimInstance : public UVehicleAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x08F0(0x0004) MISSED OFFSET
	struct FRotator                                    Rot_Steering_Right;                                       // 0x08F4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    Rot_Steering_Final;                                       // 0x0900(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    Rot_Speed_Left;                                           // 0x090C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    Rot_Speed_Right;                                          // 0x0918(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpeedMax;                                                 // 0x0924(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    Rot_Speed_Final;                                          // 0x0928(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    Rot_RPM_Left;                                             // 0x0934(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    Rot_RPM_Right;                                            // 0x0940(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RPMMax;                                                   // 0x094C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bTickIndicators : 1;                                      // 0x0950(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseAbsoluteSteeringRotation : 1;                         // 0x0951(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bTickMotorbikeBody : 1;                                   // 0x0952(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xD];                                       // 0x0953(0x000D) MISSED OFFSET
	struct FVector4                                    SpeedInMap;                                               // 0x0960(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector4                                    SpeedOutMap;                                              // 0x0970(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpeedInMapScalar;                                         // 0x0980(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0984(0x000C) MISSED OFFSET
	struct FVector4                                    DotVelocityMap;                                           // 0x0990(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DotVelocityPower;                                         // 0x09A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   LateralVelocityCompClamp;                                 // 0x09A4(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LateralVelocityScalar;                                    // 0x09AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector4                                    SteerLowSpeedMap;                                         // 0x09B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SteerLowSpeedStaticOffset;                                // 0x09C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x09C4(0x000C) MISSED OFFSET
	struct FVector4                                    SteerHighSpeedMap;                                        // 0x09D0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SteerHighSpeedStaticOffset;                               // 0x09E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x09E4(0x000C) MISSED OFFSET
	struct FVector4                                    SteerLERPSpeedMap;                                        // 0x09F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    BodyLeanMap;                                              // 0x0A00(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   BodyLeanVelocityMap;                                      // 0x0A0C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0A14(0x000C) MISSED OFFSET
	struct FVector4                                    SteerRollMap;                                             // 0x0A20(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bTickMotorbikeKickstand : 1;                              // 0x0A30(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseInvertedKickstandAlpha : 1;                           // 0x0A31(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0A32(0x0002) MISSED OFFSET
	struct FRotator                                    KickstandOffRotation;                                     // 0x0A34(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              KicstandInterpSpeed;                                      // 0x0A40(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    Rot_RPM_Final;                                            // 0x0A44(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	class ATslWheeledVehicle*                          VehicleRef;                                               // 0x0A50(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslWheeledVehicleMovement*                  VehicleMovementRef;                                       // 0x0A58(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FRotator                                    SteerRollFinal;                                           // 0x0A60(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SteerFL;                                                  // 0x0A6C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SteerFR;                                                  // 0x0A78(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    BodyLean;                                                 // 0x0A84(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      bCalculateFrontAxisAngles : 1;                            // 0x0A90(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0A91(0x0003) MISSED OFFSET
	int                                                SteerFLindex;                                             // 0x0A94(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                SteerFRindex;                                             // 0x0A98(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                DriveRLindex;                                             // 0x0A9C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                DriveRRindex;                                             // 0x0AA0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                DriveshaftRwheelIndex;                                    // 0x0AA4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     SteerFLmask;                                              // 0x0AA8(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     SteerFRmask;                                              // 0x0AB4(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCalculateRearDriveShaftRot : 1;                          // 0x0AC0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0AC1(0x0003) MISSED OFFSET
	struct FVector                                     RotationMaskForDriveShaft;                                // 0x0AC4(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    DriveshaftR_Rot;                                          // 0x0AD0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    DriveshaftR_Rot_Reversed;                                 // 0x0ADC(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              KickstandAlpha;                                           // 0x0AE8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCheckWheelNormals : 1;                                   // 0x0AEC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0AED(0x0003) MISSED OFFSET
	TArray<int>                                        WheelNormalIndexArray;                                    // 0x0AF0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              AverageWheelNormalInterpSpeed;                            // 0x0B00(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     AveragedWheelNormal;                                      // 0x0B04(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    AveragedWheelNormalRot;                                   // 0x0B10(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              SteerRollByWheelNormalScalar;                             // 0x0B1C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTickWaterDrive : 1;                                      // 0x0B20(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0B21(0x0003) MISSED OFFSET
	float                                              WaterAlpha;                                               // 0x0B24(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCalculateAnimDynamics : 1;                               // 0x0B28(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCalculateAnimDynamicsDrag : 1;                           // 0x0B29(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCalculateAnimDynamicsGravity : 1;                        // 0x0B2A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAnimDynamicsCalcInComponentSpace : 1;                    // 0x0B2B(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ForceScale;                                               // 0x0B2C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DragScale;                                                // 0x0B30(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DragClamp;                                                // 0x0B34(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GravityScale;                                             // 0x0B38(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     ExternalForceAD;                                          // 0x0B3C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     ExternalForceAD_World;                                    // 0x0B48(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     ExternalForceAD_NoDrag;                                   // 0x0B54(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    HighShake;                                                // 0x0B60(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    MidShake;                                                 // 0x0B6C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    LowShake;                                                 // 0x0B78(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    LowShakeReversed;                                         // 0x0B84(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              EngineRPM_Alpha;                                          // 0x0B90(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTickCustomShakes : 1;                                    // 0x0B94(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0B95(0x0003) MISSED OFFSET
	struct FBox                                        HighShakeRange;                                           // 0x0B98(0x001C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FBox                                        MidShakeRange;                                            // 0x0BB4(0x001C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FBox                                        LowShakeRange;                                            // 0x0BD0(0x001C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LowShakeTPP_Scalar;                                       // 0x0BEC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultEngineIdleClamp;                                   // 0x0BF0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x1C];                                      // 0x0BF4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleAnimInstance");
		return ptr;
	}

};


// Class TslGame.VehicleArmorDataAsset
// 0x0050 (0x0080 - 0x0030)
class UVehicleArmorDataAsset : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.VehicleArmorDataAsset.DamageCategoryMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleArmorDataAsset");
		return ptr;
	}

};


// Class TslGame.TslVehicleCommonComponent
// 0x00F0 (0x02D0 - 0x01E0)
class UTslVehicleCommonComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnBreak;                                                  // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRepair;                                                 // 0x01F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeath;                                                  // 0x0200(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHealthChange;                                           // 0x0210(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFuelChange;                                             // 0x0220(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	class UCurveFloat*                                 FuelConsumptionCurve;                                     // 0x0230(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastFuelConsumptionTime;                                  // 0x0238(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FuelConsumptionModifierIdle;                              // 0x023C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FuelEfficiency;                                           // 0x0240(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FuelConsumptionModifierBoost;                             // 0x0244(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FuelDetractionTime;                                       // 0x0248(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseBikeFuelConsumption : 1;                              // 0x024C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x024D(0x0003) MISSED OFFSET
	float                                              SimpleBodyMassMultiplier;                                 // 0x0250(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0254(0x000C) MISSED OFFSET
	struct FName                                       SimpleBodyBoneName;                                       // 0x0260(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FName>                               ComplexBodyBoneNames;                                     // 0x0268(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FName                                       MainComplexBodyBoneName;                                  // 0x0278(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ComplexCollisionProfileName;                              // 0x0280(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsDying : 1;                                             // 0x0288(0x0001) (CPF_Edit, CPF_Net, CPF_EditConst)
	unsigned char                                      bIsBroken : 1;                                            // 0x0288(0x0001) (CPF_Edit, CPF_Net, CPF_EditConst)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0289(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x028C(0x0004) (CPF_Edit, CPF_Net, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              HealthMax;                                                // 0x0290(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Fuel;                                                     // 0x0294(0x0004) (CPF_Edit, CPF_Net, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              FuelMax;                                                  // 0x0298(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x029C(0x0004) MISSED OFFSET
	class UClass*                                      VehicleExplosionDamageType;                               // 0x02A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x02A8(0x0010) UNKNOWN PROPERTY: ArrayProperty TslGame.TslVehicleCommonComponent.CharacterDamageIgnores
	class UVehicleArmorDataAsset*                      VehicleArmorData;                                         // 0x02B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      VehicleUI;                                                // 0x02C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        ComplexCollisionMesh;                                     // 0x02C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleCommonComponent");
		return ptr;
	}


	void SetVehicleHealth(float NewHealth);
	void SetVehicleFuelPercent(float Percent);
	void SetVehicleFuel(float NewFuel);
	void Repair();
	void OnRep_Health(float LastHealth);
	void OnRep_Fuel(float LastFuel);
	void OnRep_Dying();
	void OnRep_Broken();
	bool IsDying();
	bool IsBroken();
	class UClass* GetVehicleUI();
	float GetVehicleHealthPercent();
	float GetVehicleHealth();
	float GetVehicleFuelPercent();
	float GetVehicleFuel();
	float GetVehicleBaseHealth();
	float GetVehicleBaseFuel();
	bool CanIgnoreCharacterDamage();
	void Break();
	void AddVehicleFuel(float Delta);
};


// Class TslGame.VehicleSurfaceAudioData
// 0x0010 (0x0040 - 0x0030)
class UVehicleSurfaceAudioData : public UDataAsset
{
public:
	class UAkAudioEvent*                               EventIn;                                                  // 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               EventOut;                                                 // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleSurfaceAudioData");
		return ptr;
	}

};


// Class TslGame.TslVehicleEffectComponent
// 0x0520 (0x0700 - 0x01E0)
class UTslVehicleEffectComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01E0(0x0010) MISSED OFFSET
	class UMeshComponent*                              MeshComponent;                                            // 0x01F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                EngineSoundComponent;                                     // 0x01F8(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FVehicleEffectInfo                          VehicleEffectInfo;                                        // 0x0200(0x0110) (CPF_Edit, CPF_DisableEditOnInstance)
	class ATslParticle*                                MufflerEffect;                                            // 0x0310(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                Muffler2Effect;                                           // 0x0318(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                BoostEffect;                                              // 0x0320(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                Boost2Effect;                                             // 0x0328(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                DamagedEffect;                                            // 0x0330(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                ExplosionEffect;                                          // 0x0338(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                FrontTrailEffect;                                         // 0x0340(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                RearTrailEffect;                                          // 0x0348(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                ThrusterEffect;                                           // 0x0350(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                Thruster2Effect;                                          // 0x0358(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                FrontFoamLeftEffect;                                      // 0x0360(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                FrontFoamRightEffect;                                     // 0x0368(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0370(0x0048) MISSED OFFSET
	float                                              TrailSpeedThreshold;                                      // 0x03B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FrontFoamSpawnThreshold;                                  // 0x03BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bRPMOverride : 1;                                         // 0x03C0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	class ATslWheeledVehicle*                          WheeledVehicleReference;                                  // 0x03C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslFloatingVehicle*                         FloatingVehicleReference;                                 // 0x03D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseNewChassisAudio : 1;                                  // 0x03D8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	class UCurveFloat*                                 Curve_EngineAudio;                                        // 0x03E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseDopplerEffect : 1;                                    // 0x03E8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData05[0x50];                                      // 0x03E9(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslVehicleEffectComponent.SurfaceAudioMap
	unsigned char                                      bUseNewSurfaceAudio : 1;                                  // 0x0440(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreHandbrake : 1;                                     // 0x0441(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x0442(0x0006) MISSED OFFSET
	TArray<int>                                        MeasuredWheelIndices;                                     // 0x0448(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<int>                                        MeasuredWheelIndicesSlip;                                 // 0x0458(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<int>                                        MeasuredWheelIndicesSpin;                                 // 0x0468(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<int>                                        MeasuredWheelIndicesBrake;                                // 0x0478(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              SuspenionOffsetForContact;                                // 0x0488(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SurfaceActivationValue;                                   // 0x048C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SurfaceDeactivationValue;                                 // 0x0490(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DT_Multiplier;                                            // 0x0494(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinVelocityForSurfaceCheck;                               // 0x0498(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinRotationSpeedForSurfaceCheck;                          // 0x049C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinSlip;                                                  // 0x04A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinSpin;                                                  // 0x04A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinVelocityForBreak;                                      // 0x04A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BrakeNoDriverMultiplier;                                  // 0x04AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                VelocityInterpSpeed;                                      // 0x04B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                SlipInterpSpeed;                                          // 0x04B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                SpinInterpSpeed;                                          // 0x04B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                BreakInterpSpeed;                                         // 0x04BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bDebugVisualizedMeasuredWheels : 1;                       // 0x04C0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04C1(0x0003) MISSED OFFSET
	float                                              AngularVelocityCoefficient;                               // 0x04C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LateralVelocityCoeffictient;                              // 0x04C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LateralVelocityClamp;                                     // 0x04CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bProcessShiftStart : 1;                                   // 0x04D0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bProcessShiftEnd : 1;                                     // 0x04D1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bProcessReverse : 1;                                      // 0x04D2(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseTargetGearForAudio : 1;                               // 0x04D3(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bProcessWaterPropeller : 1;                               // 0x04D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	float                                              ReverseThrottleScalar;                                    // 0x04D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               GearUpSound_Start;                                        // 0x04E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               GearDownSound_Start;                                      // 0x04E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               GearUpSound_End;                                          // 0x04F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               GearDownSound_End;                                        // 0x04F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               GearReverseSound;                                         // 0x0500(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x90];                                      // 0x0508(0x0090) MISSED OFFSET
	TMap<int, class UMaterialInterface*>               DestroyedMaterialMap;                                     // 0x0598(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              ApplyDestroyedMaterialDelay;                              // 0x05E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUsesBoosting : 1;                                        // 0x05EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x05ED(0x0003) MISSED OFFSET
	class UAkAudioEvent*                               BoostStartAk;                                             // 0x05F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               BoostEndAk;                                               // 0x05F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x0600(0x0001) MISSED OFFSET
	unsigned char                                      bShouldTickLights : 1;                                    // 0x0601(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x6];                                       // 0x0602(0x0006) MISSED OFFSET
	struct FVehicleLightSettings                       LightSettings;                                            // 0x0608(0x0078) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      bUseDynamicCamera : 1;                                    // 0x0680(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x7];                                       // 0x0681(0x0007) MISSED OFFSET
	struct FVehicleCameraEffectSettings                CameraEffectSettings;                                     // 0x0688(0x0070) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData15[0x8];                                       // 0x06F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleEffectComponent");
		return ptr;
	}


	void SetVehicleMaterialsToDestroyed();
	void SetEngineSoundRTPC(const struct FString& RTPC, float Value);
	void OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHealthChange(float CurrentHealth, float LastHealth, float HealthMax, bool bIsDying);
	void OnDestroyedImpactEffect(class AActor* DestroyedActor);
	void OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	float GetTailLightIntensity();
	float GetHeadlightIntensity();
	class UAkComponent* GetEngineSoundComponent();
	bool GetEngineOn();
	void ApplyDestoyedMaterialWithDelay();
};


// Class TslGame.TslVehicleHitComponent
// 0x0180 (0x0360 - 0x01E0)
class UTslVehicleHitComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnCharacterHit;                                           // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x18];                                      // 0x01F0(0x0018) MISSED OFFSET
	class UMeshComponent*                              MeshComponent;                                            // 0x0208(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              HitCharacterDuration;                                     // 0x0210(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x54];                                      // 0x0214(0x0054) MISSED OFFSET
	float                                              LeaveCharacterIgnoreDuration;                             // 0x0268(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CharacterHitMinimumVehicleSpeed;                          // 0x026C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CharacterDamageVelocityUnitMultiplier;                    // 0x0270(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CharacterDamageMassUnitMultiplier;                        // 0x0274(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 CharacterDamageSpeedCurve;                                // 0x0278(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 CharacterDamageSpeedCurve_Console;                        // 0x0280(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 CharacterDamageMassCurve;                                 // 0x0288(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinimumCharacterDamage;                                   // 0x0290(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CharacterLaunchSpeedMultiplier;                           // 0x0294(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinimumCharacterLaunchSpeed;                              // 0x0298(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpulseMultiplier;                                 // 0x029C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UPhysicalMaterial*                           VoidPhysicalMaterial;                                     // 0x02A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactModifier;                                    // 0x02A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactModifierUpsideDown;                          // 0x02AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactAbsorption;                                  // 0x02B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactAbsorption_Console;                          // 0x02B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactAbsorptionUpsideDown;                        // 0x02B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactAbsorptionRider;                             // 0x02BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactAbsorptionRider_Console;                     // 0x02C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactAbsorptionRiderUpsideDown;                   // 0x02C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactVehicleDamageMultiplier;                     // 0x02C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactVehicleDamageMultiplier_Console;             // 0x02CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactRiderDamageMultiplier;                       // 0x02D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PhysicsImpactRiderDamageMultiplier_Console;               // 0x02D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      VehicleHitDamageType;                                     // 0x02D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      VehicleCrashDamageType;                                   // 0x02E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExplosionBaseDamage;                                      // 0x02E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExplosionMinimumDamage;                                   // 0x02EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExplosionRadiusInner;                                     // 0x02F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExplosionRadiusOuter;                                     // 0x02F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExplosionDamageFalloff;                                   // 0x02F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02FC(0x0004) MISSED OFFSET
	class UClass*                                      ExplosionDamageType;                                      // 0x0300(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ExplosionDamagePreventionChannel;                         // 0x0308(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xF];                                       // 0x0309(0x000F) MISSED OFFSET
	float                                              ImpulseLimitationSpeedThreshold;                          // 0x0318(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ImpulseLimitationSpeedThreshold_Console;                  // 0x031C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CollectTime;                                              // 0x0320(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0324(0x000C) MISSED OFFSET
	TArray<struct FVehicleDebugHit>                    DebugHitHistory;                                          // 0x0330(0x0010) (CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0340(0x0008) MISSED OFFSET
	TArray<class UClass*>                              HitAbsorberTypes;                                         // 0x0348(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleHitComponent");
		return ptr;
	}


	void OnSyncHit(const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	float GetPhysicsImpactVehicleDamageMultiplier();
	float GetPhysicsImpactRiderDamageMultiplier();
	float GetPhysicsImpactAbsorptionRider();
	float GetPhysicsImpactAbsorption();
	float GetImpulseLimitationSpeedThreshold();
	class UCurveFloat* GetCharacterDamageSpeedCurve();
};


// Class TslGame.TslVehicleRadioComponent
// 0x0030 (0x0210 - 0x01E0)
class UTslVehicleRadioComponent : public UActorComponent
{
public:
	class ATslWheeledVehicle*                          WheeledVehicle;                                           // 0x01E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAkComponent*                                AkComponent;                                              // 0x01E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleRadioDataAsset*                   RadioDataAsset;                                           // 0x01F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FTimerHandle                                UpdateViewTargetTimerHandle;                              // 0x01F8(0x0008) (CPF_Transient)
	float                                              RadioMaxVolume;                                           // 0x0200(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      RadioVolume;                                              // 0x0204(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      RadioChannel;                                             // 0x0205(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bPowerOn : 1;                                             // 0x0206(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsActiveInViewTarget : 1;                                // 0x0207(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0208(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleRadioComponent");
		return ptr;
	}


	void UpdateViewTarget();
	void ServerToggleRadioPower();
	void ServerSetRadioVolume(bool bIncrease);
	void ServerSetRadioChannel(bool bIncrease);
	void OnRide(class ATslCharacter* InRider, class UVehicleSeatInteractionComponent* InSeat);
	void OnLeave(class ATslCharacter* InRider, class UVehicleSeatInteractionComponent* InSeat);
};


// Class TslGame.TslVehicleRadioDataAsset
// 0x0050 (0x0080 - 0x0030)
class UTslVehicleRadioDataAsset : public UDataAsset
{
public:
	class UAkAudioEvent*                               RadioOn;                                                  // 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               RadioOff;                                                 // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               ChannelNoise;                                             // 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VolumeParameterString;                                    // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FString                                     ChannelParameterString;                                   // 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	int                                                MaxChannel;                                               // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinChannel;                                               // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxVolume;                                                // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinVolume;                                                // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                DefaultVolume;                                            // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleRadioDataAsset");
		return ptr;
	}

};


// Class TslGame.TslVehicleReactionInterface
// 0x0000 (0x0028 - 0x0028)
class UTslVehicleReactionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleReactionInterface");
		return ptr;
	}

};


// Class TslGame.TslVehicleSeatComponent
// 0x0100 (0x02E0 - 0x01E0)
class UTslVehicleSeatComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnRide;                                                   // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeave;                                                  // 0x01F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriverRide;                                             // 0x0200(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriverLeave;                                            // 0x0210(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostDriverRide;                                         // 0x0220(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostDriverLeave;                                        // 0x0230(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TArray<class UVehicleSeatInteractionComponent*>    Seats;                                                    // 0x0240(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bUseSeatCamera : 1;                                       // 0x0250(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDoFlipCheck : 1;                                         // 0x0251(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0252(0x0002) MISSED OFFSET
	float                                              FlipForce;                                                // 0x0254(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDoEntryAngleCheck : 1;                                   // 0x0258(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0259(0x0003) MISSED OFFSET
	float                                              MinEntryAngle;                                            // 0x025C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDampenPlayerVelocityOnLeave : 1;                         // 0x0260(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0261(0x0003) MISSED OFFSET
	float                                              OnLeaveVelocityMultiplier;                                // 0x0264(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseActiveStabilize : 1;                                  // 0x0268(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRiderChangeSeat : 1;                                     // 0x0269(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x026A(0x0002) MISSED OFFSET
	float                                              TargetSpringArmLengthInFirstPerson;                       // 0x026C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TargetSpringArmLengthInThirdPerson;                       // 0x0270(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TWeakObjectPtr<class ATslCharacter>                LastDriver;                                               // 0x0274(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x64];                                      // 0x027C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleSeatComponent");
		return ptr;
	}


	void TryToStabilize();
	void TryToRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void TryToLeave(class ATslCharacter* Rider, bool bForce);
	void TryToFlip();
	void Ride(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void PostDriverRide();
	void PostDriverLeave();
	void OnFuelChange(float CurrentFuel, float LastFuel, float FuelMax);
	void Leave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat, bool bForce);
	void KillAllRiders(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	int GetVehicleSeatIndex(class UVehicleSeatInteractionComponent* Seat);
	TArray<class UVehicleSeatInteractionComponent*> GetSeats();
	class UVehicleSeatInteractionComponent* GetSeat(int SeatIndex);
	TArray<class ATslCharacter*> GetRiders();
	class ATslCharacter* GetLastDriver(float LastDuration);
	class ATslCharacter* GetDriver();
};


// Class TslGame.TslVehicleSinkComponent
// 0x00B0 (0x0290 - 0x01E0)
class UTslVehicleSinkComponent : public UActorComponent
{
public:
	class UClass*                                      SurfaceRippleFx;                                          // 0x01E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       RippleEmissionScaleParam;                                 // 0x01E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FName>                               RippleEmitSocketsNames;                                   // 0x01F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UCurveFloat*                                 RippleEmissionScalePerDepthCurve;                         // 0x0200(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<float>                                      SinkingSpeedMul;                                          // 0x0208(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UClass*                                      FinalSplashFxTemplate;                                    // 0x0218(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 DensityChangeCurve;                                       // 0x0220(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxSinkingTime;                                           // 0x0228(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxRippleEmissionDepth;                                   // 0x022C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0230(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0238(0x0018) MISSED OFFSET
	class USkeletalMeshComponent*                      MeshComponent;                                            // 0x0250(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleEffectComponent*                  VehicleEffectComponent;                                   // 0x0258(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UMovementComponent*                          MovementComponent;                                        // 0x0260(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class ATslParticle*>                        RippleEffects;                                            // 0x0268(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0278(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleSinkComponent");
		return ptr;
	}

};


// Class TslGame.TslVehicleSyncComponent
// 0x0410 (0x05F0 - 0x01E0)
class UTslVehicleSyncComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnSyncHit;                                                // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01F0(0x000C) MISSED OFFSET
	float                                              MinReliableCorrectionInterval;                            // 0x01FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0200(0x0004) MISSED OFFSET
	float                                              MinCorrectionInterval;                                    // 0x0204(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0208(0x0004) MISSED OFFSET
	float                                              SendingToServerIntervalAtClient;                          // 0x020C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0210(0x0008) MISSED OFFSET
	float                                              SendingReliableHitToServerIntervalAtClient;               // 0x0218(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	float                                              AllowedMaxDistanceSqAtServer;                             // 0x0220(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StationaryCorrectionIntervalAtClient;                     // 0x0224(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0228(0x0004) MISSED OFFSET
	float                                              StationaryCorrectionSpeedThresholdSq;                     // 0x022C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StationaryCorrectionThresholdDistanceSq;                  // 0x0230(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3BC];                                     // 0x0234(0x03BC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleSyncComponent");
		return ptr;
	}


	void SendServerOthervehicleMoveToClientUnreliably(class UTslVehicleSyncComponent* TargetSyncComponent, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendServerOthervehicleMoveToClientReliably(class UTslVehicleSyncComponent* TargetSyncComponent, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendServerMoveToClientUnreliably(const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendServerMoveToClientReliably(int InCorrectionId, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendClientMoveToServerUnreliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, uint32_t InPhysCallerCheckValue);
	void SendClientMoveToServerReliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, uint32_t InPhysCallerCheckValue);
	void SendClientHitToServerUnreliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit, uint32_t InPhysCallerCheckValue);
	void SendClientHitToServerReliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit, uint32_t InPhysCallerCheckValue);
	void OnHitAtServer(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHitAtClient(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDriverRide();
};


// Class TslGame.TslVehicleTempComponent
// 0x0010 (0x01F0 - 0x01E0)
class UTslVehicleTempComponent : public UActorComponent
{
public:
	float                                              TickInterval;                                             // 0x01E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleTempComponent");
		return ptr;
	}

};


// Class TslGame.TslVehicleXRayComponent
// 0x0010 (0x01F0 - 0x01E0)
class UTslVehicleXRayComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleXRayComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class TslGame.TslViewTargetTempComponent
// 0x0020 (0x0200 - 0x01E0)
class UTslViewTargetTempComponent : public UActorComponent
{
public:
	TArray<struct FTempComponentInfo>                  ComponentInfos;                                           // 0x01E0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x01F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslViewTargetTempComponent");
		return ptr;
	}


	void AddTempComponentWithDelegate(class USceneComponent* TempComponent, const struct FScriptDelegate& DelegateToCall);
	void AddTempComponent(class USceneComponent* TempComponent);
};


// Class TslGame.TslWaveSystem
// 0x0098 (0x00C0 - 0x0028)
class UTslWaveSystem : public UObject
{
public:
	TArray<struct FNpcWaveInfo>                        WaveInfoArray;                                            // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	int                                                CurrentWaveIndex;                                         // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FNpcWaveInfo                                PendingWaveInfo;                                          // 0x0040(0x0018) (CPF_Transient)
	int                                                DesireSpawnCount;                                         // 0x0058(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                SpawnSuccessCount;                                        // 0x005C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                SpawnFailCount;                                           // 0x0060(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                RetrySpawnCount;                                          // 0x0064(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0068(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslWaveSystem.AliveSpawnedActorSet
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWaveSystem");
		return ptr;
	}

};


// Class TslGame.TslWeapon_Gun_Projectile
// 0x0000 (0x0C80 - 0x0C80)
class ATslWeapon_Gun_Projectile : public ATslWeapon_Gun
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon_Gun_Projectile");
		return ptr;
	}


	void SimulateFire_BP();
	void Server_FireProjectile(const struct FVector& InLocation, const struct FRotator& InRotation);
};


// Class TslGame.TslWeapon_Melee
// 0x00C0 (0x0860 - 0x07A0)
class ATslWeapon_Melee : public ATslWeapon
{
public:
	class UAkAudioEvent*                               AttackSoundAk;                                            // 0x07A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCapsuleComponent*                           HitCapsuleComponent;                                      // 0x07A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<struct FMeleeWeaponAnim>                    AttackAnims;                                              // 0x07B0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              Damage;                                                   // 0x07C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponImpact;                                             // 0x07C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x07C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x07D0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslWeapon_Melee.HitCheckType
	unsigned char                                      UnknownData01[0x7];                                       // 0x07D1(0x0007) MISSED OFFSET
	class UClass*                                      ImpactTemplate;                                           // 0x07D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x80];                                      // 0x07E0(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon_Melee");
		return ptr;
	}


	void ServerNotifyHit(int checksum_CD, TArray<struct FHitResult> Impacts, uint32_t IntValue1, const struct FAttackId& AttackId, const struct FVector& Location, TArray<struct FVector> Locations, int Checksum);
	void ServerAttack(int AnimIndex);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	void ClientHit_Confirmed(const struct FHitResult& Impact);
	void ClientAttack(int AnimIndex);
};


// Class TslGame.TslWeapon_Shield
// 0x00E0 (0x0940 - 0x0860)
class ATslWeapon_Shield : public ATslWeapon_Melee
{
public:
	class UClass*                                      PushDamageType;                                           // 0x0860(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              SphereQueryObjects;                                       // 0x0868(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              PushDamage;                                               // 0x0878(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PushDistance;                                             // 0x087C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PushImpulseStrength;                                      // 0x0880(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinPushElevationAngleDeg;                                 // 0x0884(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PushDuration;                                             // 0x0888(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ServerPushAllowanceDist;                                  // 0x088C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0890(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslWeapon_Shield.AllowedVaultingTypes
	unsigned char                                      UnknownData01[0x50];                                      // 0x08E0(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslWeapon_Shield.VaultingDataOverrides
	unsigned char                                      UnknownData02[0x8];                                       // 0x0930(0x0008) MISSED OFFSET
	class UFlashbangComponent*                         FlashbangComponent;                                       // 0x0938(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon_Shield");
		return ptr;
	}


	void ServerNotifyPush(const struct FAttackId& AttackId, const struct FHitResult& HitResult, const struct FVector& Direction);
	void ServerActivateDebuff();
	void OnRep_DebufChargesLeft();
	void OnPushActivated();
	void OnDebuffOutOfCharges();
	void OnDebuffActivated();
	void ClientSimulatePushAttack();
	void ClientSimulateFlashActivation();
};


// Class TslGame.TslWeaponDisplay
// 0x0138 (0x0520 - 0x03E8)
class ATslWeaponDisplay : public AActor
{
public:
	unsigned char                                      bActive : 1;                                              // 0x03E8(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET
	class ATslLobbyWeapon*                             SpawnedWeapon;                                            // 0x03F0(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     DefaultWeaponLocation;                                    // 0x03F8(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FVector                                     MaxZoomWeaponLocation;                                    // 0x0404(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	TArray<class UAsyncStaticMeshComponent*>           AttachmentMeshes;                                         // 0x0410(0x0010) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor)
	class UPostProcessComponent*                       EffectPostProcessComponent;                               // 0x0420(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0428(0x0030) MISSED OFFSET
	unsigned char                                      bWaitForCharmPhysicsUpdate : 1;                           // 0x0458(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	float                                              CharmPhysicsUpdateDelayTime;                              // 0x045C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CharmPhysicsUpdateCheckTime;                              // 0x0460(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	class USceneComponent*                             RotationParentRef;                                        // 0x0468(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0470(0x0008) MISSED OFFSET
	struct FRotator                                    SpawnedWeaponRotationStartOffset;                         // 0x0478(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    SpawnedWeaponRotationEndOffset;                           // 0x0484(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    ToRotate;                                                 // 0x0490(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bUserModified : 1;                                        // 0x049C(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoSpinEnabled : 1;                                     // 0x049D(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bReturnToFaceEnabled : 1;                                 // 0x049E(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x049F(0x0001) MISSED OFFSET
	float                                              MomentumAccumulationMultiplier;                           // 0x04A0(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecayTimer;                                               // 0x04A4(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecayTimeInSeconds;                                       // 0x04A8(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RotationDirection;                                        // 0x04AC(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RotationSpeed;                                            // 0x04B0(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RotationDeltaMin;                                         // 0x04B4(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RotationDeltaMax;                                         // 0x04B8(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 DecayCurveDefault;                                        // 0x04C0(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 DecayCurveContinuousSpin;                                 // 0x04C8(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bReturningToFace : 1;                                     // 0x04D0(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04D1(0x0003) MISSED OFFSET
	float                                              FaceRotationTimer;                                        // 0x04D4(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FaceRotationSpeed;                                        // 0x04D8(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    FaceRotationFrom;                                         // 0x04DC(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    FaceRotationTo;                                           // 0x04E8(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    FaceRotationRight;                                        // 0x04F4(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    FaceRotationLeft;                                         // 0x0500(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    FaceRotationDefault;                                      // 0x050C(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      bOverrideTargetFacing : 1;                                // 0x0518(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeaponDisplay");
		return ptr;
	}


	void Tick(float DeltaSeconds);
	void SpawnWeapon(class ALobbyCharacter* LobbyOwner, const struct FString& ItemId, const struct FString& CharmId, const struct FString& VariantId, const struct FString& SkinId, bool PlayAnimation);
	void Show(bool visible);
	void SetAngle(float YawInDegree, bool bImmediately);
	void SetActive(bool active);
	void OnPlayAnimation();
	bool IsActive();
	class UMaterialInterface* GetWeaponMaterial();
	class UStaticMeshComponent* GetStaticMesh();
	struct FShowWeaponParams GetShowWeaponParams(class UClass* WeaponClass, class UClass* SkinClass);
	void DespawnWeapon();
	void DecayRotationMomentum(float DeltaSeconds);
	void AddScale(float ScaleToAdd);
	void AddRotationMomentum(float DeltaX, float DeltaY);
	void AddAngle2(float YawInDegree, float RollInDegree);
	void AddAngle(float YawInDegree);
};


// Class TslGame.TslWeatherManager
// 0x00D0 (0x04B8 - 0x03E8)
class ATslWeatherManager : public AActor
{
public:
	float                                              StartTimeMin;                                             // 0x03E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              StartTimeMax;                                             // 0x03EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              BlendInTime;                                              // 0x03F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x03F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              DurationTimeMin;                                          // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              DurationTimeMax;                                          // 0x03FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	TArray<struct FDynamicWeatherSetting>              DynamicWeathers;                                          // 0x0400(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0410(0x000C) MISSED OFFSET
	unsigned char                                      bWeatherChanging : 1;                                     // 0x041C(0x0001) (CPF_Net)
	unsigned char                                      UnknownData01[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	struct FDynamicWeatherReplicationData              DynamicWeatherStateInitial;                               // 0x0420(0x0010) (CPF_Net)
	int                                                TargetDynamicWeatherIndex;                                // 0x0430(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CurrentWeatherElapsedTime;                                // 0x0434(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FTslLocalWeatherVolume>              LocalWeatherVolumes;                                      // 0x0438(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate)
	class ATslParticle*                                WeatherParticle;                                          // 0x0448(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreGlobalSpawnScale : 1;                              // 0x0450(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0451(0x0007) MISSED OFFSET
	class AExponentialHeightFog*                       HeightFog;                                                // 0x0458(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x58];                                      // 0x0460(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeatherManager");
		return ptr;
	}


	void OnRep_CurrentWeatherElapsedTime();
};


// Class TslGame.TslWetEffect
// 0x0000 (0x03E8 - 0x03E8)
class ATslWetEffect : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWetEffect");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslWheeledVehicle
// 0x0418 (0x0870 - 0x0458)
class ATslWheeledVehicle : public AWheeledVehicle
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0458(0x0098) MISSED OFFSET
	class USphereComponent*                            ActivationTrigger;                                        // 0x04F0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class UGamePadInputAixsComponent*                  GamePadInputAixsComponent;                                // 0x04F8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              Health;                                                   // 0x0500(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              HealthMax;                                                // 0x0504(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Fuel;                                                     // 0x0508(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              FuelMax;                                                  // 0x050C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStabilizeActive : 1;                                     // 0x0510(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0511(0x0003) MISSED OFFSET
	float                                              AirControlPitchInput;                                     // 0x0514(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SpeedKPH;                                                 // 0x0518(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ThrottleInput;                                            // 0x051C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RPM;                                                      // 0x0520(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              Brake;                                                    // 0x0524(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LatMax;                                                   // 0x0528(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LongSum;                                                  // 0x052C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              WaterDepthMax;                                            // 0x0530(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SurfaceMax;                                               // 0x0534(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SuspensionMax;                                            // 0x0538(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                FlatTireCount;                                            // 0x053C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDirtySpeedKPH : 1;                                       // 0x0540(0x0001)
	unsigned char                                      bDirtyThrottleInput : 1;                                  // 0x0540(0x0001)
	unsigned char                                      bDirtyRPM : 1;                                            // 0x0540(0x0001)
	unsigned char                                      bDirtyWaterDepthMax : 1;                                  // 0x0540(0x0001)
	unsigned char                                      bDirtyBrake : 1;                                          // 0x0540(0x0001)
	unsigned char                                      bDetectedStartup : 1;                                     // 0x0540(0x0001)
	unsigned char                                      bDetectedBraking : 1;                                     // 0x0540(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0541(0x0007) MISSED OFFSET
	TArray<float>                                      WheelsLatSlip;                                            // 0x0548(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<float>                                      WheelsLongSlip;                                           // 0x0558(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<float>                                      WheelsSuspensionOffset;                                   // 0x0568(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UPhysicalMaterial*>                   WheelsContactSurface;                                     // 0x0578(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UPhysicalMaterial*>                   TestWheelsContactSurface_prev;                            // 0x0588(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<float>                                      WheelsSuspensionMaxDrop;                                  // 0x0598(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<float>                                      WheelsSuspensionMaxRaise;                                 // 0x05A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              EngineOnPersistenceTimeDriver;                            // 0x05B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              EngineOnPersistenceTimeNoDriver;                          // 0x05BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LastEngineCriteriaTime;                                   // 0x05C0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x05C4(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               NullSound;                                                // 0x05C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTslImpactSoundInfo                         ImpactSound;                                              // 0x05D0(0x0060) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTslImpactSoundInfo                         LandingSound;                                             // 0x0630(0x0060) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               StartupSound;                                             // 0x0690(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               BreakSound;                                               // 0x0698(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               StopSound;                                                // 0x06A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               CharacterHitSound;                                        // 0x06A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxClampThrottleInClutch;                                 // 0x06B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bApplyCustomAnimUpdaterateSettings : 1;                   // 0x06B4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x06B5(0x0003) MISSED OFFSET
	struct FAnimUpdateRateSettings                     AnimUpdateRateSettings;                                   // 0x06B8(0x0078) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FName                                       FirstPersonSprinArmName;                                  // 0x0730(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       FirstPersonCameraName;                                    // 0x0738(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bWheelGrounded : 1;                                       // 0x0740(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bWantsToBoost : 1;                                        // 0x0740(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0741(0x0003) MISSED OFFSET
	float                                              TorqueMultiplierForBoosting;                              // 0x0744(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTickWalkableCheck : 1;                                   // 0x0748(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0749(0x0003) MISSED OFFSET
	float                                              MinWalkableVelocity;                                      // 0x074C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0750(0x0008) MISSED OFFSET
	class UTslVehicleHitComponent*                     VehicleHitComponent;                                      // 0x0758(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleCommonComponent*                  VehicleCommonComponent;                                   // 0x0760(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleSeatComponent*                    VehicleSeatComponent;                                     // 0x0768(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleEffectComponent*                  VehicleEffectComponent;                                   // 0x0770(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleSyncComponent*                    VehicleSyncComponent;                                     // 0x0778(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleTempComponent*                    VehicleTempComponent;                                     // 0x0780(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleXRayComponent*                    VehicleXRayComponent;                                     // 0x0788(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslPawnInputBindingComponent*               TslPawnInputBindingComponent;                             // 0x0790(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x0798(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslHornComponent*                           TslHornComponent;                                         // 0x07A0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AudioComEngine;                                           // 0x07A8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleRadioComponent*                   RadioAudioComponent;                                      // 0x07B0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x07B8(0x0010) MISSED OFFSET
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x07C8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FName                                       SinkPoint;                                                // 0x07D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SinkBuffType;                                             // 0x07D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x07E0(0x0008) MISSED OFFSET
	class UBuffComponet*                               BuffComponent;                                            // 0x07E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UClass*>                              ComponentsToDestroyOnDedicatedServer;                     // 0x07F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      bProcessAutoEject : 1;                                    // 0x0800(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0801(0x0003) MISSED OFFSET
	float                                              AutoEjectGroundDistance;                                  // 0x0804(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AutoEjectRoll;                                            // 0x0808(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AutoEjectPitch;                                           // 0x080C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AutoEject_RiseRate;                                       // 0x0810(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AutoEject_FallRate;                                       // 0x0814(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0818(0x0004) MISSED OFFSET
	unsigned char                                      bRunStabilizeOnEntry : 1;                                 // 0x081C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x081D(0x0003) MISSED OFFSET
	float                                              StabilizeInitialTimer;                                    // 0x0820(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StablizeCurrentTimer;                                     // 0x0824(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SteeringYawBias;                                          // 0x0828(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x44];                                      // 0x082C(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWheeledVehicle");
		return ptr;
	}


	void UpdateWheelSound();
	void UpdateWheelCaching();
	void UpdateBasicInfoCaching();
	void UnBindCallbackToHUD(class ATslPlayerController* InController);
	void SetLightMaterialParameters(float InLightValue);
	void SetAirControlPitchInput(float InInput);
	void ServerSetBoosting(bool bNewBoosting);
	void Server_NotifyEngineStart();
	void OnVehicleEjected();
	bool OnStopHandbrakePad();
	void OnStopHandbrake();
	bool OnStopBoostingPad();
	void OnStopBoosting();
	bool OnStartHandbrakePad();
	void OnStartHandbrake();
	bool OnStartBoostingPad();
	void OnStartBoosting();
	void OnRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void OnPostDriverRide();
	void OnPostDriverLeave();
	void OnLeave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void OnCharacterHit(class ATslCharacter* HitCharacter, float HitDamage);
	void OnBreak();
	void OnBlockingWidgetOpened(class UWidget* Widget);
	void NotifyHandbrake(bool bPressed);
	void MulticastCharacterHitEffects(class ATslCharacter* CharacterHit, float HitDamage);
	void Multi_NotifyEngineStart();
	void MoveForwardPad(float Val);
	bool IsSunken();
	bool IsStablizeOverrideActive();
	bool IsStabilizeOverrideEnabled();
	bool IsInWaterVolume();
	bool IsBoosting();
	class UTslWheeledVehicleMovement* GetTslVehicleMovement();
	float GetSteeringInput();
	float GetCurrentWaterSurfaceZ();
	class UBuffComponet* GetBuffComponent();
	float GetAirControlPitchInput();
	void BindCallbackToHUD(class ATslPlayerController* InController);
	void ActivationTriggerEndOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void ActivationTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
};


// Class TslGame.TslMotorbikeVehicle
// 0x02A0 (0x0B10 - 0x0870)
class ATslMotorbikeVehicle : public ATslWheeledVehicle
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0870(0x000C) MISSED OFFSET
	unsigned char                                      bUseKickstandStabilize : 1;                               // 0x087C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x087D(0x0003) MISSED OFFSET
	float                                              KickstandSleepTimer;                                      // 0x0880(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinSuspensionOffsetForContact;                            // 0x0884(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bStabilizeOnServer : 1;                                   // 0x0888(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bStabilizeOnRemoteClient : 1;                             // 0x0889(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x088A(0x0002) MISSED OFFSET
	float                                              KickstandStabAngularDamp;                                 // 0x088C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultAngularDamping_Client;                             // 0x0890(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultAngularDamping_Server;                             // 0x0894(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NoDriverAngularDamping_Client;                            // 0x0898(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NoDriverAngularDamping_Server;                            // 0x089C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              KickstandStabilizeTorqueScalar;                           // 0x08A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              KickstandStabilizeRollScalar;                             // 0x08A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              KickstandStabilizeRollMinRange;                           // 0x08A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinVelocityForStabilizeOverride;                          // 0x08AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              KickstandStabLinearDamp;                                  // 0x08B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DirectStabilizeSpeedKickstand;                            // 0x08B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DirectStabilizeSpeedKickstand_LowRoll;                    // 0x08B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AddZPerSecOnStabilize;                                    // 0x08BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseTeleportOnStabilize : 1;                              // 0x08C0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseLinearStabilizeInterp : 1;                            // 0x08C1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseSleepForcingOnStabilize : 1;                          // 0x08C2(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x08C3(0x0001) MISSED OFFSET
	float                                              LinearStabilizeRollCutoff;                                // 0x08C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SleepForceRollLimit;                                      // 0x08C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DirectStabilizeSpeedDriver;                               // 0x08CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       StabilizeBone_Low;                                        // 0x08D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       StabilizeBone_High;                                       // 0x08D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_Roll;                                               // 0x08E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_RollReturn;                                         // 0x08E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_Steer;                                              // 0x08F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_Yaw;                                                // 0x08F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_Torque;                                             // 0x0900(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     StabStaticVector;                                         // 0x0908(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     StabStaticVectorKickstand;                                // 0x0914(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     StabNoDriverVector;                                       // 0x0920(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabX_Velocity_In;                                        // 0x092C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabX_Velocity_Out;                                       // 0x0934(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabX_Pitch_In;                                           // 0x093C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabX_Pitch_Out;                                          // 0x0944(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabZ_Velocity_In;                                        // 0x094C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabZ_Velocity_Out;                                       // 0x0954(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabZ_Roll_In;                                            // 0x095C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabZ_Roll_Out;                                           // 0x0964(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabZ_Pitch_In;                                           // 0x096C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabZ_Pitch_Out;                                          // 0x0974(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabTorquePitch_In;                                       // 0x097C(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabTorquePitch_Out;                                      // 0x0984(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StabTorque_ForceScalar;                                   // 0x098C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabTorque_AngVel_In;                                     // 0x0990(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StabTorque_AngVel_Out;                                    // 0x0998(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseFlipping : 1;                                         // 0x09A0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x09A1(0x0003) MISSED OFFSET
	float                                              FlippingForce;                                            // 0x09A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InitialFlipTimer;                                         // 0x09A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bMappedAngularDamping : 1;                                // 0x09AC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x09AD(0x0003) MISSED OFFSET
	float                                              MinVelocityForFlipping;                                   // 0x09B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DisableDamageAfterFlipSec;                                // 0x09B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x09B8(0x000C) MISSED OFFSET
	float                                              DefaultLinearDamp;                                        // 0x09C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultAngularDamp;                                       // 0x09C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultMAV;                                               // 0x09CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ContactAlpha_RiseRate;                                    // 0x09D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ContactAlpha_FallRate;                                    // 0x09D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ContactAlpha_LowerClamp;                                  // 0x09D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapPitchIn;                                  // 0x09DC(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapRollIn;                                   // 0x09E4(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ContactAlphaRemoteMultiplier;                             // 0x09EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bStabilizeWithContactNormal : 1;                          // 0x09F0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x09F1(0x0003) MISSED OFFSET
	float                                              StabilizeWithContactNormalAlpha;                          // 0x09F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ContactNormalInterpSpeed;                                 // 0x09F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseForceFramceScale : 1;                                 // 0x09FC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseLocalSpaceAngVel : 1;                                 // 0x09FD(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseMainBodyCOMNoDriver : 1;                              // 0x09FE(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x09FF(0x0001) MISSED OFFSET
	struct FVector                                     MainBodyCOM_NoDriver;                                     // 0x0A00(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     MainBodyCOM_Initial;                                      // 0x0A0C(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AirControlF_VelMap;                                       // 0x0A18(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AirControlB_VelMap;                                       // 0x0A20(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AirControlL_VelMap;                                       // 0x0A28(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AirControlR_VelMap;                                       // 0x0A30(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AirControlQ_VelMap;                                       // 0x0A38(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AirControlE_VelMap;                                       // 0x0A40(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AirControl_FB_Torque;                                     // 0x0A48(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AirControl_LR_Torque;                                     // 0x0A4C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AirControl_QE_Torque;                                     // 0x0A50(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bStabilizeInAir : 1;                                      // 0x0A54(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0A55(0x0003) MISSED OFFSET
	float                                              FC_PitchUp;                                               // 0x0A58(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FC_PitchDown;                                             // 0x0A5C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseAnchoring : 1;                                        // 0x0A60(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0A61(0x0003) MISSED OFFSET
	float                                              MinImpulseForAnchorRelease;                               // 0x0A64(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   DriverVelocityAngularDampingInMap;                        // 0x0A68(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   DriverVelocityAngularDampingOutMap;                       // 0x0A70(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bProcessCounterSteering : 1;                              // 0x0A78(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bProcessCounterSteerNoInput : 1;                          // 0x0A79(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bProcessCounterSteerOnRemote : 1;                         // 0x0A7A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x0A7B(0x0001) MISSED OFFSET
	float                                              CounterSteerAngularSpeedScalar;                           // 0x0A7C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CounterSteerNoInputSpeedScalar;                           // 0x0A80(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CounterSteerScalar_Default;                               // 0x0A84(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CounterSteerScalar_NoThrottle;                            // 0x0A88(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CounterSteerScalar_Brake;                                 // 0x0A8C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CounterSteerScalar_NoInput;                               // 0x0A90(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   CounterSteer_VelocityOutMap;                              // 0x0A94(0x0008) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CounterSteerMinForwardSpeed;                              // 0x0A9C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FMotoRollDampSettings                       MotoRollDampSettings;                                     // 0x0AA0(0x001C) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData12[0x3C];                                      // 0x0ABC(0x003C) MISSED OFFSET
	class ATslAnchorActor*                             AnchorActorRef;                                           // 0x0AF8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bKickstandStabilizeActive : 1;                            // 0x0B00(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0xF];                                       // 0x0B01(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMotorbikeVehicle");
		return ptr;
	}


	void WakeAllBodies();
	bool VehicleHasDriver();
	void TryToSleep();
	void SetAirControlR(float InFloat);
	void SetAirControlQ(float InFloat);
	void SetAirControlL(float InFloat);
	void SetAirControlF(float InFloat);
	void SetAirControlE(float InFloat);
	void SetAirControlB(float InFloat);
	void PutBodyToSleep();
	void ProcessFlipAndStabilize();
	void OnVehicleSleep(class UPrimitiveComponent* SleepingComponent, const struct FName& BoneName);
	void OnVehicleEjected();
	void OnRep_KickstandStabilize();
	void OnPostDriverRide();
	void OnPostDriverLeave();
	void OnMeshHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Multi_VehicleSleep(const struct FQuat& InQuat, const struct FVector& InLocation);
	bool IsUsingActiveStabilize();
	bool IsKickstandActive();
	bool IsFlippingEnabled();
	bool IsBaseForAnyCharacter();
	bool HasContact();
	float GetCOMSteerOffset();
};


// Class TslGame.TslMotorbikeVehicle_Sidecar
// 0x0020 (0x0B30 - 0x0B10)
class ATslMotorbikeVehicle_Sidecar : public ATslMotorbikeVehicle
{
public:
	float                                              Sidecar_COM_Y_Left;                                       // 0x0B10(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Sidecar_COM_Y_Right;                                      // 0x0B14(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     Sidecar_StabilizerHigh_StaticCOM;                         // 0x0B18(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0B24(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMotorbikeVehicle_Sidecar");
		return ptr;
	}

};


// Class TslGame.TslMotorbikeVehicle_Standalone
// 0x0000 (0x0B10 - 0x0B10)
class ATslMotorbikeVehicle_Standalone : public ATslMotorbikeVehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslMotorbikeVehicle_Standalone");
		return ptr;
	}


	void WakeAllBodies();
	bool VehicleHasDriver();
	void TryToSleep();
	void SetAirControlR(float InFloat);
	void SetAirControlQ(float InFloat);
	void SetAirControlL(float InFloat);
	void SetAirControlF(float InFloat);
	void SetAirControlE(float InFloat);
	void SetAirControlB(float InFloat);
	void PutBodyToSleep();
	void ProcessFlipAndStabilize();
	void OnVehicleSleep(class UPrimitiveComponent* SleepingComponent, const struct FName& BoneName);
	void OnVehicleEjected();
	void OnRep_KickstandStabilize();
	void OnPostDriverRide();
	void OnPostDriverLeave();
	void OnMeshHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Multi_VehicleSleep(const struct FQuat& InQuat, const struct FVector& InLocation);
	bool IsUsingActiveStabilize();
	bool IsKickstandActive();
	bool IsFlippingEnabled();
	bool IsBaseForAnyCharacter();
	bool HasContact();
	float GetCOMSteerOffset();
};


// Class TslGame.TslWheelEffectType
// 0x00B0 (0x00E0 - 0x0030)
class UTslWheelEffectType : public UDataAsset
{
public:
	class UAkAudioEvent*                               Sound;                                                    // 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DefaultFxClass;                                           // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      ConcreteFxClass;                                          // 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DirtFxClass;                                              // 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      WaterFxClass;                                             // 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      MetalFxClass;                                             // 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      WoodFxClass;                                              // 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      GrassFxClass;                                             // 0x0068(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      GlassFxClass;                                             // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      RockFxClass;                                              // 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SandFxClass;                                              // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SnowFxClass;                                              // 0x0088(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SnowRockFxClass;                                          // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      IceFxClass;                                               // 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      MudFxClass;                                               // 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DefaultMinSpeed;                                          // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ConcreteMinSpeed;                                         // 0x00AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DirtMinSpeed;                                             // 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WaterMinSpeed;                                            // 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MetalMinSpeed;                                            // 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WoodMinSpeed;                                             // 0x00BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GrassMinSpeed;                                            // 0x00C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GlassMinSpeed;                                            // 0x00C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RockMinSpeed;                                             // 0x00C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SandMinSpeed;                                             // 0x00CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SnowMinSpeed;                                             // 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SnowRockMinSpeed;                                         // 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              IceMinSpeed;                                              // 0x00D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MudMinSpeed;                                              // 0x00DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWheelEffectType");
		return ptr;
	}

};


// Class TslGame.TslWorldOffsetComponent
// 0x0010 (0x01F0 - 0x01E0)
class UTslWorldOffsetComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnApplyWorldOffset;                                       // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWorldOffsetComponent");
		return ptr;
	}


	void CallToApplyWorldOffset(class USceneComponent* InComp, const struct FVector& InOffset, bool bWorldShift);
};


// Class TslGame.UpdateCameraComponent
// 0x0060 (0x0240 - 0x01E0)
class UUpdateCameraComponent : public UActorComponent
{
public:
	struct FVector                                     InitCameraLocation;                                       // 0x01E0(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     CrouchedCameraMove;                                       // 0x01EC(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     PronedCameraMove;                                         // 0x01F8(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     GroggyCameraMove;                                         // 0x0204(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CrouchedCameraMoveSpeed;                                  // 0x0210(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PronedCameraMoveSpeed;                                    // 0x0214(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GroggyCameraMoveSpeed;                                    // 0x0218(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x021C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.UpdateCameraComponent");
		return ptr;
	}

};


// Class TslGame.VehicleRiderComponent
// 0x0060 (0x0240 - 0x01E0)
class UVehicleRiderComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01E0(0x0008) MISSED OFFSET
	int                                                SeatIndex;                                                // 0x01E8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x34];                                      // 0x01EC(0x0034) MISSED OFFSET
	class APawn*                                       LastVehiclePawn;                                          // 0x0220(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEverRider : 1;                                           // 0x0228(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x17];                                      // 0x0229(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleRiderComponent");
		return ptr;
	}


	void DebugDrawSafeLocationOnClient(const struct FVector& Location, const struct FColor& Color);
	void DebugDrawLeave(const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, bool bHit, const struct FHitResult& OutHit);
};


// Class TslGame.ViewModeStudio
// 0x0068 (0x0450 - 0x03E8)
class AViewModeStudio : public AActor
{
public:
	class UCameraComponent*                            CameraComponent;                                          // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneCaptureComponent2D*                    SceneCaptureComponent;                                    // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	struct FTransform                                  DefaultCameraSocketTransform;                             // 0x0400(0x0030) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0430(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       CameraSocketName;                                         // 0x0438(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxViewDistance;                                          // 0x0440(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ViewSlaveLocationDuration;                                // 0x0444(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewSlaveLocationDurationCheckTime;                       // 0x0448(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ViewModeStudio");
		return ptr;
	}


	void SetViewModeAbleActor(class AActor* Actor);
	void SetTextureRenderTarget(class UTextureRenderTarget2D* NewTextureTarget);
	void SetCameraSocketName(const struct FName& NewCameraSocketName);
	void AddYaw(float Value);
	void AddViewSlaveLocation(float Duration);
	void AddViewDistance(float Value);
	void AddRoll(float Value);
	void AddPitch(float Value);
};


// Class TslGame.CharacterStudio
// 0x00A0 (0x04F0 - 0x0450)
class ACharacterStudio : public AViewModeStudio
{
public:
	class USpringArmComponent*                         SpringArmComponent;                                       // 0x0450(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bUseDynamicResolution : 1;                                // 0x0458(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0459(0x0007) MISSED OFFSET
	TAssetPtr<class UClass>                            MaleCharacterProxyClass;                                  // 0x0460(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	TAssetPtr<class UClass>                            FemaleCharacterProxyClass;                                // 0x0480(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FTransform                                  CharacterInitialTransform;                                // 0x04A0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class ATslCharacterProxy*                          CharacterProxy;                                           // 0x04D0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class USceneComponent*                             CharacterRotationPivot;                                   // 0x04D8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    SceneCaptureMaterial;                                     // 0x04E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CharacterStudio");
		return ptr;
	}


	void Update();
	void SetSceneCaptureMaterial(class UMaterialInstanceDynamic* Mid);
	void SetCharacter(class ATslCharacter* Character);
	bool IsUsingDynamicResolution();
	bool IsCharacterValid();
	class UMaterialInstanceDynamic* GetSceneCaptureMaterial();
	class ATslCharacter* GetCharacter();
};


// Class TslGame.ItemStudio
// 0x0000 (0x0450 - 0x0450)
class AItemStudio : public AViewModeStudio
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemStudio");
		return ptr;
	}


	void SetViewModeAbleActor(class AActor* Actor);
	void SetTextureRenderTarget(class UTextureRenderTarget2D* NewTextureTarget);
	void SetCameraSocketName(const struct FName& NewCameraSocketName);
	void AddYaw(float Value);
	void AddViewSlaveLocation(float Duration);
	void AddViewDistance(float Value);
	void AddRoll(float Value);
	void AddPitch(float Value);
};


// Class TslGame.WeaponStudio
// 0x00A0 (0x04F0 - 0x0450)
class AWeaponStudio : public AItemStudio
{
public:
	float                                              UpdateDelayTime;                                          // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimationUpdateDelayTime;                                 // 0x0454(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBaseWeaponItem*                             CachedWeaponItem;                                         // 0x0458(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslWeapon*                                  CachedTslWeapon;                                          // 0x0460(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	TMap<struct FName, int>                            CachedResidentMips;                                       // 0x0470(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	float                                              UpdateCheckTime;                                          // 0x04C0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              AnimationUpdateCheckTime;                                 // 0x04C4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bNeedtoUpdate : 1;                                        // 0x04C8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bWaitForAnimationUpdate : 1;                              // 0x04C9(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bHasStatkTrak : 1;                                        // 0x04CA(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x04CB(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.WeaponStudio.SaveStatTrakState
	unsigned char                                      UnknownData02[0x4];                                       // 0x04CC(0x0004) MISSED OFFSET
	struct FStatTrakDataPair                           SaveStatTrakDataPair;                                     // 0x04D0(0x0018) (CPF_Transient)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponStudio");
		return ptr;
	}


	void UpdateWeaponMesh();
	void UpdateSkin();
	void UpdateMasteryItems();
	void UpdateAttachment();
	void OnUpdateSkin();
	void OnUpdateAttachment();
	void OnLoadedAttachment();
	class UMeshComponent* GetWeaonMesh();
	class ATslLobbyWeapon* GetStudioWeapon();
	class UBaseWeaponItem* GetCachedWeaponItem();
	class ATslWeapon* GetCachedTslWeapon();
};


// Class TslGame.VoiceBaseComponent
// 0x0170 (0x0350 - 0x01E0)
class UVoiceBaseComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnParticipantMuteChanged;                                 // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticipantRestrictionChanged;                          // 0x01F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVoiceChatUpdated;                                       // 0x0200(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMicVuMeterUpdated;                                      // 0x0210(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOperatingSystemChosenAudioInputDeviceChanged;           // 0x0220(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0230(0x0008) MISSED OFFSET
	struct FVoiceConnectionInfo                        ConnectionInfo;                                           // 0x0238(0x0068) (CPF_Net)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02A0(0x0008) MISSED OFFSET
	struct FString                                     TeamChannelUrl;                                           // 0x02A8(0x0010) (CPF_Net, CPF_ZeroConstructor)
	struct FString                                     GlobalChannelUrl;                                         // 0x02B8(0x0010) (CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02C8(0x0004) MISSED OFFSET
	float                                              ResetFailureDelaySeconds;                                 // 0x02CC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x02D0(0x0018) MISSED OFFSET
	float                                              UpdatePositionIntervalSeconds;                            // 0x02E8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x02EC(0x000C) MISSED OFFSET
	float                                              UserInputVolumeModifier;                                  // 0x02F8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UserOutputVolumeModifier;                                 // 0x02FC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TMap<struct FString, float>                        TeamMemberVolumeModifierMap;                              // 0x0300(0x0050) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VoiceBaseComponent");
		return ptr;
	}


	void UpdatePosition();
	void StopAudioInputCapture();
	void StartAudioInputCapture(bool bLoopback);
	void SetVoiceChannelType();
	void SetParticipantVolume(const struct FString& TargetUniqueId, int Volume);
	void SetParticipantMute(const struct FString& TargetUniqueId, bool bIsMuted);
	void SetLocalVoiceOutputVolume(int UserSettingVolume);
	void SetLocalVoiceOutputMuted(bool bIsMuted);
	void SetLocalVoiceInputVolume(int UserSettingVolume);
	void SetLocalVoiceInputMuted(bool bIsMuted);
	void ServerLogin();
	void ServerJoinTeamChannel();
	void ServerJoinGlobalChannel();
	void ResetTeamChannelJoinState();
	void ResetLoginState();
	void ResetGlobalChannelJoinState();
	void ResetConnectionState();
	void RefreshDevices();
	bool IsParticipantMuted(const struct FString& TargetUniqueId);
	bool IsCapturingAudioInput();
	void GetVoiceChannelType();
	int GetParticipantVolume(const struct FString& TargetUniqueId);
	int GetLocalVoiceOutputVolume();
	bool GetLocalVoiceOutputMuted();
	int GetLocalVoiceInputVolume();
	bool GetLocalVoiceInputMuted();
	void ClientLogin(const struct FString& AccessToken);
	void ClientLeaveTeamChannel();
	void ClientLeaveGlobalChannel();
	void ClientJoinTeamChannel(const struct FString& AccessToken);
	void ClientJoinGlobalChannel(const struct FString& AccessToken);
	float CalculateOutputVolumeFromModifiers();
	float CalculateInputVolumeFromModifiers();
};


// Class TslGame.VoiceComponent
// 0x0050 (0x03A0 - 0x0350)
class UVoiceComponent : public UVoiceBaseComponent
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0350(0x002C) MISSED OFFSET
	float                                              SuddenMovementDistance;                                   // 0x037C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SuddenMovementModifier;                                   // 0x0380(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SuddenMovementModifierDuration;                           // 0x0384(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SuddenMovementModifierRestoreDuration;                    // 0x0388(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x038C(0x0008) MISSED OFFSET
	unsigned char                                      bEnableObserverTeamChat : 1;                              // 0x0394(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x0395(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VoiceComponent");
		return ptr;
	}


	void ServerTestAccessToken();
	void ServerSetObserverTeamNum(int NewTeamNum);
	void ServerSetObserverSquadIndex(int NewSquadIndex);
	void ApplyTimedVolumeModifier(float NewModifier, float Duration, float RestoreDuration);
};


// Class TslGame.VoiceLobbyComponent
// 0x00C0 (0x0410 - 0x0350)
class UVoiceLobbyComponent : public UVoiceBaseComponent
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0350(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VoiceLobbyComponent");
		return ptr;
	}


	void UpdatePosition();
	void StopAudioInputCapture();
	void StartAudioInputCapture(bool bLoopback);
	void SetVoiceChannelType();
	void SetParticipantVolume(const struct FString& TargetUniqueId, int Volume);
	void SetParticipantMute(const struct FString& TargetUniqueId, bool bIsMuted);
	void SetLocalVoiceOutputVolume(int UserSettingVolume);
	void SetLocalVoiceOutputMuted(bool bIsMuted);
	void SetLocalVoiceInputVolume(int UserSettingVolume);
	void SetLocalVoiceInputMuted(bool bIsMuted);
	void ServerLogin();
	void ServerJoinTeamChannel();
	void ServerJoinGlobalChannel();
	void ResetTeamChannelJoinState();
	void ResetLoginState();
	void ResetGlobalChannelJoinState();
	void ResetConnectionState();
	void RefreshDevices();
	bool IsParticipantMuted(const struct FString& TargetUniqueId);
	bool IsCapturingAudioInput();
	void GetVoiceChannelType();
	int GetParticipantVolume(const struct FString& TargetUniqueId);
	int GetLocalVoiceOutputVolume();
	bool GetLocalVoiceOutputMuted();
	int GetLocalVoiceInputVolume();
	bool GetLocalVoiceInputMuted();
	void ClientLogin(const struct FString& AccessToken);
	void ClientLeaveTeamChannel();
	void ClientLeaveGlobalChannel();
	void ClientJoinTeamChannel(const struct FString& AccessToken);
	void ClientJoinGlobalChannel(const struct FString& AccessToken);
	float CalculateOutputVolumeFromModifiers();
	float CalculateInputVolumeFromModifiers();
};


// Class TslGame.VoiceManager
// 0x0138 (0x0160 - 0x0028)
class UVoiceManager : public UObject
{
public:
	class UWorld*                                      World;                                                    // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	struct FVoiceConnectionInfo                        ConnectionInfo;                                           // 0x0038(0x0068)
	unsigned char                                      bUseEphmeralChannel : 1;                                  // 0x00A0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FString                                     AuthId;                                                   // 0x00A8(0x0010) (CPF_ZeroConstructor)
	struct FString                                     AuthPwd;                                                  // 0x00B8(0x0010) (CPF_ZeroConstructor)
	int64_t                                            AccessTokenExpirationTime;                                // 0x00C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     Issuer;                                                   // 0x00D0(0x0010) (CPF_ZeroConstructor)
	struct FString                                     Key;                                                      // 0x00E0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x00F0(0x0010) MISSED OFFSET
	class USignInResponse*                             SignIn;                                                   // 0x0100(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UKeyAddResponse*                             KeyAdd;                                                   // 0x0108(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UKeyRevokeResponse*                          KeyRevoke;                                                // 0x0110(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class UChannelResponse*>                    Channels;                                                 // 0x0118(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0128(0x0010) MISSED OFFSET
	TArray<class ATslPlayerController*>                PlayerControllers;                                        // 0x0138(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                ProximalMaxRange;                                         // 0x0148(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ProximalClampingDistance;                                 // 0x014C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ProximalDistanceModel;                                    // 0x0150(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0154(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VoiceManager");
		return ptr;
	}


	void OnRevokeKeySuccess(class UVivoxResponse* Response);
	void OnRevokeKeyFail(class UVivoxResponse* Response);
	void OnChannelSuccess(class UVivoxResponse* Response);
	void OnChannelFail(class UVivoxResponse* Response);
	void OnAddKeySuccess(class UVivoxResponse* Response);
	void OnAddKeyFail(class UVivoxResponse* Response);
};


// Class TslGame.WeaponAnimInfoComponent
// 0x00F0 (0x02D0 - 0x01E0)
class UWeaponAnimInfoComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x01E0(0x0070) MISSED OFFSET
	struct FName                                       WeaponAttachPointPistol;                                  // 0x0250(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointRifle;                                   // 0x0258(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointThrowable;                               // 0x0260(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointMelee;                                   // 0x0268(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointShield;                                  // 0x0270(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class USkeletalMeshComponent*                      MeshComponent;                                            // 0x0278(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Primary;                               // 0x0280(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Secondary;                             // 0x0288(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Sidearm;                               // 0x0290(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Melee;                                 // 0x0298(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Thrown;                                // 0x02A0(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FName                                       WeaponLeftHandIKAttachPoint;                              // 0x02A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTslWeaponAnimInfo                          WeaponAnimInfo;                                           // 0x02B0(0x0020) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponAnimInfoComponent");
		return ptr;
	}


	void SetAccessorySlot(class UTslAccessoryComponent* NewAccessoryComponent);
	bool HasWeaponLeftHandIKSocket(class ATslWeapon* Weapon);
	struct FTransform GetWeaponLeftHandIKTransform(class ATslWeapon* Weapon);
	struct FTransform GetWeaponHandIK_Right(class ATslWeapon* Weapon);
	struct FTransform GetWeaponHandIK_Left(class ATslWeapon* Weapon);
	struct FTslWeaponAnimInfo GetCurrentWeaponAnimInfo();
	class UTslAccessoryComponent* GetAccessorySlot();
};


// Class TslGame.CharacterWeaponAnimInfoComponent
// 0x0040 (0x0310 - 0x02D0)
class UCharacterWeaponAnimInfoComponent : public UWeaponAnimInfoComponent
{
public:
	struct FName                                       WeaponAttachPointPistolDriving;                           // 0x02D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointPistolSitting;                           // 0x02D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointRifleDriving;                            // 0x02E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointRifleSitting;                            // 0x02E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointRifleAim;                                // 0x02F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointThrowableDriving;                        // 0x02F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponAttachPointMeleeDriving;                            // 0x0300(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0308(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CharacterWeaponAnimInfoComponent");
		return ptr;
	}

};


// Class TslGame.WeaponClone
// 0x0028 (0x0050 - 0x0028)
class UWeaponClone : public UObject
{
public:
	class UMeshComponent*                              CharmMesh;                                                // 0x0028(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	class UWeaponMeshComponent*                        WeaponMeshComponent;                                      // 0x0040(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponClone");
		return ptr;
	}


	void UpdateStatTrak();
	void UpdateSkinData();
	void UpdateMasteryItems();
	void UpdateAttachment();
	void OnUpdateStatTrakCheck();
};


// Class TslGame.WeaponsPenetrationConfig
// 0x02E8 (0x0318 - 0x0030)
class UWeaponsPenetrationConfig : public UDataAsset
{
public:
	TMap<TEnumAsByte<EPhysicalSurface>, struct FPhysicalMaterialPenetrationConfig> DefaultMaterialConfigs;                                   // 0x0030(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	TMap<class UPhysicalMaterial*, struct FPhysicalMaterialPenetrationConfig> MaterialConfigOverrides;                                  // 0x0080(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x00D0(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.WeaponsPenetrationConfig.WeaponClassConfigs
	TMap<TAssetPtr<class UClass>, struct FWeaponPenetrationConfig> WeaponConfigOverridesMap;                                 // 0x0120(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	TMap<TEnumAsByte<EPhysicalSurface>, class UCurveFloat*> PenetrationPowerCurves;                                   // 0x0170(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x01C0(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.BodyPenetratableZones
	unsigned char                                      UnknownData02[0x50];                                      // 0x0210(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.BodyPenetrationReceiveDamageZones
	unsigned char                                      UnknownData03[0x50];                                      // 0x0260(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.BodyPenetrationDisabledWeapons
	unsigned char                                      UnknownData04[0x50];                                      // 0x02B0(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.VehiclePenetrationDisabledWeapons
	float                                              DeflectionRange;                                          // 0x0300(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxSurfacesNum;                                           // 0x0304(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinImpactAngleDeg;                                        // 0x0308(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinDetectableHollowSize;                                  // 0x030C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinOutSpeed;                                              // 0x0310(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinWaterSpeed;                                            // 0x0314(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponsPenetrationConfig");
		return ptr;
	}

};


// Class TslGame.WheelTrackManager
// 0x0088 (0x0470 - 0x03E8)
class AWheelTrackManager : public AActor
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      TexAtlasIndexCount;                                       // 0x03F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      TexAtlasRandomCount;                                      // 0x03F1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03F2(0x0006) MISSED OFFSET
	TArray<class UPhysicalMaterial*>                   MaterialsToApply;                                         // 0x03F8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      bUsePool : 1;                                             // 0x0408(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	float                                              DecalLifeSpan;                                            // 0x040C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   DecalSize;                                                // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              ProjectionSweepMin;                                       // 0x0418(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ProjectionSweepMax;                                       // 0x041C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ProjectionSweepMargin;                                    // 0x0420(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	class AInstancedDeferredDecalActor*                DecalActor;                                               // 0x0428(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              PatchLength;                                              // 0x0430(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PatchLengthMargin;                                        // 0x0434(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WheelToTerrainTraceMargin;                                // 0x0438(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	struct FVector4                                    BorderOpacityBiases;                                      // 0x0440(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              speedThreshold;                                           // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	TArray<struct FWheelTypeInfo>                      WheelTypeInfos;                                           // 0x0458(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	int                                                NumErrorCreatingDecalActor;                               // 0x0468(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	int                                                RenderPriority;                                           // 0x046C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WheelTrackManager");
		return ptr;
	}

};


// Class TslGame.XBoxRichPresenceObserver
// 0x0090 (0x00B8 - 0x0028)
class UXBoxRichPresenceObserver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0028(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.XBoxRichPresenceObserver");
		return ptr;
	}

};


// Class TslGame.ActionInputEventHolder
// 0x0028 (0x0050 - 0x0028)
class UActionInputEventHolder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ActionInputEventHolder");
		return ptr;
	}

};


// Class TslGame.AimPunchDataAsset
// 0x00C8 (0x00F8 - 0x0030)
class UAimPunchDataAsset : public UDataAsset
{
public:
	float                                              ArmorMinPitch;                                            // 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ArmorMaxPitch;                                            // 0x0034(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ArmorMinYaw;                                              // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ArmorMaxYaw;                                              // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NoArmorMinPitch;                                          // 0x0040(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NoArmorMaxPitch;                                          // 0x0044(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NoArmorMinYaw;                                            // 0x0048(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NoArmorMaxYaw;                                            // 0x004C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.AimPunchDataAsset.CameraShakesTPP
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A0(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.AimPunchDataAsset.CameraShakesFPP
	float                                              FPPScopingShakeModifier;                                  // 0x00F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HasArmorShakeModifier;                                    // 0x00F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AimPunchDataAsset");
		return ptr;
	}

};


// Class TslGame.AirborneEjectionArea
// 0x0010 (0x03F8 - 0x03E8)
class AAirborneEjectionArea : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              Radius;                                                   // 0x03F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AirborneEjectionArea");
		return ptr;
	}

};


// Class TslGame.AirRespawnProcessor
// 0x0070 (0x0458 - 0x03E8)
class AAirRespawnProcessor : public AActor
{
public:
	TAssetPtr<class UClass>                            AircraftClass;                                            // 0x03E8(0x0020) (CPF_Edit)
	float                                              BeginFlightTerm;                                          // 0x0408(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RespawnPeriodSeconds;                                     // 0x040C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AircraftAltitude;                                         // 0x0410(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FlightStartRadiusRatio;                                   // 0x0414(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 FlyingDurationCurve;                                      // 0x0418(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnRespawnStarted;                                         // 0x0420(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRespawnEnded;                                           // 0x0430(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRespawned;                                              // 0x0440(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0450(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AirRespawnProcessor");
		return ptr;
	}

};


// Class TslGame.AnimDB
// 0x0148 (0x0178 - 0x0030)
class UAnimDB : public UDataAsset
{
public:
	struct FAnimInfo                                   Stand_Info;                                               // 0x0030(0x0068) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FAnimInfo                                   Crouch_Info;                                              // 0x0098(0x0068) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FAnimInfo                                   Prone_Info;                                               // 0x0100(0x0068) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BlendSpaceSpeed_Walk;                                     // 0x0168(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BlendSpaceSpeed_Run;                                      // 0x016C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BlendSpaceSpeed_Sprint;                                   // 0x0170(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AnimDB");
		return ptr;
	}


	class UBlendSpace* GetBlendSpaceRelaxed(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP);
	class UBlendSpace* GetBlendSpace(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP);
	float GetAnimSpeed(TEnumAsByte<EAnimStanceType> AnimStance, float Direction, float InSpeed, float* PlayRate, float* SprintAlpha);
};


// Class TslGame.AnimNotify_AkEvent
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_AkEvent : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AnimNotify_AkEvent");
		return ptr;
	}

};


// Class TslGame.AnimNotify_AkEvent_Advanced
// 0x0070 (0x00A8 - 0x0038)
class UAnimNotify_AkEvent_Advanced : public UAnimNotify
{
public:
	class UAkAudioEvent*                               AkAudioEvent;                                             // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bFollow : 1;                                              // 0x0040(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	struct FName                                       AttachSocketName;                                         // 0x0048(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     CustomRelativeLocation;                                   // 0x0050(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      OnlyOwnerListen : 1;                                      // 0x005C(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseMaxActivationDistance : 1;                            // 0x005D(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x005E(0x0002) MISSED OFFSET
	float                                              MaxActivationDistance;                                    // 0x0060(0x0004) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseActivationDistanceByAttenuation : 1;                  // 0x0064(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	int                                                PlayingID;                                                // 0x0068(0x0004) (CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsSkip : 1;                                              // 0x006C(0x0001) (CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bUsePhysMatRaycast : 1;                                   // 0x006D(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x006E(0x0002) MISSED OFFSET
	struct FRaycastConfig                              RaycastConfig;                                            // 0x0070(0x0038) (CPF_Edit, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AnimNotify_AkEvent_Advanced");
		return ptr;
	}

};


// Class TslGame.AnimNotify_CameraShake
// 0x0018 (0x0050 - 0x0038)
class UAnimNotify_CameraShake : public UAnimNotify
{
public:
	class UClass*                                      CameraShake;                                              // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FName>                               AffectedCameras;                                          // 0x0040(0x0010) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AnimNotify_CameraShake");
		return ptr;
	}

};


// Class TslGame.AnimNotify_CharacterAnimationNotify
// 0x0008 (0x0040 - 0x0038)
class UAnimNotify_CharacterAnimationNotify : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AnimNotify_CharacterAnimationNotify");
		return ptr;
	}

};


// Class TslGame.AnimNotify_UnarmedAttack
// 0x0008 (0x0040 - 0x0038)
class UAnimNotify_UnarmedAttack : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AnimNotify_UnarmedAttack");
		return ptr;
	}

};


// Class TslGame.AnimNotify_WeaponAnimationNotify
// 0x0008 (0x0040 - 0x0038)
class UAnimNotify_WeaponAnimationNotify : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AnimNotify_WeaponAnimationNotify");
		return ptr;
	}

};


// Class TslGame.AppearanceCustomizationBuilder
// 0x0000 (0x0028 - 0x0028)
class UAppearanceCustomizationBuilder : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AppearanceCustomizationBuilder");
		return ptr;
	}

};


// Class TslGame.TslVaultingHelper
// 0x0010 (0x03F8 - 0x03E8)
class ATslVaultingHelper : public AActor
{
public:
	class USceneComponent*                             RootSceneComponent;                                       // 0x03E8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             ActorAttachScene;                                         // 0x03F0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVaultingHelper");
		return ptr;
	}


	struct FVector GetActorAttachScene();
};


// Class TslGame.MutableCharacter
// 0x0050 (0x0860 - 0x0810)
class AMutableCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0810(0x0020) MISSED OFFSET
	unsigned char                                      UnknownData01[0x1];                                       // 0x0810(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.MutableCharacter.Gender
	unsigned char                                      UnknownData02[0x7];                                       // 0x0831(0x0007) MISSED OFFSET
	class UCustomizableObjectInstance*                 CustomizableObjectInstance;                               // 0x0838(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslCustomizableSkeletalComponent*           CustomizableSkeletalComponent;                            // 0x0840(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FBinaryData                                 InstanceDescriptor;                                       // 0x0848(0x0010) (CPF_Net)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0858(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MutableCharacter");
		return ptr;
	}


	void UpdateAppearence();
	void OnRep_InstanceDescriptor();
	void GetGender();
};


// Class TslGame.CastableInterface
// 0x0000 (0x0028 - 0x0028)
class UCastableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CastableInterface");
		return ptr;
	}

};


// Class TslGame.TslWheelSuspensionAudioData
// 0x0050 (0x0080 - 0x0030)
class UTslWheelSuspensionAudioData : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslWheelSuspensionAudioData.LandingSoundSwitchesPerHorVelocity

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWheelSuspensionAudioData");
		return ptr;
	}

};


// Class TslGame.BattlepassObjectInterface
// 0x0000 (0x0028 - 0x0028)
class UBattlepassObjectInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BattlepassObjectInterface");
		return ptr;
	}

};


// Class TslGame.TslStatics
// 0x0000 (0x0028 - 0x0028)
class UTslStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslStatics");
		return ptr;
	}

};


// Class TslGame.CastComponent
// 0x0040 (0x0220 - 0x01E0)
class UCastComponent : public UActorComponent
{
public:
	class UAkAudioEvent*                               CanceledCastItemSoundClearAK;                             // 0x01E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FScriptDelegate                             OnFinishCast;                                             // 0x01E8(0x000E) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01E8(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptMulticastDelegate                    OnCancelCast;                                             // 0x01F8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0208(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CastComponent");
		return ptr;
	}


	void UpdateCastTimeOnClient(float NewCastTime);
	bool StartCastOnClient(const TScriptInterface<class UCastableInterface>& CastableInterface);
	float GetTotalCastTime();
	float GetElapsedCastTime();
	void GetCastPriority();
	class UObject* GetCastObject();
	struct FText GetCastName();
	void GetCastLevel();
	void GetCastAnim();
	void CancelCastOnServer(bool bSendRPC);
	void CancelCastOnClient(bool bSendRPC, class UObject* CastingObject);
	void CancelAkSoundOnClient(class ATslCharacter* Character);
};


// Class TslGame.SlotInterface
// 0x0000 (0x0028 - 0x0028)
class USlotInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SlotInterface");
		return ptr;
	}

};


// Class TslGame.Item
// 0x0220 (0x0248 - 0x0028)
class UItem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	unsigned char                                      bStackable : 1;                                           // 0x0038(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      bUsable : 1;                                              // 0x0038(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      bIsConsumable : 1;                                        // 0x0038(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      bDisableSpawnInGame : 1;                                  // 0x0038(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                StackCount;                                               // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FText                                       ItemName;                                                 // 0x0040(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FText                                       ItemCategory;                                             // 0x0058(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FText                                       ItemDetailedName;                                         // 0x0070(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FText                                       ItemDescription;                                          // 0x0088(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              ItemMaxInteractableDistance;                              // 0x00A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                StackCountMax;                                            // 0x00A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpacePerItem;                                             // 0x00A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TAssetPtr<class UStaticMesh>                       DroppedMesh;                                              // 0x00B0(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              DroppedMeshScale;                                         // 0x00D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	struct FItemProjectileData                         ProjectileData;                                           // 0x00D8(0x0040) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TAssetPtr<class UTexture>                          Icon;                                                     // 0x0118(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TAssetPtr<class UTexture>                          ToolTipIcon;                                              // 0x0138(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              IconSizeRatio;                                            // 0x0158(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ToolTipIconSizeRatio;                                     // 0x015C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               DropSoundAk;                                              // 0x0160(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       DropAnimation;                                            // 0x0168(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               PickUpSoundAk;                                            // 0x0170(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       PickUpAnimationOverride;                                  // 0x0178(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               InventoryPutSoundAk;                                      // 0x0180(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                SortPriority;                                             // 0x0188(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsLobbyItem : 1;                                         // 0x018C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	int                                                LobbyItemID;                                              // 0x0190(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0194(0x0004) MISSED OFFSET
	struct FLobbyItemDesc                              LobbyItemDesc;                                            // 0x0198(0x0060) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      bIsLobbyWeapon : 1;                                       // 0x01F8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x01F9(0x0003) MISSED OFFSET
	int                                                LobbyWeaponID;                                            // 0x01FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      LobbyWeaponInstance;                                      // 0x0200(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0208(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.Item.Category
	unsigned char                                      UnknownData08[0x7];                                       // 0x0209(0x0007) MISSED OFFSET
	struct FName                                       SubCategory;                                              // 0x0210(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsToy : 1;                                               // 0x0218(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0219(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStackCountUpdated;                                      // 0x0220(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      bVested : 1;                                              // 0x0230(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0231(0x0007) MISSED OFFSET
	struct FString                                     Note;                                                     // 0x0238(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.Item");
		return ptr;
	}


	bool UseBy(class ATslCharacter* Character);
	bool PickUpBy(class ATslCharacter* Character, const struct FName& TargetContainer, const struct FString& Options);
	void OnRepStackCount(int OldStackCount);
	bool IsWeapon();
	bool IsToy();
	bool IsToolTipIconAsyncLoaded();
	bool IsPackageItem();
	bool IsIconAsyncLoaded();
	bool IsEquipable();
	bool IsCastableItem();
	bool IsAttachment();
	class UTexture* GetIconTexture();
};


// Class TslGame.ReticlePostprocessData
// 0x00A0 (0x00D0 - 0x0030)
class UReticlePostprocessData : public UDataAsset
{
public:
	struct FWeaponPPSettings                           WeaponGunPostprocessSettings;                             // 0x0030(0x00A0) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReticlePostprocessData");
		return ptr;
	}


	struct FWeaponPPSettings GetPostprocessData();
};


// Class TslGame.ReticleSettings
// 0x0030 (0x0060 - 0x0030)
class UReticleSettings : public UDataAsset
{
public:
	float                                              ReticleAngularSize;                                       // 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   ReticleCenter;                                            // 0x0034(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class UTexture2D*                                  ReticleTexture;                                           // 0x0040(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseReticleTextureOverride : 1;                           // 0x0048(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FReticleTextureData>                 ReticleTextureDataArray;                                  // 0x0050(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReticleSettings");
		return ptr;
	}

};


// Class TslGame.AttachableItem
// 0x0368 (0x05B0 - 0x0248)
class UAttachableItem : public UItem
{
public:
	struct FWeaponAttachmentData                       AttachmentData;                                           // 0x0248(0x02C8) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TAssetPtr<class UStaticMesh>                       AttachmentMeshAsset;                                      // 0x0510(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FName                                       AttachmentMeshName;                                       // 0x0530(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FWeaponAttachmentWeaponTagData>      AttachmentWeaponTagData;                                  // 0x0538(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0548(0x0050) MISSED OFFSET
	class UClass*                                      AttachmentTemplate;                                       // 0x0598(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      EquipOnPickUp : 1;                                        // 0x05A0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x05A1(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               AttachedSoundAk;                                          // 0x05A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AttachableItem");
		return ptr;
	}


	void GetAttachmentSlotID(const struct FName& WeaponTag);
	struct FWeaponAttachmentData GetAttachmentData(const struct FName& WeaponTag);
};


// Class TslGame.VivoxResponse
// 0x0070 (0x0098 - 0x0028)
class UVivoxResponse : public UObject
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0028(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VivoxResponse");
		return ptr;
	}

};


// Class TslGame.SignInResponse
// 0x0030 (0x00C8 - 0x0098)
class USignInResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0098(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SignInResponse");
		return ptr;
	}

};


// Class TslGame.ChannelResponse
// 0x0050 (0x00E8 - 0x0098)
class UChannelResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0098(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ChannelResponse");
		return ptr;
	}

};


// Class TslGame.KeyRevokeResponse
// 0x0020 (0x00B8 - 0x0098)
class UKeyRevokeResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0098(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.KeyRevokeResponse");
		return ptr;
	}

};


// Class TslGame.KeyAddResponse
// 0x0030 (0x00C8 - 0x0098)
class UKeyAddResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0098(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.KeyAddResponse");
		return ptr;
	}

};


// Class TslGame.TslGameUserSettings
// 0x0508 (0x0610 - 0x0108)
class UTslGameUserSettings : public UGameUserSettings
{
public:
	float                                              ScreenScale;                                              // 0x0108(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x010C(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.LobbyFrameRateLimitType
	unsigned char                                      UnknownData01[0x1];                                       // 0x010D(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InGameFrameRateLimitType
	unsigned char                                      UnknownData02[0x2];                                       // 0x010E(0x0002) MISSED OFFSET
	float                                              InGameCustomFrameRateLimit;                               // 0x0110(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseInGameSmoothedFrameRate : 1;                          // 0x0114(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsLanMatch : 1;                                          // 0x0115(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsMasterSoundMute : 1;                                   // 0x0116(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0117(0x0001) MISSED OFFSET
	float                                              MasterSoundVolume;                                        // 0x0118(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsEffectSoundMute : 1;                                   // 0x011C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	float                                              EffectSoundVolume;                                        // 0x0120(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsUISoundMute : 1;                                       // 0x0124(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	float                                              UISoundVolume;                                            // 0x0128(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BGMSoundVolume;                                           // 0x012C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsVoiceInputMute : 1;                                    // 0x0130(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsVoiceOutputMute : 1;                                   // 0x0131(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	int                                                VoiceInputVolume;                                         // 0x0134(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                VoiceOutputVolume;                                        // 0x0138(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUsePushToTalk : 1;                                       // 0x013C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseGlobalVoice : 1;                                      // 0x013D(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseTeamVoice : 1;                                        // 0x013E(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSavedGraphicOption : 1;                                  // 0x013F(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bNvidiaDLSS : 1;                                          // 0x0140(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bMotionBlur : 1;                                          // 0x0141(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSharpen : 1;                                             // 0x0142(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x5];                                       // 0x0143(0x0005) MISSED OFFSET
	struct FString                                     CultureName;                                              // 0x0148(0x0010) (CPF_ZeroConstructor, CPF_Config)
	struct FString                                     LastCultureName;                                          // 0x0158(0x0010) (CPF_ZeroConstructor, CPF_Config)
	int                                                SelectMiniMapIndex;                                       // 0x0168(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x016C(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.TppAimCamPosRecoveryType
	unsigned char                                      bAutoReloadOnOutOfAmmoFire : 1;                           // 0x016D(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x016E(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.HGsFiringMode
	unsigned char                                      UnknownData10[0x1];                                       // 0x016F(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.SMGsFiringMode
	unsigned char                                      UnknownData11[0x1];                                       // 0x0170(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.ARsFiringMode
	unsigned char                                      UnknownData12[0x1];                                       // 0x0171(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.DMRsFiringMode
	unsigned char                                      IsClanNameDisplay : 1;                                    // 0x0172(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x5];                                       // 0x0173(0x0005) MISSED OFFSET
	struct FString                                     CrosshairColorString;                                     // 0x0178(0x0010) (CPF_ZeroConstructor, CPF_Config)
	struct FColor                                      CustomReticleColor;                                       // 0x0188(0x0004) (CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x018C(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.MinimapColorType
	unsigned char                                      UnknownData15[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	TArray<class UClass*>                              GearProfile1;                                             // 0x0190(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<class UClass*>                              GearProfile2;                                             // 0x01A0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TMap<class UClass*, int>                           DefaultReticleMap;                                        // 0x01B0(0x0050) (CPF_ZeroConstructor, CPF_Config)
	TMap<class UClass*, float>                         DefaultReticleBrightnessMap;                              // 0x0200(0x0050) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData16[0x1];                                       // 0x0250(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.FppWeaponIconShowType
	unsigned char                                      UnknownData17[0x1];                                       // 0x0251(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.TpsWeaponIconShowType
	unsigned char                                      UnknownData18[0x1];                                       // 0x0252(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.FppEquipableItemIconShowType
	unsigned char                                      bUseCharacterCapture : 1;                                 // 0x0253(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                WorldMapZoomSpeedLevel;                                   // 0x0254(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableMinimapViewScale : 1;                              // 0x0258(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowNetworkInfo : 1;                                     // 0x0259(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bHideNicknameOnKillfeed : 1;                              // 0x025A(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bHideWeaponMasteryOnKillfeed : 1;                         // 0x025B(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowCompassShade : 1;                                    // 0x025C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowTracerDisplay : 1;                                   // 0x025D(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseTracerTeamColor : 1;                                  // 0x025E(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData19[0x1];                                       // 0x025F(0x0001) MISSED OFFSET
	int                                                KillMessageListSizeLimit;                                 // 0x0260(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowKeyHintWidget : 1;                                   // 0x0264(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseInteracionXRay : 1;                                   // 0x0265(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bHasKeySettingsChanged : 1;                               // 0x0266(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x1];                                       // 0x0267(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeCrouch
	unsigned char                                      UnknownData21[0x1];                                       // 0x0268(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeProne
	unsigned char                                      UnknownData22[0x1];                                       // 0x0269(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeWalk
	unsigned char                                      UnknownData23[0x1];                                       // 0x026A(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.bToggleSprint
	unsigned char                                      UnknownData24[0x1];                                       // 0x026B(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeHoldRotation
	unsigned char                                      UnknownData25[0x1];                                       // 0x026C(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeHoldBreath
	unsigned char                                      UnknownData26[0x1];                                       // 0x026D(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeHoldAngled
	unsigned char                                      UnknownData27[0x1];                                       // 0x026E(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModePeek
	unsigned char                                      UnknownData28[0x1];                                       // 0x026F(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeMap
	unsigned char                                      UnknownData29[0x1];                                       // 0x0270(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeADS
	unsigned char                                      UnknownData30[0x1];                                       // 0x0271(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.InputModeAim
	unsigned char                                      bEditorApplyOverrideScalability : 1;                      // 0x0272(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseFreeLookInterp : 1;                                   // 0x0273(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseClientReplay : 1;                                     // 0x0274(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseKillcam : 1;                                          // 0x0275(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bPreloadingMap : 1;                                       // 0x0276(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData31[0x1];                                       // 0x0277(0x0001) MISSED OFFSET
	TArray<struct FString>                             ErangelPreloadingMaps;                                    // 0x0278(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             MiramarPreloadingMaps;                                    // 0x0288(0x0010) (CPF_ZeroConstructor, CPF_Config)
	struct FFloatCurve                                 ObserverLagCompensationAdjustmentCurve1;                  // 0x0298(0x0090) (CPF_Config)
	struct FFloatCurve                                 ReplayLagCompensationAdjustmentCurve;                     // 0x0328(0x0090) (CPF_Config)
	struct FScriptMulticastDelegate                    OnGameUserSettingApplied;                                 // 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FTslPersistantData                          TslPersistantData;                                        // 0x03C8(0x0140) (CPF_Config)
	struct FCustomInputSettings                        CustomInputSettins;                                       // 0x0508(0x00D8) (CPF_Config)
	unsigned char                                      bIsBGMSoundMute : 1;                                      // 0x05E0(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsEnabledHrtfRemoteWeaponSound : 1;                      // 0x05E1(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData32[0x2];                                       // 0x05E2(0x0002) MISSED OFFSET
	float                                              FpsCameraFov;                                             // 0x05E4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              Gamma;                                                    // 0x05E8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                ColorBlindType;                                           // 0x05EC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FColor                                      CustomCrosshairColor;                                     // 0x05F0(0x0004) (CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseForceFeedback : 1;                                    // 0x05F4(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData33[0x3];                                       // 0x05F5(0x0003) MISSED OFFSET
	float                                              ForceFeedbackMultiplier;                                  // 0x05F8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIconKillfeedEnabled : 1;                                 // 0x05FC(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData34[0x1];                                       // 0x05FD(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslGameUserSettings.GamepadPresetType
	unsigned char                                      bUseKeyHint : 1;                                          // 0x05FE(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData35[0x1];                                       // 0x05FF(0x0001) MISSED OFFSET
	TArray<struct FOutgameUserData>                    OutgameUserDatas;                                         // 0x0600(0x0010) (CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameUserSettings");
		return ptr;
	}

};


// Class TslGame.TslTracerManager
// 0x0130 (0x0518 - 0x03E8)
class ATslTracerManager : public AActor
{
public:
	class UArrowComponent*                             ArrowComponent;                                           // 0x03E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	TArray<class UParticleSystemComponent*>            ProjectileInstances;                                      // 0x0400(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0410(0x0010) MISSED OFFSET
	float                                              SimulationSubstepTime;                                    // 0x0420(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AmmoTimeout;                                              // 0x0424(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<class UParticleSystem*>                     TracerParticleArray;                                      // 0x0428(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UParticleSystem*                             ShotGunParticleTemplate;                                  // 0x0438(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<class UParticleSystem*>                     ProjectileParticleArray;                                  // 0x0440(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FVector                                     ProjectileParticleColorRGB;                               // 0x0450(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData03[0x50];                                      // 0x045C(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslTracerManager.ProjectileClassColorMap
	struct FName                                       ColorParameterName;                                       // 0x04B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UStaticMesh*                                 DefaultTracerMesh;                                        // 0x04B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UMaterialInterface*                          DefaultTracerMeshMaterial;                                // 0x04C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     DefaultTracerMeshScale;                                   // 0x04C8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x04D4(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslTracerManager.DefaultBulletDisplayMode
	unsigned char                                      UnknownData05[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	int                                                DefaultBulletDisplayType;                                 // 0x04D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x04DC(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslTracerManager.DefaultProjectileDisplayMode
	unsigned char                                      UnknownData07[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	int                                                DefaultProjectileDisplayType;                             // 0x04E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                CurrentModeTypeIndex;                                     // 0x04E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FTracerModeType>                     ModeTypeArray;                                            // 0x04E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              Color1Multiplier;                                         // 0x04F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Color2Multiplier;                                         // 0x04FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       TeamColor1ParameterName;                                  // 0x0500(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       TeamColor2ParameterName;                                  // 0x0508(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GrenadeColorScalar;                                       // 0x0510(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslTracerManager");
		return ptr;
	}


	void Multi_AddInstance(const struct FTracerSimulationServerData& InTracerData);
};


// Class TslGame.ConnectionHandlerInterface
// 0x0000 (0x0028 - 0x0028)
class UConnectionHandlerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ConnectionHandlerInterface");
		return ptr;
	}

};


// Class TslGame.SkinItem
// 0x0018 (0x0260 - 0x0248)
class USkinItem : public UItem
{
public:
	unsigned char                                      bAutoAction : 1;                                          // 0x0248(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0249(0x0007) MISSED OFFSET
	struct FSkinParam                                  SkinParam;                                                // 0x0250(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SkinItem");
		return ptr;
	}


	bool CheckSkin(const TScriptInterface<class USkinnableInterface>& SkinnableInterface);
	bool ApplySkin(const TScriptInterface<class USkinnableInterface>& SkinnableInterface, int SkinOwnerPlayerId);
};


// Class TslGame.SkinnableInterface
// 0x0000 (0x0028 - 0x0028)
class USkinnableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SkinnableInterface");
		return ptr;
	}

};


// Class TslGame.StatTrakableInterface
// 0x0000 (0x0028 - 0x0028)
class UStatTrakableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StatTrakableInterface");
		return ptr;
	}

};


// Class TslGame.WeaponMeshComponent
// 0x00F0 (0x11B0 - 0x10C0)
class UWeaponMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x10C0(0x0010) MISSED OFFSET
	TArray<struct FWeaponAttachmentAssetData>          AttachedDatas;                                            // 0x10D0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x10E0(0x0020) (CPF_Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x1100(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x1100(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.WeaponMeshComponent.AttachedStaticComponentMap
	float                                              ForceUpdatePoseDistanceSqr;                               // 0x1160(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceTickPose : 1;                                       // 0x1164(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x1165(0x0003) MISSED OFFSET
	class AStatTrakActor*                              StatTrakActor;                                            // 0x1168(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x1170(0x0010) MISSED OFFSET
	class UMeshComponent*                              CharmMesh;                                                // 0x1180(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnLoadedAttachmentAssetDatas;                             // 0x1188(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    UpdateWeaponMeshOnLoadedAttachment;                       // 0x1198(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData05[0x8];                                       // 0x11A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponMeshComponent");
		return ptr;
	}


	void OnAttachmentStaticMeshLoaded();
};


// Class TslGame.VaultingData
// 0x0108 (0x0138 - 0x0030)
class UVaultingData : public UDataAsset
{
public:
	float                                              LocationStartNormalScale;                                 // 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LocationStartZOffset;                                     // 0x0034(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LocationEndNormalScale;                                   // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LocationEndZOffset;                                       // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsClimb : 1;                                             // 0x0040(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsSlide : 1;                                             // 0x0041(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	float                                              VaultInitialTimer;                                        // 0x0044(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ApexAdditiveStartTime;                                    // 0x0048(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ApexAdditiveEndTime;                                      // 0x004C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PreApexSpeedScale;                                        // 0x0050(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PostApexSpeedScale;                                       // 0x0054(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VaultEndToFallTimerCutoff;                                // 0x0058(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartCutoffByDistance_InMap;                              // 0x005C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartCutoffByDistance_OutMap;                             // 0x0064(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartCutoffBySpeed_InMap;                                 // 0x006C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartCutoffBySpeed_OutMap;                                // 0x0074(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_InMap_PreApex;                            // 0x007C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_OutMap_PreApex;                           // 0x0084(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_InMap_PostApex;                           // 0x008C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_OutMap_PostApex;                          // 0x0094(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           AnimationSequence;                                        // 0x00A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           AnimationSequence_Rifle;                                  // 0x00A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 AnimationCurve;                                           // 0x00B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   CharLocationInterpSpeedInMap;                             // 0x00B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   CharLocationInterpSpeedOutMap;                            // 0x00C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   TimerProgressionByDistanceInMap;                          // 0x00C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   TimerProgressionByDistanceOutMap;                         // 0x00D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TimerProgressionVTimerMax;                                // 0x00D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VaultEndTimerNormal;                                      // 0x00DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VaultEndTimerFall;                                        // 0x00E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CharacterPostVaultVelocityScalar;                         // 0x00E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     CharacterPostVaultVelocityScalarVector;                   // 0x00E8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     CharacterPostVaultVelocityScalarVector_ToFall;            // 0x00F4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AnimBlendInTime;                                          // 0x0100(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AnimBlendOutTime;                                         // 0x0104(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCanVaultWithWeapon : 1;                                  // 0x0108(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsCancellable : 1;                                       // 0x0109(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x010A(0x0002) MISSED OFFSET
	float                                              MinCancelVTimer;                                          // 0x010C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxCancelVTimer;                                          // 0x0110(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TaskEndVTimer;                                            // 0x0114(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PostVaultTimerProgressionScale;                           // 0x0118(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseStaticVTimerDampening : 1;                            // 0x011C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseMappedVTimerDampening : 1;                            // 0x011D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x011E(0x0002) MISSED OFFSET
	float                                              StaticDampeningScalar;                                    // 0x0120(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StaticDampeningVTimerMax;                                 // 0x0124(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MappedDampeningScalar;                                    // 0x0128(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MappedDampeningVTimerMax;                                 // 0x012C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseCustomApexForTimer : 1;                               // 0x0130(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              CustomApex;                                               // 0x0134(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VaultingData");
		return ptr;
	}


	class UAnimSequenceBase* GetVaultAnimation(bool bHasRifle);
	float GetBlendSpeedByDistance(float InDistance);
	float GetAnimationLength();
	class UCurveFloat* GetAnimationCurve();
};


// Class TslGame.WeaponGunDataAsset
// 0x0280 (0x02B0 - 0x0030)
class UWeaponGunDataAsset : public UDataAsset
{
public:
	struct FWeaponGunConfigReplacement                 WeaponGunConfig;                                          // 0x0030(0x0118) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FWeaponDeviationConfig                      WeaponDeviationConfig;                                    // 0x0148(0x0044) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	struct FWeaponAnimConfig                           WeaponAnimConfig;                                         // 0x0190(0x0120) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponGunDataAsset");
		return ptr;
	}

};


// Class TslGame.WeaponProcessorComponent
// 0x0100 (0x02E0 - 0x01E0)
class UWeaponProcessorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01E0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponProcessorArmed;                                   // 0x01E8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x78];                                      // 0x01F8(0x0078) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquippedWeaponsReplicated;                              // 0x0270(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0280(0x0010) MISSED OFFSET
	TArray<class ATslWeapon*>                          EquippedWeapons;                                          // 0x0290(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATslWeapon*>                          PrevEquippedWeaponsForBackup;                             // 0x02A0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FWeaponArmInfo                              WeaponArmInfo;                                            // 0x02B0(0x0004) (CPF_Net, CPF_Transient)
	struct FWeaponArmInfo                              WeaponArmInfo_OwnerOnly;                                  // 0x02B4(0x0004) (CPF_Net, CPF_Transient)
	unsigned char                                      bPressedActionFire : 1;                                   // 0x02B8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x02B9(0x0007) MISSED OFFSET
	TArray<class ATslProjectile*>                      FakeProjectiles;                                          // 0x02C0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x10];                                      // 0x02D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponProcessorComponent");
		return ptr;
	}


	void ServerUnarmCurrentWeapon(unsigned char CurServerUpdateSeqNum, bool bNeedAnimation, int WeapIndex);
	void ServerArmWeapon(unsigned char CurServerUpdateSeqNum, int WeaponIndex, bool bNeedAnimation, const struct FVector& L, int A, int B);
	void Server_ResyncWeaponArmInfo(const struct FWeaponArmInfo& OwnerArmInfo);
	void OwnerClient_ResyncWeaponArmInfo(unsigned char ServerUpdateSeqNum);
	void OnRep_WeaponArmInfo_OwnerOnly(const struct FWeaponArmInfo& OldArmInfo);
	void OnRep_WeaponArmInfo(const struct FWeaponArmInfo& OldArmInfo);
	void OnRep_EquippedWeapons(TArray<class ATslWeapon*> LastEquippedWeapons);
	void NotifyWeaponUpdate();
	bool IsUnarmedWeapon(int WeaponIndex);
	bool HasWeaponByIndex(int Index);
	bool HasUnarmedWeapon();
	class ATslWeapon_Trajectory* GetWeaponTrajectory();
	class ATslWeapon_Throwable* GetWeaponThrowable();
	class ATslWeapon_Gun_Projectile* GetWeaponProjectile();
	int GetWeaponIndex();
	class ATslWeapon_Gun* GetWeaponGun();
	class ATslWeapon* GetWeaponByIndex(int Index);
	class ATslWeapon* GetWeapon();
	int GetUnarmedWeaponIndex();
	class ATslWeapon* GetLeftHandWeapon();
	class ATslWeapon* GetCurrentWeapon();
	class ATslWeapon* FindWeapon(class UClass* WeaponClass);
};


// Class TslGame.HackReporterComponent
// 0x0270 (0x0450 - 0x01E0)
class UHackReporterComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x270];                                     // 0x01E0(0x0270) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.HackReporterComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class TslGame.InteractionInterface
// 0x0000 (0x0028 - 0x0028)
class UInteractionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.InteractionInterface");
		return ptr;
	}

};


// Class TslGame.TslEmoteTraceData
// 0x0010 (0x0040 - 0x0030)
class UTslEmoteTraceData : public UDataAsset
{
public:
	TArray<struct FEmoteTraceCheck>                    TraceCheckArray;                                          // 0x0030(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEmoteTraceData");
		return ptr;
	}

};


// Class TslGame.TslEmoteDB
// 0x0000 (0x0080 - 0x0080)
class UTslEmoteDB : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEmoteDB");
		return ptr;
	}

};


// Class TslGame.TslEmoteComponent
// 0x0090 (0x0270 - 0x01E0)
class UTslEmoteComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01E0(0x0028) MISSED OFFSET
	float                                              EmotePlayTimeout;                                         // 0x0208(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SimulatedProxyFailedChecksTollerance;                     // 0x020C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0210(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslEmoteComponent");
		return ptr;
	}


	void Server_EmotePlay(const struct FName& InEmoteName, bool bIsRNG, const struct FName& SectionName, bool bCheatMenu, const struct FVector& L, int A, int B);
	void SendSystemMessageEmoteUnavailable();
	void SendSystemMessageEmoteEmpty();
	void SendSystemMessageEmoteBlocked();
	void OnMontageInterrupted(class UAnimMontage* Montage);
	class UTexture2D* GetEmoteTextureByName(const struct FName& EmoteName);
	TArray<struct FName> GetEmoteNames();
	class UAnimMontage* GetEmoteMontageByName(const struct FName& EmoteName);
	class UMaterialInterface* GetEmoteMaterialByName(const struct FName& EmoteName);
	struct FText GetEmoteLocalizedName(const struct FName& EmoteName);
	class UDataTable* GetEmoteDataTable();
	bool Emote_TryToPlay(const struct FName& EmoteName, bool bIsLobby, bool bCheatMenu);
	void Client_EmotePlay(const struct FName& InEmoteName, bool bIsRNG, const struct FName& SectionName);
	bool CanOpenEmoteWheel();
};


// Class TslGame.Team
// 0x0090 (0x0478 - 0x03E8)
class ATeam : public AActor
{
public:
	struct FVector_NetQuantize100                      PlayerLocation;                                           // 0x03E8(0x000C) (CPF_Net, CPF_Transient)
	struct FRotator                                    PlayerRotation;                                           // 0x03F4(0x000C) (CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	struct FString                                     PlayerName;                                               // 0x0400(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     ClanName;                                                 // 0x0410(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      Health;                                                   // 0x0420(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      HealthMax;                                                // 0x0421(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      GroggyHealth;                                             // 0x0422(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      GroggyHealthMax;                                          // 0x0423(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector2D                                   MapMarkerPosition;                                        // 0x0424(0x0008) (CPF_Net, CPF_IsPlainOldData)
	struct FVector2D                                   PingPosition;                                             // 0x042C(0x0008) (CPF_Net, CPF_IsPlainOldData)
	unsigned char                                      bIsDying : 1;                                             // 0x0434(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bIsGroggying : 1;                                         // 0x0434(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bQuitter : 1;                                             // 0x0434(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bShowMapMarker : 1;                                       // 0x0434(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bIsInVehicle : 1;                                         // 0x0434(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bIsSkydiving : 1;                                         // 0x0435(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsParachuting : 1;                                       // 0x0436(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0437(0x0001) MISSED OFFSET
	float                                              BoostGauge;                                               // 0x0438(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int8_t                                             TeamIdRep;                                                // 0x043C(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int8_t                                             MemberIndex;                                              // 0x043D(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int8_t                                             SquadIndex;                                               // 0x043E(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int8_t                                             SquadMemberIndex;                                         // 0x043F(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslCharacter*                               TslCharacter;                                             // 0x0440(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0448(0x0004) MISSED OFFSET
	float                                              PiningTimeSeconds;                                        // 0x044C(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0450(0x0008) MISSED OFFSET
	struct FString                                     UniqueId;                                                 // 0x0458(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	class ATslPlayerState*                             AuthorizedPlayerState;                                    // 0x0468(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslPlayerState*                             CachedTslPlayerState;                                     // 0x0470(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.Team");
		return ptr;
	}


	void ServerSetShowMapMarker(bool bNewShowMapMarker);
	void ServerSetPingPosition(const struct FVector2D& NewPingPosition);
	void ServerSetMapMarkerPosition(const struct FVector2D& NewMapMarkerPosition);
	void OnRep_Dying(bool bLastDying);
	bool IsSkydiving();
	bool IsShowMapMarker();
	bool IsQuitter();
	bool IsParachuting();
	bool IsGroggying();
	bool IsDying();
	class ATslCharacter* GetTslCharacter();
	int GetSquadMemberIndex();
	int GetSquadIndex();
	struct FString GetPlayerUniqueId();
	struct FRotator GetPlayerRotation();
	struct FString GetPlayerName();
	struct FVector GetPlayerLocation();
	float GetPiningTimeSeconds();
	struct FVector2D GetPingPosition();
	int GetMemberNumber();
	struct FVector2D GetMapMarkerPosition();
	bool GetIsInVehicle();
	float GetHealthMax();
	float GetHealth();
	float GetGroggyHealthMax();
	float GetGroggyHealth();
	struct FString GetClanName();
};


// Class TslGame.StanceComponent
// 0x0090 (0x0270 - 0x01E0)
class UStanceComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01E0(0x0008) MISSED OFFSET
	struct FStanceTransitionData                       StanceTransitionData;                                     // 0x01E8(0x0060) (CPF_Edit, CPF_DisableEditOnInstance)
	TEnumAsByte<EStanceMode>                           CurrentStance;                                            // 0x0248(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x27];                                      // 0x0249(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StanceComponent");
		return ptr;
	}


	void ServerForceInitStance();
	void ServerChangeStance(TEnumAsByte<EStanceMode> ToStance, uint32_t P, uint32_t A, uint32_t B, uint32_t C, uint64_t H);
	void OnRep_CurrentStance(TEnumAsByte<EStanceMode> OldCurrentStand);
	void ForceStanceChange(TEnumAsByte<EStanceMode> ToStance);
	void ClientInitByReconnection(TEnumAsByte<EStanceMode> InitStance);
};


// Class TslGame.TslCharacterMovement
// 0x03A0 (0x0CA0 - 0x0900)
class UTslCharacterMovement : public UCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0900(0x0008) MISSED OFFSET
	int                                                BroSimulateMovement;                                      // 0x0908(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x090C(0x0004) MISSED OFFSET
	struct FVector                                     NetComputedPosition;                                      // 0x0910(0x000C) (CPF_IsPlainOldData)
	struct FVector                                     NetMeshPositionInPhysicsScene;                            // 0x091C(0x000C) (CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0928(0x0060) MISSED OFFSET
	float                                              MaxProneSpeed;                                            // 0x0988(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ProneAlignementThreshold;                                 // 0x098C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxGroggySpeed;                                           // 0x0990(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              JumpedHalfHeight;                                         // 0x0994(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0998(0x0004) MISSED OFFSET
	float                                              JumpVelocityLossScale;                                    // 0x099C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ToFallVelocityDTScale;                                    // 0x09A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ToFallVelocityClamp;                                      // 0x09A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpeedToJumpModifier;                                      // 0x09A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinJumpZVelocity;                                         // 0x09AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxJumpZVelocity;                                         // 0x09B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LandingJumpDecreaseModifier;                              // 0x09B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RecoveryWalkSpeedRatePerSec;                              // 0x09B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinWalkSpeedModifier;                                     // 0x09BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkSpeedModifierUnit;                                    // 0x09C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinStandingJumpXYSpeed;                                   // 0x09C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpeedInWaterModifier;                                     // 0x09C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseCPVault : 1;                                          // 0x09CC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x09CD(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData05[0x50];                                      // 0x09CD(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslCharacterMovement.VaultingDataMap
	int                                                HeightFor200;                                             // 0x0A20(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                HeightFor160;                                             // 0x0A24(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                HeightFor120;                                             // 0x0A28(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                HeightFor90;                                              // 0x0A2C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                HeightFor60;                                              // 0x0A30(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SizeForNarrow;                                            // 0x0A34(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                SizeForSlide;                                             // 0x0A38(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VelocityForMobile;                                        // 0x0A3C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GlobalVaultScale;                                         // 0x0A40(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VaultCancelDTScalar;                                      // 0x0A44(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinVelocityForStaticVaultCheck;                           // 0x0A48(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   MaxVaultDistanceByVelocityInMap;                          // 0x0A4C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   MaxVaultDistanceByVelocityOutMap;                         // 0x0A54(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVaultingTask                               CurrentVaultingTask;                                      // 0x0A5C(0x0044) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UVaultingData*                               CurrentVaultingData;                                      // 0x0AA0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              V_Timer_CP;                                               // 0x0AA8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimMultiplierPreApex;                                    // 0x0AAC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimMultiplierPostApex;                                   // 0x0AB0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsVaulting_CP : 1;                                       // 0x0AB4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0AB5(0x0003) MISSED OFFSET
	struct FVector                                     CharacterRelLocation;                                     // 0x0AB8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     LastVaultLocation;                                        // 0x0AC4(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     AveragedVelocity;                                         // 0x0AD0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              LastVaultTime;                                            // 0x0ADC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultCancelAnimSpeed;                                     // 0x0AE0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWantsToCancelVault : 1;                                  // 0x0AE4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0AE5(0x0003) MISSED OFFSET
	float                                              VaultingDistanceLimit;                                    // 0x0AE8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x24];                                      // 0x0AEC(0x0024) MISSED OFFSET
	class ATslCharacter*                               TslCharacterOwner;                                        // 0x0B10(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	uint32_t                                           TickCounterOnOptimizeAnim;                                // 0x0B18(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	uint32_t                                           ForceUpdateRateOnOptimizeAnim;                            // 0x0B1C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3C];                                      // 0x0B20(0x003C) MISSED OFFSET
	float                                              MinDistanceToBreakGlass;                                  // 0x0B5C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSweepTestDistanceToBreakGlass;                         // 0x0B60(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RiderSphereRadiusToBreakGlass;                            // 0x0B64(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LastPelvisLocation;                                       // 0x0B68(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bInitLastPelvisLocation : 1;                              // 0x0B74(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x27];                                      // 0x0B75(0x0027) MISSED OFFSET
	float                                              MaxSwimAcceleration;                                      // 0x0B9C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxZSpeedOutOfWaterModifier;                              // 0x0BA0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    MaxSwimmingRotationRate;                                  // 0x0BA4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    SwimmingRotationAcceleration;                             // 0x0BB0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	float                                              MaxZSpeedOutOfWaterModifierForStandingSwimming;           // 0x0BBC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WaveRidingModifier;                                       // 0x0BC0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WaveRidingSmoothingFactor;                                // 0x0BC4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WaveRidingModifierUnderWater;                             // 0x0BC8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StayingUnderWaterDepthBand;                               // 0x0BCC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0BD0(0x0004) MISSED OFFSET
	float                                              MaxUnderwaterSwimSpeed;                                   // 0x0BD4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxUnderwaterSwimAcceleration;                            // 0x0BD8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingDecelerationUnderwaterSwimming;                    // 0x0BDC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    MaxUnderwaterSwimmingRotationRate;                        // 0x0BE0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FRotator                                    UnderwaterSwimmingRotationAcceleration;                   // 0x0BEC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	float                                              MinimumHighAltitude;                                      // 0x0BF8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0BFC(0x0004) MISSED OFFSET
	float                                              MaxFallLateralSpeedAtHighAltitude;                        // 0x0C00(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TerminalVelocityAtHighAltitude;                           // 0x0C04(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DecreaseTerminalVelocityAtHighAltitude;                   // 0x0C08(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxFallAccelerationAtHighAltitude;                        // 0x0C0C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    FallRotationRateAtHighAltitude;                           // 0x0C10(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AirControlAtHighAltitude;                                 // 0x0C1C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AirControlBoostMultiplierAtHighAltitude;                  // 0x0C20(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AirControlBoostVelocityThresholdAtHighAltitude;           // 0x0C24(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      FallingDamageType;                                        // 0x0C28(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 EjectDamageCurve;                                         // 0x0C30(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FallingDamageMinZCut;                                     // 0x0C38(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FallingDamageVDampingZ;                                   // 0x0C3C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FallingDamageFactor;                                      // 0x0C40(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x18];                                      // 0x0C44(0x0018) MISSED OFFSET
	unsigned char                                      UseBlockedHitDamage : 1;                                  // 0x0C5C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x13];                                      // 0x0C5D(0x0013) MISSED OFFSET
	TArray<struct FOverlappingObjectInfo>              OverlappingObjectInfoArray;                               // 0x0C70(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      UnknownData15[0x20];                                      // 0x0C80(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCharacterMovement");
		return ptr;
	}


	bool TraceSphereForVaulting(const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<EDrawDebugTrace> DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool TraceLineForVaulting(const struct FVector& Start, const struct FVector& End, TEnumAsByte<EDrawDebugTrace> DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool TraceCapsuleForVaulting(const struct FVector& Start, const struct FVector& End, TEnumAsByte<EDrawDebugTrace> DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	void StartVaultingTask(const struct FVaultingTask& InVaultTask);
	void SetCustomMovementModeOverride(unsigned char InCustomMode);
	void PredictCapsulePathForVaulting(const struct FVector& StartPos, const struct FVector& LaunchVelocity, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float CapsuleRadiusOverride, float CapsuleHalfHeightOverride, float SimFrequency, float MaxSimTime, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination);
	void LocalHandleVault_CP(const struct FVector& VaultStart, const struct FVector& VaultApex, const struct FVector& VaultApexAdditive, const struct FVector& VaultEnd, bool bIsClimb, bool bEndToFall, float Direction, float PlayerVelocity, float DistanceFromObject);
	bool IsVaultResultSafe(const struct FVector& StartPos, const struct FVector& EndPos, const struct FVector& ImpactPosition, const struct FName& ImpactObjectName, const struct FVector& InApex);
	bool IsVaulting();
	void HandleVaultPreEvaluation(bool bForceVelocity, const struct FVector& InForcedVelocity);
	struct FVaultingHandleResult HandleVaulting(const struct FVaultingHandleInput& Input);
	float GetVTimer();
	class UVaultingData* GetVaultingDataFromAnim();
	float GetMaxVaultDistanceBySpeed();
	float GetGlobalVaultingSpeedMultiplier();
	void GetCurrentVaultType();
	void EvaluateVaultAnimType(int FirstRow, int ApexAdditiveStepCounter, float AverageCellCount, bool bForceVault, bool bForceClimb, float CharVelocity);
	bool EndCurrentTaskToFall();
};


// Class TslGame.TslParachuteAnimInstance
// 0x0260 (0x05F0 - 0x0390)
class UTslParachuteAnimInstance : public UAnimInstance
{
public:
	class ATslCharacter*                               CharacterRef_CP;                                          // 0x0390(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	struct FRotator                                    ParachuteRotation_CP;                                     // 0x03A0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              ParaTurn_CP;                                              // 0x03AC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParaPitch_CP;                                             // 0x03B0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsReleased_CP : 1;                                       // 0x03B4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsReplayJumping_CP : 1;                                  // 0x03B5(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xA];                                       // 0x03B6(0x000A) MISSED OFFSET
	struct FTransform                                  IK_L_CP;                                                  // 0x03C0(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FTransform                                  IK_R_CP;                                                  // 0x03F0(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     IK_L_Location_CP;                                         // 0x0420(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    IK_L_Rotation_CP;                                         // 0x042C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     IK_R_Location_CP;                                         // 0x0438(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    IK_R_Rotation_CP;                                         // 0x0444(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              EnableIKAlpha_CP;                                         // 0x0450(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RigidbodyAlpha;                                           // 0x0454(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PhysicsBlendAlpha;                                        // 0x0458(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	struct FTransform                                  IK_L_Handle_CP;                                           // 0x0460(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FTransform                                  IK_R_Handle_CP;                                           // 0x0490(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FTransform                                  IK_L_Strap_CP;                                            // 0x04C0(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FTransform                                  IK_R_Strap_CP;                                            // 0x04F0(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              IK_L_Handle_Alpha_CP;                                     // 0x0520(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              IK_R_Handle_Alpha_CP;                                     // 0x0524(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RollTendency;                                             // 0x0528(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchTendency;                                            // 0x052C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TendencyFrame;                                            // 0x0530(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsLanding_CP : 1;                                        // 0x0534(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0535(0x0003) MISSED OFFSET
	float                                              LandingAlpha_CP;                                          // 0x0538(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsMoving_CP : 1;                                         // 0x053C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsCollapsed_CP : 1;                                      // 0x053D(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsManualCutoff_CP : 1;                                   // 0x053E(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsAutoCutoff_CP : 1;                                     // 0x053F(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParaAnimTimeFromStart_CP;                                 // 0x0540(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ClientRotYawScale;                                        // 0x0544(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseNewParachuteAnims : 1;                                // 0x0548(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0549(0x0007) MISSED OFFSET
	struct FName                                       LeftItemBoneName;                                         // 0x0550(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       RightItemBoneName;                                        // 0x0558(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       LeftHandleBoneName;                                       // 0x0560(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       RightHandleBoneName;                                      // 0x0568(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       LeftStrapBoneName;                                        // 0x0570(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       RightStrapBoneName;                                       // 0x0578(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LandingCheckVelocityScalar;                               // 0x0580(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LandingCheckStartAltitude;                                // 0x0584(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LandingCheckTickTime;                                     // 0x0588(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     TerminalVelocity_CP;                                      // 0x058C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TermianlVelocityInterpSpeed;                              // 0x0598(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TerminalVelocityOrientationScalar;                        // 0x059C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     TerminalVelocityStaticGravity;                            // 0x05A0(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TermianlVelocityMax;                                      // 0x05AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FName>                               ForceApplyBodyNames;                                      // 0x05B0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      bPhysicsForceToAllBodies : 1;                             // 0x05C0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05C1(0x0003) MISSED OFFSET
	struct FVector                                     ParachuteOrientationMultiplier;                           // 0x05C4(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                ParachutePhysicsMaxLOD;                                   // 0x05D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x1C];                                      // 0x05D4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParachuteAnimInstance");
		return ptr;
	}


	void DetachParachuteFromCharacter();
	void DetachPara_BP();
	void CutoffFinishedNotify();
	void ActivateParachuteIK();
};


// Class TslGame.SkinnableSkeletalMeshComponent
// 0x0010 (0x10D0 - 0x10C0)
class USkinnableSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x10C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SkinnableSkeletalMeshComponent");
		return ptr;
	}


	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void SuspendClothingSimulation();
	void Stop();
	void SnapshotPose(struct FPoseSnapshot* Snapshot);
	void SetUpdateAnimationInEditor(bool NewUpdateState);
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);
	void SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);
	void SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetClothMaxDistanceScale(float Scale);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);
	void SetAnimInstanceClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void ResumeClothingSimulation();
	void ResetClothTeleportMode();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	bool K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance);
	bool IsPlaying();
	bool IsClothingSimulationSuspended();
	bool IsBodyGravityEnabled(const struct FName& BoneName);
	bool HasValidAnimationInstance();
	struct FVector GetSkeletalCenterOfMass();
	class UAnimInstance* GetPostProcessInstance();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	void GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float GetClothMaxDistanceScale();
	float GetBoneMass(const struct FName& BoneName, bool bScaleMass);
	class UAnimInstance* GetAnimInstance();
	TEnumAsByte<EAnimationMode> GetAnimationMode();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	struct FName FindConstraintBoneName(int ConstraintIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName);
	void BindClothToMasterPoseComponent();
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);
	void AddForceToAllBodiesBelow(const struct FVector& force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};


// Class TslGame.EquipableItem
// 0x0108 (0x0350 - 0x0248)
class UEquipableItem : public UItem
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0248(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipableItem.EquipSlotId
	unsigned char                                      UnknownData01[0x3];                                       // 0x0249(0x0003) MISSED OFFSET
	float                                              SpaceExtension;                                           // 0x024C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DamageReductionRate;                                      // 0x0250(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DurabilityMax;                                            // 0x0254(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      DestroyByDurability : 1;                                  // 0x0258(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0259(0x0003) MISSED OFFSET
	float                                              Durability;                                               // 0x025C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0260(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipableItem.DurabilityConsumeType
	unsigned char                                      UnknownData04[0x3];                                       // 0x0261(0x0003) MISSED OFFSET
	float                                              DamageTransferRate;                                       // 0x0264(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FCustomizableObjectIdentifier               CustomizableObjectIdentifierForMale;                      // 0x0268(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FCustomizableObjectIdentifier               CustomizableObjectIdentifierForFemale;                    // 0x0298(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FCustomizableObjectIdPair                   CustomizableObjectOriginalSkin;                           // 0x02C8(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UAkAudioEvent*                               EquipedSoundAk;                                           // 0x02E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x02F0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipableItem.SoundGroup
	unsigned char                                      UnknownData06[0x1];                                       // 0x02F1(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipableItem.SoundType
	unsigned char                                      bCanZombieEquip : 1;                                      // 0x02F2(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x02F3(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipableItem.SlotOffsetType
	unsigned char                                      UnknownData08[0x4];                                       // 0x02F4(0x0004) MISSED OFFSET
	struct FName                                       SkinTag;                                                  // 0x02F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsUnequipable : 1;                                       // 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0301(0x0007) MISSED OFFSET
	TAssetPtr<class UTexture>                          HudDisplayEquipIcon;                                      // 0x0308(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	struct FReplicatedSkinItem                         ReplicatedSkinItem;                                       // 0x0330(0x0010) (CPF_Net, CPF_Transient)
	TArray<struct FConstraintSlotConfig>               ConstraintSlotConfigs;                                    // 0x0340(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.EquipableItem");
		return ptr;
	}


	void UnequipBy(class ATslCharacter* Character);
	void PostEquip(class ATslCharacter* Character);
	void OnRep_ReplicatedSkinItem();
	bool EquipBy(class ATslCharacter* Character, const struct FEquipPosition& Position);
	bool CanEquipTo(class ATslCharacter* Character);
};


// Class TslGame.ParachuteItem
// 0x0010 (0x0360 - 0x0350)
class UParachuteItem : public UEquipableItem
{
public:
	struct FStringClassReference                       ParachuteType;                                            // 0x0350(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ParachuteItem");
		return ptr;
	}

};


// Class TslGame.SkydiveStateWidget
// 0x01A0 (0x0558 - 0x03B8)
class USkydiveStateWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bIsParachuting : 1;                                       // 0x03B8(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMainVisibility : 1;                                      // 0x03B9(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03BA(0x0002) MISSED OFFSET
	float                                              VerticalVelocity;                                         // 0x03BC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HorizontalVelocity;                                       // 0x03C0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AltitudeOffsetInPX;                                       // 0x03C4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParaOpenAltitudeInPX;                                     // 0x03C8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AltitudeGaugeScaleInPx;                                   // 0x03CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxAltitudeInMeters;                                      // 0x03D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RenderOffsetPerTeammate;                                  // 0x03D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RenderOffsetInSquadStatic;                                // 0x03D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET
	class UTslSkydiveComponent*                        SkydiveCompRef;                                           // 0x03E0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     Border_Main_Binder;                                       // 0x03F0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CP_Parachute_Binder;                                      // 0x0420(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CP_Marker_Binder;                                         // 0x0448(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      IMG_Icon_Binder;                                          // 0x0470(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    SB_GaugeParaRange_Binder;                                 // 0x0498(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    SB_GaugeLandHeight_Binder;                                // 0x04C0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  T_VerticalSpeed_Binder;                                   // 0x04E8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  T_HorizontalSpeed_Binder;                                 // 0x0508(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              HB_HorizontalSpeed_Binder;                                // 0x0528(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	float                                              AbsoluteModeScaleFactor;                                  // 0x0550(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SkydiveStateWidget");
		return ptr;
	}


	void TickStateCheck();
	void HandleSettingsChanged();
};


// Class TslGame.TslSkydiveComponent
// 0x0EA0 (0x1080 - 0x01E0)
class UTslSkydiveComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x01E0(0x0058) MISSED OFFSET
	class USkydiveStateWidget*                         SkydiveWidgetRef;                                         // 0x0238(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8B4];                                     // 0x0240(0x08B4) MISSED OFFSET
	struct FSimulationStep                             RemoteSimulationStep;                                     // 0x0AF4(0x0048) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0B3C(0x000C) MISSED OFFSET
	float                                              TargetInputForward;                                       // 0x0B48(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              TartgetInputRight;                                        // 0x0B4C(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              TargetHeading;                                            // 0x0B50(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0B54(0x0004) MISSED OFFSET
	struct FReplicatedSkinParam                        ParachuteSkinData;                                        // 0x0B58(0x0020) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0B78(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslSkydiveComponent.SkydiveState
	unsigned char                                      UnknownData05[0x1];                                       // 0x0B79(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslSkydiveComponent.ParachuteCutoffState
	unsigned char                                      bIsManualCutoffAllowed : 1;                               // 0x0B7A(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData06[0x29];                                      // 0x0B7B(0x0029) MISSED OFFSET
	struct FSkydiveRotationSettings                    RotationSettings;                                         // 0x0BA4(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveDragSettings                        DragSettings;                                             // 0x0BBC(0x0014) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveLateralSettings                     LateralSettings;                                          // 0x0BD0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FFreefallVelocitySettings                   FreefallVelocitySettings;                                 // 0x0BF0(0x000C) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveVelocitySettings                    VelocityMergeSettings;                                    // 0x0BFC(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveInputSettings                       InputSettings;                                            // 0x0C2C(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0C54(0x0004) MISSED OFFSET
	struct FParachuteGeneralSettings                   ParachuteGeneralSettings;                                 // 0x0C58(0x00D0) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FParachuteControlSettings                   ParachuteControlSettings;                                 // 0x0D28(0x0030) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FParachuteVelocitySettings                  ParachuteVelocitySettings;                                // 0x0D58(0x007C) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FParachuteDeploySettings                    ParachuteDeploySettings;                                  // 0x0DD4(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FParachuteCutoffSettings                    ParachuteCutoffSettings;                                  // 0x0DE4(0x0050) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FParachuteOverlapSettings                   ParachuteOverlapSettings;                                 // 0x0E34(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0E54(0x0004) MISSED OFFSET
	struct FAnimUpdateRateSettings                     ParachuteUpdateRateSettings;                              // 0x0E58(0x0078) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FParachuteLandSettings                      LandSettings;                                             // 0x0ED0(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveNetInterpSettings                   SkydiveNetInterpSettings;                                 // 0x0EE8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveEffects                             SkydiveEffects;                                           // 0x0F10(0x0058) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveAudioSettings                       SkydiveAudioSettings;                                     // 0x0F68(0x0078) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FSkydiveDamageSettings                      DamageSettings;                                           // 0x0FE0(0x0048) (CPF_Edit, CPF_DisableEditOnInstance)
	int                                                MaxWindowSize;                                            // 0x1028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                MaxAheadWindowSize;                                       // 0x102C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              UncorrectedSmoothingSpeed;                                // 0x1030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ClientCorrectionThreshold;                                // 0x1034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                MinStateBroadcastRate;                                    // 0x1038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ServerSimulationStartOffsetSec;                           // 0x103C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FF_Grav_Scalar;                                           // 0x1040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FF_Grav_MinRangeScalar;                                   // 0x1044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class USkinnableSkeletalMeshComponent*             ParachuteSKReference;                                     // 0x1048(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UParticleSystemComponent*                    FreefallParticleRef;                                      // 0x1050(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UParticleSystemComponent*                    ParachuteTrailParticleRef;                                // 0x1058(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AkComponentRef;                                           // 0x1060(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x18];                                      // 0x1068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSkydiveComponent");
		return ptr;
	}


	void Server_UpdateView(const struct FRotator& ControlRotation);
	void Server_StopParachuting(bool bToFall, int ClientSimStep, float InStepAlpha);
	void Server_SetSkydiveState();
	void Server_SetRightInput(float InNewRight);
	void Server_SetPlayerHeading(float InNewHeading);
	void Server_SetForwardInput(float InNewForward);
	void Server_SetCutoffState();
	void Server_RequestParachuteOpen();
	void Server_ProcessInput(const struct FSimulationStep& InputStep);
	void Server_ManualCutoffComplete();
	void OnRep_SkydiveStateChanged();
	void OnRep_RemoteSimStepChanged();
	void OnRep_ParachuteSkinChanged();
	void OnRep_ParachuteReleased();
	void OnRep_CutoffChanged();
	void OnManualCutOffComplete();
	void Multi_PlayLanding(const struct FParachuteLandingData& InLandingData);
	void Multi_DetachParachute();
	void ForceMeshRotationResetStep();
	void Demo_SetRightInput(float InNewRight);
	void Demo_SetRemoteState(const struct FSimulationStep& SimStep);
	void Demo_SetPlayerHeading(float InNewHeading);
	void Demo_SetForwardInput(float InNewForward);
	void DelayedStopParachuting();
	void Client_ReceiveServerCorrection(const struct FSimulationStep& CorrectionStep, int ActualServerStep);
	void Client_ReceiveHardCorrection(const struct FSimulationStep& CorrectionStep);
	void Client_DrawLandingLocation(const struct FVector& InLocation, const struct FVector& InPrevLocation, int InStep);
	void Client_DrawDebugString(const struct FVector& InPosition, const struct FString& inString, const struct FColor& InColor, float InTime, float InSize);
	void Client_DrawDebugPosition(const struct FVector& InPosition, const struct FRotator& InRotation);
	void Client_DrawDebugLine(const struct FVector& InStart, const struct FVector& InEnd, const struct FColor& InColor, float InDuration);
};


// Class TslGame.TslGamepadDebugHud
// 0x0058 (0x0410 - 0x03B8)
class UTslGamepadDebugHud : public UUmgBaseWidget
{
public:
	float                                              LStickX_Raw;                                              // 0x03B8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LStickY_Raw;                                              // 0x03BC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RStickX_Raw;                                              // 0x03C0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RStickY_Raw;                                              // 0x03C4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LStickX;                                                  // 0x03C8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LStickY;                                                  // 0x03CC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RStickX;                                                  // 0x03D0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RStickY;                                                  // 0x03D4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SensitivityValue;                                         // 0x03D8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET
	struct FString                                     SensitivityName;                                          // 0x03E0(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              SensitivityValueX;                                        // 0x03F0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SensitivityValueY;                                        // 0x03F4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LStick_DeadZone;                                          // 0x03F8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RStick_DeadZone;                                          // 0x03FC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      IsRunning : 1;                                            // 0x0400(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      IsSprinting : 1;                                          // 0x0401(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0402(0x0002) MISSED OFFSET
	float                                              MoveForwardValue;                                         // 0x0404(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MoveRightValue;                                           // 0x0408(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGamepadDebugHud");
		return ptr;
	}


	void ProcessInputDetection();
	void NotifyKeyInputDetected(const struct FKey& InPressedKey, TArray<struct FName> ActionNames);
};


// Class TslGame.LoadingScreenDataTable
// 0x0000 (0x0080 - 0x0080)
class ULoadingScreenDataTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LoadingScreenDataTable");
		return ptr;
	}

};


// Class TslGame.TslLoadingScreen
// 0x0118 (0x04D0 - 0x03B8)
class UTslLoadingScreen : public UUmgBaseWidget
{
public:
	class UDataTable*                                  LoadingScreenDataTable_KeyGuide;                          // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UDataTable*                                  LoadingScreenDataTable;                                   // 0x03C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x03C8(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslLoadingScreen.DefaultBackgroundsByType
	class UClass*                                      DefaultTipWidget;                                         // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0420(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslLoadingScreen.KeyGuideRatioMap
	struct FLoadingScreenTypePercentConfig             KeyGuideTypePercentConfig;                                // 0x0470(0x0040) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FElementaryRankGuidePercentConfig           ElementaryRankGuidePercentConfigForTextTip;               // 0x04B0(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	class UBorder*                                     MainBorder;                                               // 0x04C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLoadingScreen");
		return ptr;
	}

};


// Class TslGame.TslSettings
// 0x0AB8 (0x0AE0 - 0x0028)
class UTslSettings : public UObject
{
public:
	int                                                ObserverNetSpeed;                                         // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      SupportedClientReplay : 1;                                // 0x002C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      SupportedKillcam : 1;                                     // 0x002D(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bStartServerRecording : 1;                                // 0x002E(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x002F(0x0001) MISSED OFFSET
	int                                                MK3DReplayVerNumForClient;                                // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                ReportAvailableRecordDaysAgo;                             // 0x0034(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxReplaysForNullStreamer;                                // 0x0038(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Item;                                         // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Character;                                    // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_NpcCharacter;                                 // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Weapon;                                       // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Vehicle;                                      // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Parachute;                                    // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Freefall;                                     // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Door;                                         // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistance_Window;                                       // 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepDistanceMinModifier;                                   // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepFrequency_Character;                                   // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepFrequency_NpcCharacter;                                // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepFrequency_WheeledVehicle;                              // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepFrequency_FloatingVehicle;                             // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepFrequency_Parachute;                                   // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepFrequency_Aircraft;                                    // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepFrequency_CarePackage;                                 // 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TMap<unsigned char, float>                         CustomNetUpdateRateMap;                                   // 0x0080(0x0050) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              DemoMaxRecordHz_Character;                                // 0x00D0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DemoMaxRecordHz_NpcCharacter;                             // 0x00D4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DemoMaxRecordHz_WheeledVehicle;                           // 0x00D8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DemoMaxRecordHz_FloatingVehicle;                          // 0x00DC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepVehicle_SpawnDistance;                                 // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RepVehicle_UnspawnDistance;                               // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FRigidBodyErrorCorrection                   RepVehicle_PhysicErrorCorrection;                         // 0x00E8(0x001C) (CPF_Edit, CPF_Config)
	float                                              CharacterCorrection_MaxSpeed;                             // 0x0104(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CharacterCorrection_MaxSpeedPositionError;                // 0x0108(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CharacterCorrection_ZeroSpeedPositionError;               // 0x010C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bBattlEyeEnabled : 1;                                     // 0x0110(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bBattlEyeEnabledInPIE : 1;                                // 0x0111(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0112(0x0002) MISSED OFFSET
	float                                              BattlEyeReliablePacketIntervalOnClient;                   // 0x0114(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BattlEyeReliablePacketIntervalOnServer;                   // 0x0118(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTPEnabled : 1;                                           // 0x011C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTPEnabledInPIE : 1;                                      // 0x011D(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTPLaFPSUpdateStatus : 1;                                 // 0x011E(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x011F(0x0001) MISSED OFFSET
	float                                              TPLaFPSUpdateStatusPeriodInMs;                            // 0x0120(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bChineseLicensing : 1;                                    // 0x0124(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseGappLobby : 1;                                        // 0x0125(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0126(0x0002) MISSED OFFSET
	struct FString                                     GappLobbyUrl;                                             // 0x0128(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bKoreanRating : 1;                                        // 0x0138(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bKakao : 1;                                               // 0x0139(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bKakaoTest : 1;                                           // 0x013A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIsXenuineRunning : 1;                                    // 0x013B(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              GameStateLogInterval;                                     // 0x013C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ServerStatLogInterval;                                    // 0x0140(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CharacterPositionLogInterval;                             // 0x0144(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DestructibleComponentMaxDrawDistance;                     // 0x0148(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	class UClass*                                      CharacterClassToPlay;                                     // 0x0150(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FBoneBinding>                        BoneMapping;                                              // 0x0158(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FStringAssetReference>               TestVehicleClasses;                                       // 0x0168(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FStringAssetReference>               TestFloatingVehicleClasses;                               // 0x0178(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FChineseLicensingDefaultCustomizeData> ChineseLicensingDefaultCustomizeData;                     // 0x0188(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              StoppedWheeledVehicleSpeedThreshold;                      // 0x0198(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              StoppedFloatingVehicleSpeedThreshold;                     // 0x019C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LastDriverDuration;                                       // 0x01A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData06[0x50];                                      // 0x01A4(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslSettings.SkinDataTableSet
	unsigned char                                      UnknownData07[0x50];                                      // 0x01F8(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslSettings.LoadedSkinDB
	TArray<struct FStringAssetReference>               TestSkinClasses;                                          // 0x0248(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bSupportedSkin : 1;                                       // 0x0258(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData09[0x50];                                      // 0x0259(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslSettings.MasteryDataTableSet
	float                                              InteractableDistanceToleranceOnDedicatedServer;           // 0x02B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InteractableDistance_ItemDefault;                         // 0x02B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InteractableSpeed_ItemDefault;                            // 0x02B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FInteractionCollisionData                   InteractionCollisionForFPS;                               // 0x02BC(0x0014) (CPF_Edit, CPF_Config)
	struct FInteractionCollisionData                   InteractionCollisionForTPS;                               // 0x02D0(0x0014) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData10[0x4];                                       // 0x02E4(0x0004) MISSED OFFSET
	class UClass*                                      TracerManagerClass;                                       // 0x02E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TimeBetweenTracers;                                       // 0x02F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableInitialItemDonator : 1;                            // 0x02F4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x02F5(0x0003) MISSED OFFSET
	float                                              InventoryMaxSpaceDefault;                                 // 0x02F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x02FC(0x0004) MISSED OFFSET
	class UTexture*                                    ErrorIconTexture;                                         // 0x0300(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    LoadingIconTexture;                                       // 0x0308(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UObject*>                             AssetsForPackageIntegrity;                                // 0x0310(0x0010) (CPF_ZeroConstructor)
	float                                              UICrosshairDistance;                                      // 0x0320(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              UICrosshairInterpSpeed;                                   // 0x0324(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              UICrosshairDisableDistance;                               // 0x0328(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BallisticDragScale;                                       // 0x032C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BallisticDropScale;                                       // 0x0330(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BallisticMOAScale;                                        // 0x0334(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RecoilControlScaleTotal;                                  // 0x0338(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RecoilControlScaleX;                                      // 0x033C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RecoilControlScaleY;                                      // 0x0340(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ConsoleRecoilAlpha;                                       // 0x0344(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RecoilAnimScale;                                          // 0x0348(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ForceTickPoseDistance_Weapon;                             // 0x034C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              GameTimeMultiplier;                                       // 0x0350(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      AimOffsetRayCast : 1;                                     // 0x0354(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	float                                              MeleeWeaponPitchMin;                                      // 0x0358(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MeleeWeaponPitchMax;                                      // 0x035C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      EnableThrowLagCompensation : 1;                           // 0x0360(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      FullRecoilRecovery : 1;                                   // 0x0361(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x2];                                       // 0x0362(0x0002) MISSED OFFSET
	struct FLevelLoadingBoostParameters                LevelLoadingBoostParameters;                              // 0x0364(0x0010) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	TArray<struct FString>                             ErangelIgnoreWeatherIds;                                  // 0x0378(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FNearClippingValue>                  NearClippingValues;                                       // 0x0388(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGame_FCustomizableCategoryData>  CustomizableCategoryData;                                 // 0x0398(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FCustomizableActionName>             CustomizableActionNames;                                  // 0x03A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGame_FCustomizableAxisName>      CustomizableAxisNames;                                    // 0x03B8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FCustomizableMouseSensitiveName>     CustomizableMouseSensitiveNames;                          // 0x03C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FNamedFovRecord>                     NamedFovList;                                             // 0x03D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FCustomizableGamePadSensitiveName>   CustomizableGamePadSensitiveNames;                        // 0x03E8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FSurportQualityLevel>                SupportedQualityLevels;                                   // 0x03F8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FScreenResolution>                   SupportedScreenResolutions;                               // 0x0408(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       MouseSensitivityCurve;                                    // 0x0418(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       GammaCurve;                                               // 0x0428(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       VibrationCurve;                                           // 0x0438(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       DBNOEffectFadeOutCurve;                                   // 0x0448(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       ReviveEffectCurve;                                        // 0x0458(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       PoisonGasWarningZoneAnimationCurve;                       // 0x0468(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       SpectateTargetViewRotationLerpSpeedCurve;                 // 0x0478(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       BluezoneInSoundAk;                                        // 0x0488(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       BluezoneOutSoundAk;                                       // 0x0498(0x0010) (CPF_Edit, CPF_Config)
	struct FAimAcceleration                            GamePadAimAcceleration;                                   // 0x04A8(0x0008) (CPF_Edit, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FColorBlindType>                     ColorBlindTypes;                                          // 0x04B0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FPresetColor>                        CrosshairColors;                                          // 0x04C0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FReticleColors>                      ReticleColors;                                            // 0x04D0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FKeyInputModeName>                   KeyInputModeNames;                                        // 0x04E0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FUiType>                             MiniMapTypeList;                                          // 0x04F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              MinimumScreenResolutionRatio;                             // 0x0500(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FScreenResolution                           MinimumScreenResolution;                                  // 0x0504(0x0008) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData16[0x4];                                       // 0x050C(0x0004) MISSED OFFSET
	TArray<struct FTeamColorAndIcon>                   OverrideMarkerColorAndIcons;                              // 0x0510(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FTeamColorAndIcon                           OverrideDefaultTeamMarkerColorAndIcons;                   // 0x0520(0x0040) (CPF_Edit, CPF_Config)
	float                                              PunchClientHitLeeway_Attacker;                            // 0x0560(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PunchClientHitLeeway_Victim;                              // 0x0564(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PunchClientHitLeeway_VictimInPlace;                       // 0x0568(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MeleeClientHitLeeway_Attacker;                            // 0x056C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MeleeClientHitLeeway_AttackerInPlace;                     // 0x0570(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MeleeClientHitLeeway_Victim;                              // 0x0574(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MeleeClientHitLeeway_VictimInPlace;                       // 0x0578(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ClientSideHitLeeway;                                      // 0x057C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ClientSideHitLeewayZ;                                     // 0x0580(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ClientSideHitLeewayInPlace;                               // 0x0584(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LogClientSideHitLeeway;                                   // 0x0588(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LogClientSideHitLeewayZ;                                  // 0x058C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ClientSideOriginDistanceLeeway;                           // 0x0590(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ClientSideOriginDistanceLeewayInPlace;                    // 0x0594(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TravelDistanceLeeway;                                     // 0x0598(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AllowedHitLag;                                            // 0x059C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LogMinHitLag;                                             // 0x05A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              HackDetectionSpeed;                                       // 0x05A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              HackDetectionSpeed_Crouch;                                // 0x05A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              HackDetectionSpeed_Prone;                                 // 0x05AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InvalidRevivingMaxTime;                                   // 0x05B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x05B4(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<ECheatType>, unsigned char>       CheatLogMaxCounts;                                        // 0x05B8(0x0050) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData18[0x10];                                      // 0x0608(0x0010) MISSED OFFSET
	TArray<struct FOverrideScalability>                OverrideScalabilities;                                    // 0x0618(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              FakeDoorBlockMaxY;                                        // 0x0628(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x062C(0x0004) MISSED OFFSET
	TArray<struct FReportCauseData>                    ReportCauses;                                             // 0x0630(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FSubjectToReport>                    SubjectToReport;                                          // 0x0640(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FReportDetailCauseTypeDescription>   ReportDetailCauseTypeDescriptions;                        // 0x0650(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              FreelookRecoveryInterpSpeed;                              // 0x0660(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x4];                                       // 0x0664(0x0004) MISSED OFFSET
	TMap<struct FName, float>                          GamepadSensitiveMultiplier;                               // 0x0668(0x0050) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              GamePadInnerDeadZone;                                     // 0x06B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              GamePadOutDeadZoneAcceleration;                           // 0x06BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              GamePadOutMaxAxisValue;                                   // 0x06C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              GamePadAccelerationStandardFps;                           // 0x06C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FTslGamepadKeyPreset>                GamepadKeyPresets;                                        // 0x06C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData21[0x50];                                      // 0x06D8(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslSettings.GamepadKeyPresetMaps
	TArray<struct FTslGamepadActionKeyData>            GamePadPresetA_ActionKeys;                                // 0x0728(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGamepadAxisKeyData>              GamePadPresetA_AxisKeys;                                  // 0x0738(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGamepadActionKeyData>            GamePadPresetB_ActionKeys;                                // 0x0748(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGamepadAxisKeyData>              GamePadPresetB_AxisKeys;                                  // 0x0758(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGamepadActionKeyData>            GamePadPresetC_ActionKeys;                                // 0x0768(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslGamepadAxisKeyData>              GamePadPresetC_AxisKeys;                                  // 0x0778(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              AimAssistDecisionRadius;                                  // 0x0788(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bApplyInputValue : 1;                                     // 0x078C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIgnorePadSensitive : 1;                                  // 0x078D(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData22[0x2];                                       // 0x078E(0x0002) MISSED OFFSET
	float                                              InsensitiveZone;                                          // 0x0790(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData23[0x4];                                       // 0x0794(0x0004) MISSED OFFSET
	TArray<struct FAimAssistData>                      AimCameraAssists;                                         // 0x0798(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FAimAssistData>                      ADSCameraAssists;                                         // 0x07A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FAimAssistData>                      Scope2XCameraAssists;                                     // 0x07B8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FAimAssistData>                      Scope4XCameraAssists;                                     // 0x07C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FAimAssistData>                      Scope8XCameraAssists;                                     // 0x07D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FAimAssistData>                      Scope15XCameraAssists;                                    // 0x07E8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       SoundPauseAllAk;                                          // 0x07F8(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       SoundResumeAllAk;                                         // 0x0808(0x0010) (CPF_Edit, CPF_Config)
	TArray<struct FSavedObPosMapConfig>                SavedObPosMapConfigs;                                     // 0x0818(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData24[0x4];                                       // 0x0828(0x0004) MISSED OFFSET
	unsigned char                                      bVoiceChatEnabled : 1;                                    // 0x082C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData25[0x3];                                       // 0x082D(0x0003) MISSED OFFSET
	struct FStringAssetReference                       DialogUMGWidgetClassStringAssetReference;                 // 0x0830(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       LoadingScreenUMGWidgetClassStringAssetReference;          // 0x0840(0x0010) (CPF_Edit, CPF_Config)
	struct FStringAssetReference                       GamepadDebugHudStringAsssetReference;                     // 0x0850(0x0010) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData26[0x50];                                      // 0x0860(0x0050) MISSED OFFSET
	class UCurveFloat*                                 LoadedMouseSensitivityCurve;                              // 0x08B0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCurveFloat*                                 LoadedGammaCurve;                                         // 0x08B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCurveFloat*                                 LoadedVibrationCurve;                                     // 0x08C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCurveFloat*                                 LoadedDBNOEffectFadeOutCurve;                             // 0x08C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCurveFloat*                                 LoadedReviveEffectCurve;                                  // 0x08D0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCurveFloat*                                 LoadedPoisonGasWarningZoneAnimationCurve;                 // 0x08D8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCurveFloat*                                 LoadedSpectateTargetViewRotationLerpSpeedCurve;           // 0x08E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAkAudioEvent*                               LoadedBluezoneInSoundAk;                                  // 0x08E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAkAudioEvent*                               LoadedBluezoneOutSoundAk;                                 // 0x08F0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTextureRenderTarget2D*                      CharacterStudioRenderTarget;                              // 0x08F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UDataTable*                                  LoadedWeaponSkinDB;                                       // 0x0900(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UDataTable*                                  LoadedParachuteSkinDB;                                    // 0x0908(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAkAudioEvent*                               LoadedSoundPauseAllAk;                                    // 0x0910(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAkAudioEvent*                               LoadedSoundResumeAllAk;                                   // 0x0918(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData27[0x50];                                      // 0x0920(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslSettings.LoadedMasteryDB
	unsigned char                                      UnknownData28[0x50];                                      // 0x0970(0x0050) MISSED OFFSET
	TArray<struct FAnimatableCustomizableObjectData>   AnimatableCustomizableDatas;                              // 0x09C0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TMap<struct FName, float>                          NotifyDistanceLimitMap;                                   // 0x09D0(0x0050) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Graphic;                                // 0x0A20(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Sound;                                  // 0x0A30(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Control;                                // 0x0A40(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Gameplay;                               // 0x0A50(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FGamepadReportStepperDesc>           GamepadReportList_Main;                                   // 0x0A60(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bTestShowAllOption : 1;                                   // 0x0A70(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData29[0x7];                                       // 0x0A71(0x0007) MISSED OFFSET
	TArray<struct FName>                               TslFontStyles;                                            // 0x0A78(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FLinearColor>                        TeamColors;                                               // 0x0A88(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FLinearColor                                SoloColor;                                                // 0x0A98(0x0010) (CPF_Edit, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FTeamColorAndName>                   TwoTeamGameTeamColors;                                    // 0x0AA8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTslKeyIconData>                     KeyIconDataArray;                                         // 0x0AB8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FTextureAndRatio>                    ModifierKeyIconDataArray;                                 // 0x0AC8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData30[0x8];                                       // 0x0AD8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslSettings");
		return ptr;
	}


	void SetCharacterStudioRenderTarget(class UTextureRenderTarget2D* rt);
	bool IsXenuineRunning();
	bool IsVoiceChatEnabled();
	bool IsUsingGappLobby();
	bool IsForKoreanRating();
	bool IsForKakaoTest();
	bool IsForKakao();
	bool IsForChineseLicensing();
	bool IsEACRunning();
	bool IsBERunning();
	class UTslSettings* GetTslSettings();
	float GetRepDistanceModifier();
	float GetNotifyMaxDistanceByName(const struct FName& InName);
	struct FString GetGappLobbyUrl();
	class UTextureRenderTarget2D* GetCharacterStudioRenderTarget();
};


// Class TslGame.TslAdaptiveCrosshairWidget
// 0x0448 (0x0800 - 0x03B8)
class UTslAdaptiveCrosshairWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAdaptiveCrosshairWidget.WeaponClass
	unsigned char                                      bIsShowWidget : 1;                                        // 0x03B9(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03BA(0x0006) MISSED OFFSET
	struct FColorBlindColorSet                         ColorBlindColors;                                         // 0x03C0(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      AdaptiveCrosshair_Binder;                                 // 0x03D0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CanvasBase_Binder;                                        // 0x03F8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterCenter_Binder;                                      // 0x0420(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterCrosshair_Binder;                                   // 0x0448(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterD_Binder;                                           // 0x0470(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CenterDOT_Binder;                                         // 0x0498(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterL_Binder;                                           // 0x04C0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterR_Binder;                                           // 0x04E8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterU_Binder;                                           // 0x0510(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_C_Binder;                                          // 0x0538(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_C_Gradient_Binder;                                 // 0x0560(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_L_Binder;                                          // 0x0588(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_R_Binder;                                          // 0x05B0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_D_Binder;                                           // 0x05D8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_D_Arrow_Binder;                                     // 0x0600(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_L_Binder;                                           // 0x0628(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_L_Arrow_Binder;                                     // 0x0650(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_R_Binder;                                           // 0x0678(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_R_Arrow_Binder;                                     // 0x06A0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_U_Binder;                                           // 0x06C8(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_U_Arrow_Binder;                                     // 0x06F0(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_D_Binder;                                         // 0x0718(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_L_Binder;                                         // 0x0740(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_R_Binder;                                         // 0x0768(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_U_Binder;                                         // 0x0790(0x0028) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HoldAngledAnim_TurnToRight_Binder;                        // 0x07B8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HoldAngledAnim_BackFromRight_Binder;                      // 0x07D8(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bSaveCenterCrosshairVisibility : 1;                       // 0x07F8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bSaveAdaptiveCrosshairVisibility : 1;                     // 0x07F9(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bSaveHoldAngled : 1;                                      // 0x07FA(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAdaptiveCrosshairWidget");
		return ptr;
	}


	void SetShowCrosshairWidget(bool bShow);
	void SetCenterCrosshairVisibility(bool bVisible);
	void SetCenterCrosshairHoldAngled(bool bHoldAngled);
	void SetCenterCrosshairDeviation(float InDeviation);
	void SetCenterCrosshairClass(bool bHasWeapon);
	void SetAdaptiveCrosshairVisibility(bool bVisible);
	void SetAdaptiveCrosshairPosition(const struct FVector2D& ScreenPosition, float Distance);
	void HandleGameUserSettingApplied();
	void DecideAdaptiveCrosshairColor();
};


// Class TslGame.TslCharacter
// 0x1720 (0x1F80 - 0x0860)
class ATslCharacter : public AMutableCharacter
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0860(0x0014) MISSED OFFSET
	float                                              DecreaseGroggyHealthPerSecond;                            // 0x0874(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0878(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReloadPadInput;                                         // 0x0888(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      bBlockReloadPad : 1;                                      // 0x0898(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPeekLeftToggled : 1;                                     // 0x0899(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPeekRightToggled : 1;                                    // 0x089A(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xD];                                       // 0x089B(0x000D) MISSED OFFSET
	float                                              BleedOutRateSec;                                          // 0x08A8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BleedOutDamage;                                           // 0x08AC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerState>              CurrentAttackerPlayerState;                               // 0x08B0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerState>              LastAttackedPlayerState;                                  // 0x08B8(0x0008) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerController>         CachedSpectatorPlayerController;                          // 0x08C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x08C8(0x0008) MISSED OFFSET
	class USpringArmComponent*                         FirstPersonSpringArm;                                     // 0x08D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslCameraComponent*                         FirstPersonCamera;                                        // 0x08D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USpringArmComponent*                         FirstPersonSpringArmInVehicle;                            // 0x08E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslCameraComponent*                         FirstPersonCameraInVehicle;                               // 0x08E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USpringArmComponent*                         ThirdPersonSpringArmInVehicle;                            // 0x08F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslCameraComponent*                         ThirdPersonCameraInVehicle;                               // 0x08F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslCharacterSpringArmComponent*             ThirdPersonSpringArm;                                     // 0x0900(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCameraComponent*                            ThirdPersonCamera;                                        // 0x0908(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USpringArmComponent*                         ScopingSpringArm;                                         // 0x0910(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslCameraComponent*                         ScopingCamera;                                            // 0x0918(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x40];                                      // 0x0920(0x0040) MISSED OFFSET
	float                                              HoldBreathStopInterpSpeed;                                // 0x0960(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HoldBreathSwayScalar;                                     // 0x0964(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HoldBreathSwayReturnMod;                                  // 0x0968(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3C];                                      // 0x096C(0x003C) MISSED OFFSET
	float                                              FOV_OnScopingEaseExp;                                     // 0x09A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x74];                                      // 0x09AC(0x0074) MISSED OFFSET
	struct FScriptMulticastDelegate                    NoBagSpaceDelgate;                                        // 0x0A20(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      bIsDying : 1;                                             // 0x0A30(0x0001) (CPF_Net)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0A31(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData08[0x50];                                      // 0x0A31(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.TslCharacter.ItemOffsetConfig
	unsigned char                                      UnknownData09[0xC];                                       // 0x0A88(0x000C) MISSED OFFSET
	float                                              PunchHeavy_Distance;                                      // 0x0A94(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Punch_Distance;                                           // 0x0A98(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x14];                                      // 0x0A9C(0x0014) MISSED OFFSET
	class ATslVaultingHelper*                          VaultingHelperRef;                                        // 0x0AB0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_IsPlainOldData)
	class UClass*                                      PunchImpactEffect;                                        // 0x0AB8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      FootStepEffectClassInWater;                               // 0x0AC0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0AC8(0x0008) MISSED OFFSET
	class UClass*                                      ParachuteType;                                            // 0x0AD0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x18];                                      // 0x0AD8(0x0018) MISSED OFFSET
	struct FName                                       ParachuteAttachPoint;                                     // 0x0AF0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x18];                                      // 0x0AF8(0x0018) MISSED OFFSET
	float                                              JumpLastTimer;                                            // 0x0B10(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x0B14(0x0004) MISSED OFFSET
	ENCRYPTED class UCameraComponent*                  SavedCamera;                                              // 0x0B18(0x0008) (CPF_ExportObject, CPF_InstancedReference)
	double                                             LastLaunchTime;                                           // 0x0B20(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CancelADSVerticalSpeedThreshold;                          // 0x0B28(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0B2C(0x0004) MISSED OFFSET
	class UClass*                                      FootStepEffectClassInMud;                                 // 0x0B30(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UStanceComponent*                            StanceComponent;                                          // 0x0B38(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              MinimumBreathToHold;                                      // 0x0B40(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x3C];                                      // 0x0B44(0x003C) MISSED OFFSET
	class UAkAudioEvent*                               HelmetDisappear;                                          // 0x0B80(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               HelmetHit;                                                // 0x0B88(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FString                                     CameraAboveWaterEventName;                                // 0x0B90(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FString                                     CameraBelowWaterEventName;                                // 0x0BA0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData17[0x1];                                       // 0x0BB0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslCharacter.Remote_CastAnim
	unsigned char                                      UnknownData18[0x7];                                       // 0x0BB1(0x0007) MISSED OFFSET
	struct FStringClassReference                       GrenadeClass;                                             // 0x0BB8(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData19[0x4];                                       // 0x0BC8(0x0004) MISSED OFFSET
	float                                              LeanOffset_Prone;                                         // 0x0BCC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bParachuteLandingAssist : 1;                              // 0x0BD0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x0BD1(0x0003) MISSED OFFSET
	float                                              BoostGauge;                                               // 0x0BD4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData21[0xC];                                       // 0x0BD8(0x000C) MISSED OFFSET
	unsigned char                                      bIsHoldingBreath : 1;                                     // 0x0BE4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0BE5(0x0003) MISSED OFFSET
	int                                                SpectatedCount;                                           // 0x0BE8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DecreaseBoostGaugeByTime;                                 // 0x0BEC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AController*                                 LastPossessedController;                                  // 0x0BF0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData23[0x8];                                       // 0x0BF8(0x0008) MISSED OFFSET
	float                                              VaultProbeLoopTime;                                       // 0x0C00(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData24[0x4];                                       // 0x0C04(0x0004) MISSED OFFSET
	struct FVector                                     VaultEndVelocity_CP;                                      // 0x0C08(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SimulatedHit_ImpulsePower;                                // 0x0C14(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      CharacterState;                                           // 0x0C18(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData25[0x17];                                      // 0x0C19(0x0017) MISSED OFFSET
	ENCRYPTED class ATeam*                             Team;                                                     // 0x0C30(0x0008) (CPF_Net, CPF_Transient)
	int                                                LastTeamNum;                                              // 0x0C38(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                LastSquadIndex;                                           // 0x0C3C(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTslViewTargetTempComponent*                 ViewTargetTempComponent;                                  // 0x0C40(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UClass*                                      FootStepEffectClassInIce;                                 // 0x0C48(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData26[0x4];                                       // 0x0C50(0x0004) MISSED OFFSET
	float                                              FootSoundObstructionCheckMaxDistance;                     // 0x0C54(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData27[0x8];                                       // 0x0C58(0x0008) MISSED OFFSET
	float                                              BuffFinalSpreadFactor;                                    // 0x0C60(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              VaultingDirection_CP;                                     // 0x0C64(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData28[0x8];                                       // 0x0C68(0x0008) MISSED OFFSET
	class UClass*                                      LaunchDamageTypeClass;                                    // 0x0C70(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UWeaponProcessorComponent*                   WeaponProcessor;                                          // 0x0C78(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UClass*                                      FootStepEffectClassInRock;                                // 0x0C80(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBuffComponet*                               BuffComponent;                                            // 0x0C88(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FStringClassReference                       BandageClass;                                             // 0x0C90(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData29[0x8];                                       // 0x0CA0(0x0008) MISSED OFFSET
	struct FName                                       SwimPoint;                                                // 0x0CA8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SwimableWaterDepth;                                       // 0x0CB0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CrouchWaterDepth;                                         // 0x0CB4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ProneWaterDepth;                                          // 0x0CB8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WaterFloorDetectionLength;                                // 0x0CBC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SwimMaxControllerPitch;                                   // 0x0CC0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              UnderwaterSwimGapFromSurface;                             // 0x0CC4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SwimableCharacterLengthOnSurface;                         // 0x0CC8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SwimableCharacterLengthOnSurfaceWhenSwimming;             // 0x0CCC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SwimTrailEffectClass;                                     // 0x0CD0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class ATslParticle*                                SwimTrailEffect;                                          // 0x0CD8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       ParticleSocket_SwimIdleRipple;                            // 0x0CE0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SwimIdleRippleEffectClass;                                // 0x0CE8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                maxNumSwimIdleRippleEffect;                               // 0x0CF0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SwimIdleRippleOffsetFromSurface;                          // 0x0CF4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData30[0x18];                                      // 0x0CF8(0x0018) MISSED OFFSET
	float                                              HealthByRevive;                                           // 0x0D10(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BoostGaugeMax;                                            // 0x0D14(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinimumParachuteAltitude;                                 // 0x0D18(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GroggyEnabledAltitudeInCentiMeter;                        // 0x0D1C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslCharacterValidateLocationComponent*      ValidateLocationComponent;                                // 0x0D20(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UClass*                                      FootStepEffectClassInDirt;                                // 0x0D28(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     JumpStartLocation_CP;                                     // 0x0D30(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              IndoorCheckHalfConeAngle;                                 // 0x0D3C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTslKillCauserData                          GroggyCauserData;                                         // 0x0D40(0x0030)
	struct FVector                                     VaultLastLocation_CP;                                     // 0x0D70(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData31[0x4];                                       // 0x0D7C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               GroggyToDieAkEvent;                                       // 0x0D80(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData32[0x8];                                       // 0x0D88(0x0008) MISSED OFFSET
	float                                              SimlatedHit_PunchLightPower;                              // 0x0D90(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData33[0x4];                                       // 0x0D94(0x0004) MISSED OFFSET
	unsigned char                                      bIsVaulting_CP : 1;                                       // 0x0D98(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData34[0x3];                                       // 0x0D99(0x0003) MISSED OFFSET
	float                                              HealthMax;                                                // 0x0D9C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	ENCRYPTED class APlayerState*                      AuthorizedPlayerState;                                    // 0x0DA0(0x0008) (CPF_Transient)
	ENCRYPTED class APlayerState*                      CachedNonNullPlayerState;                                 // 0x0DA8(0x0008) (CPF_Transient)
	unsigned char                                      UnknownData35[0x4];                                       // 0x0DB0(0x0004) MISSED OFFSET
	struct FVector                                     VaultEndVelocityVectorMutliplier;                         // 0x0DB4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SimulatedHit_Value;                                       // 0x0DC0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsVaultingSystemEnabled : 1;                             // 0x0DC4(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData36[0x3];                                       // 0x0DC5(0x0003) MISSED OFFSET
	struct FStringClassReference                       PainKillerClass;                                          // 0x0DC8(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData37[0x10];                                      // 0x0DD8(0x0010) MISSED OFFSET
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x0DE8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bInvertTargeting : 1;                                     // 0x0DF0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData38[0x3];                                       // 0x0DF1(0x0003) MISSED OFFSET
	float                                              LeanOffset_Stand;                                         // 0x0DF4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExtremeFallMovementStopTime;                              // 0x0DF8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData39[0x14];                                      // 0x0DFC(0x0014) MISSED OFFSET
	float                                              HeavyFallMovementStopTime;                                // 0x0E10(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Punch_Radius;                                             // 0x0E14(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData40[0xC];                                       // 0x0E18(0x000C) MISSED OFFSET
	float                                              DecreaseTimerSecond;                                      // 0x0E24(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 CameraFovRatioCurve;                                      // 0x0E28(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData41[0x8];                                       // 0x0E30(0x0008) MISSED OFFSET
	class UTslPawnInputBindingComponent*               TslPawnInputBindingComponent;                             // 0x0E38(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FName                                       ParticleSocketFootRight;                                  // 0x0E40(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FStringClassReference                       AdrenalineClass;                                          // 0x0E48(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	float                                              SimulatedHit_Initial;                                     // 0x0E58(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData42[0x1C];                                      // 0x0E5C(0x001C) MISSED OFFSET
	unsigned char                                      bServerFinishedVault : 1;                                 // 0x0E78(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData43[0x7];                                       // 0x0E79(0x0007) MISSED OFFSET
	struct FString                                     CharacterName;                                            // 0x0E80(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FBuffWithBoostGauge>                 BuffWithBoostGauge;                                       // 0x0E90(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TMap<class UCameraComponent*, float>               SavedCameraFOV;                                           // 0x0EA0(0x0050) (CPF_ZeroConstructor)
	class UCastComponent*                              CastComponent;                                            // 0x0EF0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData44[0x8];                                       // 0x0EF8(0x0008) MISSED OFFSET
	struct FString                                     CharacterNetId;                                           // 0x0F00(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData45[0x8];                                       // 0x0F10(0x0008) MISSED OFFSET
	class UHackReporterComponent*                      HackReporterComponent;                                    // 0x0F18(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData46[0x8];                                       // 0x0F20(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData47[0x1];                                       // 0x0F20(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslCharacter.ShoesSoundType
	unsigned char                                      UnknownData48[0x7];                                       // 0x0F29(0x0007) MISSED OFFSET
	TArray<class UClass*>                              ComponentsToDestroyOnDedicatedServer;                     // 0x0F30(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UAkAudioEvent*                               RemoteVolumeControlOn;                                    // 0x0F40(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      GroggyDamageType;                                         // 0x0F48(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultTimer_CP;                                            // 0x0F50(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData49[0x4];                                       // 0x0F54(0x0004) MISSED OFFSET
	class UClass*                                      FootStepEffectClassInSand;                                // 0x0F58(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData50[0x8];                                       // 0x0F60(0x0008) MISSED OFFSET
	float                                              PunchHeavy_Damage;                                        // 0x0F68(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FootSoundObstructionCheckInterval;                        // 0x0F6C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bEndVaultToFall_CP : 1;                                   // 0x0F70(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData51[0x3];                                       // 0x0F71(0x0003) MISSED OFFSET
	float                                              FallHeight_CP;                                            // 0x0F74(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FStringClassReference                       SmokeBombClass;                                           // 0x0F78(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	float                                              SimlatedHit_PunchHeavyPower;                              // 0x0F88(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HeavyFallVerticalVelocityThreshold;                       // 0x0F8C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerState>              LaunchInstigator;                                         // 0x0F90(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UVaultingData*                               CurrentVaultData_CP;                                      // 0x0F98(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       EnergyDrinkClass;                                         // 0x0FA0(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData52[0x10];                                      // 0x0FB0(0x0010) MISSED OFFSET
	struct FName                                       HeadAttachPoint;                                          // 0x0FC0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CameraHeadHideDistance;                                   // 0x0FC8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData53[0x24];                                      // 0x0FCC(0x0024) MISSED OFFSET
	struct FTakeHitInfo                                LastTakeHitInfo;                                          // 0x0FF0(0x0058) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData54[0x4];                                       // 0x1048(0x0004) MISSED OFFSET
	float                                              TargetingSpeedModifier;                                   // 0x104C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTakeHitInfo                                LastDamageIndicatorInfo;                                  // 0x1050(0x0058) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData55[0x8];                                       // 0x10A8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnChangeTargetingType;                                    // 0x10B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	float                                              Stand_RunningSpeedModifier;                               // 0x10C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Stand_SprintingSpeedModifier;                             // 0x10C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Stand_SprintingBigGunModifier;                            // 0x10C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Stand_SprintingRifleModifier;                             // 0x10CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Stand_SprintingSmallGunMOdifier;                          // 0x10D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Crouch_RunningSpeedModifier;                              // 0x10D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Crouch_SprintingSpeedModifier;                            // 0x10D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Prone_RunningSpeedModifier;                               // 0x10DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Prone_SprintingSpeedModifier;                             // 0x10E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ReviveCastingTime;                                        // 0x10E4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	uint32_t                                           BitContainerSkipOwnerValue;                               // 0x10E8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData56[0x24];                                      // 0x10EC(0x0024) MISSED OFFSET
	uint32_t                                           BitContainerNormalValue;                                  // 0x1110(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData57[0x28];                                      // 0x1114(0x0028) MISSED OFFSET
	unsigned char                                      UnknownData58[0x1];                                       // 0x1114(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslCharacter.ZombieModePlayerState
	unsigned char                                      UnknownData59[0x33];                                      // 0x113D(0x0033) MISSED OFFSET
	unsigned char                                      bUseRightShoulderAiming : 1;                              // 0x1170(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData60[0x3];                                       // 0x1171(0x0003) MISSED OFFSET
	struct FRotator                                    GunDirectionSway;                                         // 0x1174(0x000C) (CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	struct FRotator                                    AimOffsets;                                               // 0x1180(0x000C) (CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	struct FRotator                                    LastAimOffsets;                                           // 0x118C(0x000C) (CPF_IsPlainOldData)
	unsigned char                                      UnknownData61[0xC];                                       // 0x1198(0x000C) MISSED OFFSET
	float                                              AimoffsetsLastRepTime;                                    // 0x11A4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData62[0x38];                                      // 0x11A8(0x0038) MISSED OFFSET
	struct FRotator                                    CurrentAutoRotator;                                       // 0x11E0(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AutoPitchValueMax;                                        // 0x11EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AutoPitchBlendSpeed;                                      // 0x11F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData63[0xC];                                       // 0x11F4(0x000C) MISSED OFFSET
	class UCurveFloat*                                 Curve_JumpCamera;                                         // 0x1200(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveVector*                                Curve_FPPCameraOffsetByFOV;                               // 0x1208(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_StandWalk;                                          // 0x1210(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_StandRun;                                           // 0x1218(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_StandSprint;                                        // 0x1220(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchWalk;                                         // 0x1228(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchRun;                                          // 0x1230(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchSprint;                                       // 0x1238(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneWalk;                                          // 0x1240(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneRun;                                           // 0x1248(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneSprint;                                        // 0x1250(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_Swim;                                               // 0x1258(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_UnderwaterSwim;                                     // 0x1260(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_StandScope;                                         // 0x1268(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchScope;                                        // 0x1270(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneScope;                                         // 0x1278(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_StandAim;                                           // 0x1280(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchAim;                                          // 0x1288(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneAim;                                           // 0x1290(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_DBNO;                                               // 0x1298(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_GroundAngle;                                        // 0x12A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveVector*                                Curve_WeaponSway;                                         // 0x12A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveVector*                                Curve_WeaponSway_HoldBreath;                              // 0x12B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_WeaponSwayFOVModifier;                              // 0x12B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_TurningLerp;                                        // 0x12C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_TurningLerpLocomotion;                              // 0x12C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData64[0x4];                                       // 0x12D0(0x0004) MISSED OFFSET
	float                                              DirectionalSpeedModifier;                                 // 0x12D4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PointDamageForceMultiplier;                               // 0x12D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PointDamageForce_MapMin;                                  // 0x12DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PointDamageForce_MapMax;                                  // 0x12E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RadialDamageForceMultiplier;                              // 0x12E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TEnumAsByte<ERadialImpulseFalloff>                 RadialDamageFalloffType;                                  // 0x12E8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData65[0x7];                                       // 0x12E9(0x0007) MISSED OFFSET
	struct FStringClassReference                       CharacterAnimBPClass;                                     // 0x12F0(0x0010) (CPF_Edit)
	class UAnimMontage*                                RollLeftAnim;                                             // 0x1300(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimMontage*                                RollRightAnim;                                            // 0x1308(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FCharacterAnim                              CharacterAnim;                                            // 0x1310(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	ENCRYPTED class AController*                       NetOwnerController;                                       // 0x1320(0x0008) (CPF_Net, CPF_Transient)
	float                                              LeanAlphaSpeed;                                           // 0x1328(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TurnSpeedHip;                                             // 0x132C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TurnSpeedAimed;                                           // 0x1330(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TurnSpeedOverLimit;                                       // 0x1334(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinTurnAngleHip;                                          // 0x1338(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinTurnAngleAim;                                          // 0x133C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TurnLinearEndThreshold;                                   // 0x1340(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bNonLinearTurn : 1;                                       // 0x1344(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData66[0x3];                                       // 0x1345(0x0003) MISSED OFFSET
	float                                              TurnNonLinearEndThreshold;                                // 0x1348(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TurnNonLinearInterpSpeed;                                 // 0x134C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotion;                         // 0x1350(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotionSprint;                   // 0x1354(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotionProne;                    // 0x1358(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedStationary;                         // 0x135C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData67[0x18];                                      // 0x1360(0x0018) MISSED OFFSET
	struct FName                                       FPPCameraBoneName;                                        // 0x1378(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       TPPCameraBoneName;                                        // 0x1380(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData68[0x10];                                      // 0x1388(0x0010) MISSED OFFSET
	float                                              AimStateDefaultTime;                                      // 0x1398(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AimStateReturnTime;                                       // 0x139C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AimStateDrawTime;                                         // 0x13A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData69[0x8];                                       // 0x13A4(0x0008) MISSED OFFSET
	unsigned char                                      bFreeMode : 1;                                            // 0x13AC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData70[0x3];                                       // 0x13AD(0x0003) MISSED OFFSET
	float                                              CanGroggyDamageTime;                                      // 0x13B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData71[0x4];                                       // 0x13B4(0x0004) MISSED OFFSET
	struct FText                                       GroggyStartText;                                          // 0x13B8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FText                                       GroggyCancelText;                                         // 0x13D0(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FText                                       GroggyFinishText;                                         // 0x13E8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	struct FRotator                                    BlendTargetViewRotation;                                  // 0x1400(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeapInspectionFireDelay;                                  // 0x140C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   DesiredInput;                                             // 0x1410(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	class UClass*                                      InvulnerablilityBuff;                                     // 0x1418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bInvulnerablilityEffectVisible : 1;                       // 0x1420(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData72[0x3];                                       // 0x1421(0x0003) MISSED OFFSET
	struct FVector                                     LandPredictedLocation_CP;                                 // 0x1424(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      FootStepEffectClassInGrass;                               // 0x1430(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              JumpDelay;                                                // 0x1438(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData73[0x4];                                       // 0x143C(0x0004) MISSED OFFSET
	ENCRYPTED class AInventoryFacade*                  InventoryFacade;                                          // 0x1440(0x0008) (CPF_Net, CPF_Transient)
	struct FStringClassReference                       FlashBangClass;                                           // 0x1448(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData74[0x4];                                       // 0x1458(0x0004) MISSED OFFSET
	float                                              ForceReleasingParachuteAltitude;                          // 0x145C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DropPackageType;                                          // 0x1460(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslThrowableTrajectoryViewComponent*        ThrowableTrajectoryViewComponent;                         // 0x1468(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              SprintingFOV;                                             // 0x1470(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      CurrentWeaponZoomLevel;                                   // 0x1474(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData75[0x3];                                       // 0x1475(0x0003) MISSED OFFSET
	TArray<class UClass*>                              BoostItemClasses;                                         // 0x1478(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	class UClass*                                      BleedOutDamageType;                                       // 0x1488(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              IndoorCheckSuccessRate;                                   // 0x1490(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData76[0x4];                                       // 0x1494(0x0004) MISSED OFFSET
	class UTslGamepadDebugHud*                         GamepadDebugHud;                                          // 0x1498(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData77[0x4];                                       // 0x14A0(0x0004) MISSED OFFSET
	float                                              FallingBufferMultiplier;                                  // 0x14A4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData78[0x10];                                      // 0x14A8(0x0010) MISSED OFFSET
	class UCharacterBreathComponent*                   BreathComponent;                                          // 0x14B8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCharacterBreathComponent*                   BreathComponentADS;                                       // 0x14C0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FName                                       BreathPoint;                                              // 0x14C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      UnderwaterChokeEffectClass;                               // 0x14D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class ATslParticle*                                UnderwaterChokeEffect;                                    // 0x14D8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      BreathEffectMovingClass;                                  // 0x14E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      BreathEffectStayingClass;                                 // 0x14E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpeedThreadholdForBreathingMoving;                        // 0x14F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DistanceThreadholdForBreathingStaying;                    // 0x14F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DistanceThreadholdForBreathingMoving;                     // 0x14F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData79[0x4];                                       // 0x14FC(0x0004) MISSED OFFSET
	class ATslParticle*                                BreathEffectMoving;                                       // 0x1500(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                BreathEffectStaying;                                      // 0x1508(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      FootStepEffectClassInSnow;                                // 0x1510(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      FootStepEffectClassInSnowRock;                            // 0x1518(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData80[0x10];                                      // 0x1520(0x0010) MISSED OFFSET
	class UCharacterWeaponAnimInfoComponent*           WeaponAnimInfoComponent;                                  // 0x1530(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	TWeakObjectPtr<class AActor>                       LaunchCauser;                                             // 0x1538(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Punch_Damage;                                             // 0x1540(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData81[0x4];                                       // 0x1544(0x0004) MISSED OFFSET
	TArray<class UClass*>                              HealItemClasses;                                          // 0x1548(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<class UAkAudioBank*>                        Banks;                                                    // 0x1558(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              ProneFallVerticalVelocityThreshold;                       // 0x1568(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAcceptHitsWhileNotAlive : 1;                             // 0x156C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData82[0x3];                                       // 0x156D(0x0003) MISSED OFFSET
	struct FName                                       ParticleSocketFootLeft;                                   // 0x1570(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslAdaptiveCrosshairWidget*                 AdaptiveCrosshairWidget;                                  // 0x1578(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData83[0xC];                                       // 0x1580(0x000C) MISSED OFFSET
	float                                              LastDistanceCache;                                        // 0x158C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsCrosshairObstructed : 1;                               // 0x1590(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData84[0x7];                                       // 0x1591(0x0007) MISSED OFFSET
	struct FStringClassReference                       AdaptiveCrosshairWidgetClass;                             // 0x1598(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	ENCRYPTED class ATslCharacter*                     RevivingCharacter;                                        // 0x15A8(0x0008)
	unsigned char                                      UnknownData85[0x8];                                       // 0x15B0(0x0008) MISSED OFFSET
	float                                              GroggyDamageWeight;                                       // 0x15B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData86[0xC];                                       // 0x15BC(0x000C) MISSED OFFSET
	struct FStringClassReference                       MolotovClass;                                             // 0x15C8(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	struct FStringClassReference                       MedKitClass;                                              // 0x15D8(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	float                                              SimulatedHit_RecoveryPerSecond;                           // 0x15E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData87[0x4];                                       // 0x15EC(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               RemoteVolumeControlOff;                                   // 0x15F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData88[0x8];                                       // 0x15F8(0x0008) MISSED OFFSET
	unsigned char                                      bWantsToVault : 1;                                        // 0x1600(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData89[0xF];                                       // 0x1601(0x000F) MISSED OFFSET
	float                                              GroggyHealth;                                             // 0x1610(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData90[0x4];                                       // 0x1614(0x0004) MISSED OFFSET
	class ATslParticle*                                FootStepEffect;                                           // 0x1618(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData91[0x18];                                      // 0x1620(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterWeaponRecoil;                                  // 0x1638(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	class UUpdateCameraComponent*                      UpdateCameraComponent;                                    // 0x1648(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UInteractorComponent*                        InteractorComponent;                                      // 0x1650(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCharacterInteractionComponent*              InteractionComponent;                                     // 0x1658(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData92[0x18];                                      // 0x1660(0x0018) MISSED OFFSET
	class UVehicleRiderComponent*                      VehicleRiderComponent;                                    // 0x1678(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Primary;                                     // 0x1680(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Primary;                             // 0x1688(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Secondary;                                   // 0x1690(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Secondary;                           // 0x1698(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Sidearm;                                     // 0x16A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Sidearm;                             // 0x16A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Melee;                                       // 0x16B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Melee;                               // 0x16B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Thrown;                                      // 0x16C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Thrown;                              // 0x16C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            BulletEffect_Sphere;                                      // 0x16D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UArrowComponent*                             WeaponCollisionArrow;                                     // 0x16D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UPhysicalAnimationComponent*                 PhysicalAnimation;                                        // 0x16E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UArrowComponent*                             AudioListener;                                            // 0x16E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAppearanceCustomizationBuilder*             AppearanceCustomizationBuilder;                           // 0x16F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData93[0xF0];                                      // 0x16F8(0x00F0) MISSED OFFSET
	class USkeletalMeshComponent*                      ShadowMesh;                                               // 0x17E8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslEquippedWeaponsProxy*                    WeaponsShadows;                                           // 0x17F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCharacterWeaponAnimInfoComponent*           ShadowWeaponAnimInfoComponent;                            // 0x17F8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              TargetingFOV;                                             // 0x1800(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AimingDelay;                                              // 0x1804(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData94[0x8];                                       // 0x1808(0x0008) MISSED OFFSET
	float                                              AttackStateOffDelayTime;                                  // 0x1810(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HitStateOffDelayTime;                                     // 0x1814(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HitMePlayerStateOffDelayTime;                             // 0x1818(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData95[0x34];                                      // 0x181C(0x0034) MISSED OFFSET
	class UTslPlayerDamageConfig*                      DamageConfig;                                             // 0x1850(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData96[0x4];                                       // 0x1858(0x0004) MISSED OFFSET
	float                                              FallDamageFactor;                                         // 0x185C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              FallDamageVelocityMin;                                    // 0x1860(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CorpseLifeSpan;                                           // 0x1864(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseRagdollPoseCaching : 1;                               // 0x1868(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData97[0x7];                                       // 0x1869(0x0007) MISSED OFFSET
	struct FName                                       RagdollPoseCacheName;                                     // 0x1870(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PoseCachingCorpseLifespan;                                // 0x1878(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RagdollCacheDelayTime;                                    // 0x187C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData98[0x88];                                      // 0x1880(0x0088) MISSED OFFSET
	class UMeshComponent*                              PreviousScopeMID;                                         // 0x1908(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FWeaponPPSettings                           PreviousScopePP;                                          // 0x1910(0x00A0)
	unsigned char                                      UnknownData99[0x50];                                      // 0x19B0(0x0050) MISSED OFFSET
	TEnumAsByte<EStanceMode>                           PreReplicatedStanceMode;                                  // 0x1A00(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData100[0x7];                                      // 0x1A01(0x0007) MISSED OFFSET
	TArray<struct FString>                             CurrentVisitingLocationNames;                             // 0x1A08(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              IndoorCheckDistance;                                      // 0x1A18(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                IndoorCheckSamplingQueueSize;                             // 0x1A1C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      UnarmedDamageType;                                        // 0x1A20(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FStringClassReference                       FirstAidClass;                                            // 0x1A28(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData101[0x4];                                      // 0x1A38(0x0004) MISSED OFFSET
	struct FVector                                     Punch_InitialLocation;                                    // 0x1A3C(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Sprint_MaxSpeed;                                          // 0x1A48(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                IndoorCheckAccuracyMultiplier;                            // 0x1A4C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ReleasingParachuteAltitude;                               // 0x1A50(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData102[0x4];                                      // 0x1A54(0x0004) MISSED OFFSET
	class UGamePadInputAixsComponent*                  GamePadInputAixsComponent;                                // 0x1A58(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              LeanOffset_Crouch;                                        // 0x1A60(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExtremeFallVerticalVelocityThreshold;                     // 0x1A64(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsClimbing_CP : 1;                                       // 0x1A68(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData103[0x17];                                     // 0x1A69(0x0017) MISSED OFFSET
	class UCurveFloat*                                 AngledCurve;                                              // 0x1A80(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAimPunchDataAsset*                          AimPunchHit;                                              // 0x1A88(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UAimPunchDataAsset*                          AimPunchExplosion;                                        // 0x1A90(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	float                                              CamShakeDamageThreshold;                                  // 0x1A98(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bProcessHitReaction : 1;                                  // 0x1A9C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData104[0x3];                                      // 0x1A9D(0x0003) MISSED OFFSET
	float                                              HitReaction_Time;                                         // 0x1AA0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasVest : 1;                                             // 0x1AA4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData105[0xF];                                      // 0x1AA5(0x000F) MISSED OFFSET
	float                                              GroggyHealthMax;                                          // 0x1AB4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               SoundClearAk;                                             // 0x1AB8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsColdWeather : 1;                                       // 0x1AC0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData106[0xF];                                      // 0x1AC1(0x000F) MISSED OFFSET
	float                                              PunchHeavy_Radius;                                        // 0x1AD0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              GamepadReloadHoldTime;                                    // 0x1AD4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FTimerHandle                                TimerHandle_GamepadReloadHold;                            // 0x1AD8(0x0008)
	struct FAnimUpdateRateSettings                     AnimationUpdateRateSettings;                              // 0x1AE0(0x0078) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	float                                              TO_CulledMovementTickrate;                                // 0x1B58(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TO_CulledActorTickInterval;                               // 0x1B5C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TO_MinimumDistance;                                       // 0x1B60(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bRunTickOptimization : 1;                                 // 0x1B64(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bRunTickOptimization_Anim : 1;                            // 0x1B65(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bRunTickOptimization_Movement : 1;                        // 0x1B66(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData107[0x1];                                      // 0x1B67(0x0001) MISSED OFFSET
	float                                              TO_RenderedTolerance;                                     // 0x1B68(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bTickOptimization_Move_Active : 1;                        // 0x1B6C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bTickOptimization_Anim_Active : 1;                        // 0x1B6D(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bTickOptimization_Actor_Active : 1;                       // 0x1B6E(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData108[0x11];                                     // 0x1B6F(0x0011) MISSED OFFSET
	float                                              GamepadUnarmHoldTime;                                     // 0x1B80(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData109[0x48];                                     // 0x1B84(0x0048) MISSED OFFSET
	float                                              Sprint_MinSpeed;                                          // 0x1BCC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Health;                                                   // 0x1BD0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultEndVelocityVectorClamp;                              // 0x1BD4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class USkinHelperComponent*                        SkinHelper;                                               // 0x1BD8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslEmoteComponent*                          EmoteComponent;                                           // 0x1BE0(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FName                                       EmoteSlots;                                               // 0x1BE8(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FName>                               ServerEmoteNameList;                                      // 0x1BF0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData110[0x10];                                     // 0x1C00(0x0010) MISSED OFFSET
	unsigned char                                      bIsCameraUnderWater : 1;                                  // 0x1C10(0x0001) (CPF_BlueprintVisible, CPF_Transient)
	unsigned char                                      UnknownData111[0x7];                                      // 0x1C11(0x0007) MISSED OFFSET
	class UGroggyDamageCalculator*                     GroggyDamageCalculator;                                   // 0x1C18(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      CachedBackpackClsss;                                      // 0x1C20(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData112[0x1];                                      // 0x1C28(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslCharacter.SavedArmedWeaponRTPCValue
	unsigned char                                      UnknownData113[0x1];                                      // 0x1C29(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslCharacter.SavedEquippedWeaponRTPCValue
	unsigned char                                      UnknownData114[0x6];                                      // 0x1C2A(0x0006) MISSED OFFSET
	TArray<int>                                        EquippedClothesArrayIndex;                                // 0x1C30(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<int>                                        EquippedBagArrayIndex;                                    // 0x1C40(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              LastWaterDepth;                                           // 0x1C50(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData115[0x4];                                      // 0x1C54(0x0004) MISSED OFFSET
	class AActor*                                      RiverActor;                                               // 0x1C58(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UPrimitiveComponent*                         RiverMeshComponent;                                       // 0x1C60(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bGlassBottleRTPCWeapon : 1;                               // 0x1C68(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEquippedClothes : 1;                                     // 0x1C69(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEquippedBag : 1;                                         // 0x1C6A(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bForceUpdateEquippedRTPCValue : 1;                        // 0x1C6B(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsInRiver : 1;                                           // 0x1C6C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData116[0x3];                                      // 0x1C6D(0x0003) MISSED OFFSET
	struct FStringClassReference                       SkydivingComponentClass;                                  // 0x1C70(0x0010) (CPF_Edit, CPF_DisableEditOnInstance)
	class UTslSkydiveComponent*                        SkydivingComponent;                                       // 0x1C80(0x0008) (CPF_ExportObject, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData117[0x2F8];                                    // 0x1C88(0x02F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCharacter");
		return ptr;
	}


	void UpdateWeaponAttachPoint();
	void UnBindCallbackToHUD(class ATslPlayerController* InController);
	void TryClearWeaponSkin(int SlotIndex);
	void TryClearEquipSkin();
	void TryCancelThrow();
	void TryApplyWeaponSkin(int SlotIndex);
	void TryApplyEquipSkin();
	void ToggleInvincibility();
	void ToggleGamepadDebugHud();
	void ToggleFreeMode();
	void ToggleAnimDynamics();
	void Timer_StartSkydivingTraining();
	void TickWeaponInertia(float DeltaSeconds);
	bool TickOptimization_ShouldRunMovementUpdate();
	bool TickOptimization_ShouldRunAnimUpdate();
	bool TickOptimization_IsOverMinimumDistance();
	void TickOptimization_Eval();
	void TickFallingAlpha(float DeltaSeconds);
	void TickCameraWaterCheck();
	void TestWeaponSkinApplyByItemReference(const struct FString& Reference);
	void TestSkinLoad();
	void TestSetupWeapon();
	void TestServerSetupWeapon();
	void TestServerInvulnerable();
	void TestServerFreeMoveMode();
	void TestInvulnerable();
	void TestFreeMoveMode();
	void TestClientAdjustFlySpeed(float MaxSpeed, float MaxAccel, float Deccel);
	void Test_StatTrakKillCount(int KillCount);
	void Test_SetupWeapon();
	void Test_InspectObject();
	void StopAllAnimMontages_Multicast();
	void StopAllAnimMontages();
	void STAT_TickEnd();
	void STAT_TickBegin();
	void StartSkydivingTraining(const struct FVector& TrainingLocation, const struct FRotator& StartRotator);
	void SpawnPunchImpact_Reliable(const struct FVector& InLocation, const struct FRotator& InRotation, class ACharacter* InCharacter);
	void SpawnPunchImpact(const struct FVector& InLocation, const struct FRotator& InRotation);
	void SpawnBulletPassByEffect(const struct FVector& Location, float BulletVelocity);
	void SimulatePhysicalHitRecovery();
	void SimulateHeadShot(const struct FTransform& SpawnTransform, const struct FTransform& ImpactTransform);
	void ShowDynamicCrosshair(bool bShow);
	void ShowCharacterInformation(bool bFullInfo, bool ShowMaterialInfo);
	void SetWorldTransformIdentity();
	void SetWeaponInertia(const struct FRotator& InInertia);
	void SetupWeaponBlueprint();
	void SetTPPSpringarmOffset(float VerticalOffset);
	void SetTickOptimization_Movement(bool bActivate);
	void SetTickOptimization_Anim(bool bActivate);
	void SetTickOptimization_Actor(bool bActivate);
	void SetSwayDebuffParameters(float SwaySpeed, float SwayVerticalMultiplier, float SwayHorizontalMultiplier);
	void SetServerVaultFinished(bool InFinished);
	void SetRegularCollision();
	void SetParachuteLandingAssist(bool bAssistActive);
	void SetMovementEnabled(bool IsEnabled);
	void SetLaunchEvent(const struct FAttackId& AttackId, class ATslPlayerState* InPlayerState, class AActor* Causer, class UClass* DamageTypeClass);
	void SetJumpStartLocationAndFallheight(const struct FVector& JumpStartLoc, float FallHeight);
	void SetIsReviving_Multicast(bool InbIsReviving);
	void SetIsOutsideBluezone(bool bOutsize);
	void SetIsOnFire(int IsActive);
	void SetIsFlashed(int IsActive);
	void SetInsideVehicleCollision();
	void SetDebugCameraLock(bool InLock);
	void SetCustomMovementOverride(unsigned char InCustomMovement);
	void SetCustomDepth(bool bOn);
	void SetCharacterVaultingData(float InVaultTimer, bool InIsVaulting, bool InIsClimbing, bool InEndVaultToFall, float InDirection);
	void SetCanGroggyDamage(bool bInCanGroggyDamage);
	void SetBulletSpawnOverride(bool InOverride);
	void SetBuffFinalSpreadFactor(float FinalSpreadFactor);
	void SetBoostGauge(float NewBoostGauge);
	void SetAnimationAkSwitch(const struct FString& SwitchGroup, const struct FString& SwitchState);
	void SetAnimationAkRTPC(const struct FString& RTPCName, float RTPCValue);
	void SetAimStateActive(bool IsActive);
	void SetADSSocketOffset(const struct FVector& NewOffset);
	void SetActiveRagdoll(bool bIsActive);
	void SetAchievementMetaData();
	void ServerTestSkinLoad();
	void ServerSetTargeting();
	void ServerSetSprintingAuto(bool bNewSprintingAuto);
	void ServerSetSprinting(bool bNewSprinting);
	void ServerSetRunning(bool bNewRunning);
	void ServerSetRolling(bool bNewRolling, bool bIsLeft);
	void ServerSetHoldingBreath(bool bNewHoldingBreath);
	void ServerSetHoldingAngled(bool bNewHoldingAngled);
	void ServerSetGunDirectionSway(const struct FRotator& InGunDirectionSway);
	void ServerSetCurrentWeaponZoomLevel(unsigned char ZoomLevel);
	void ServerSetBleedOut(bool bBleedOut);
	void ServerSetAimOffsets(const struct FRotator& NewAimOffsets);
	void ServerOnUnswim();
	void ServerOnSwim();
	void ServerBroadCastScopingRemote(bool InbIsScoping);
	void ServerBroadCastAimingRemote(bool InbIsAming);
	void Server_UnarmedHitNotify(int checksum_CD, const struct FHitResult& Hit, TEnumAsByte<EPunchDamageType> PunchDamageType, uint32_t IntValue1, const struct FVector& Location, TArray<int> Values, const struct FVector& Location2, bool BoolValue);
	void Server_SyncRotationStart(float InTarget);
	void Server_StopWeaponInspection_CP();
	void Server_StartWeaponInspection_CP();
	void Server_SpawnSkydiveComponent();
	void Server_SetWeaponObstruction(bool bNewObstruction);
	void Server_SetVaultCancel(bool InCancel);
	void Server_SetThrowMode(bool bNewVal);
	void Server_SetShieldEquipped(bool IsEquipped);
	void Server_SetRightShoulderAiming(bool InbUseRightShoulderAiming);
	void Server_SetPeekRight(bool bInIsPeekRight);
	void Server_SetPeekLeft(bool bInIsPeekLeft);
	void Server_SetParachuteLandingAssist(bool bAssistActive);
	void Server_SetFlashed(bool bActive);
	void Server_SetFiringMode(int tc, uint64_t tb, uint32_t ts, uint32_t hc);
	void Server_SetCustomMovementOverride(unsigned char InCustomMovement);
	void Server_SetCoatEquipped(bool IsEquipped);
	void Server_SetCastAnim(bool bInstant);
	void Server_SetCanGroggyDamage(bool bInCanGroggyDamage);
	void Server_SetBurning(bool bActive);
	void Server_SetAimState(bool IsActive);
	void Server_PlayUnarmedAttack(int AnimationIndex);
	void Server_HeavyFall();
	void Server_HandleVault_CP(const struct FVaultingTask& InVaultTask, bool bIInIsClimb, const struct FVector& InJumpStartPos, const struct FVector& InImpactPos, const struct FName& InObjectName);
	void Server_CastStartNotify(class UObject* CastObject, const struct FString& ItemName, uint32_t Chksum);
	void Server_CastFinishNotify();
	void SendSystemMessage(const struct FText& Message);
	void RunVaultCheck_BP();
	void ResetUnarmedAttack();
	void ResetParachute();
	void RemoveCrosshair();
	void ReevaluaeTargetingState();
	void RecoilTapTest(int Bullets, float TimeDelay);
	void RecoilAutoTest(int Bullets);
	void ProcessAdaptiveCrosshair();
	void PrintHasSkinItem();
	void PrepareParachute(class UClass* inParachuteType);
	void PlayCameraAnim(class UCameraAnim* CameraAnim);
	bool PickUpItem(class UItem* Item, const struct FName& TargetContainer, const struct FString& Options);
	void OnWeaponInspectionPressed();
	bool OnWeaponInspectionPad();
	void OnWeaponChanged();
	void OnWeapon_Slot();
	void OnWeapon_6();
	void OnWeapon_5();
	void OnWeapon_4();
	void OnWeapon_3();
	void OnWeapon_2();
	bool OnUnarmPadInput();
	void OnUnarmPad();
	void OnUnarm();
	bool OnToggleThrowModePad();
	void OnToggleThrowMode();
	bool OnToggleSprintingAutoPad();
	bool OnTogglePronePad();
	void OnToggleProne();
	bool OnToggleIsDefaultAimTargetingTypePad();
	bool OnToggleHoldBreathPad();
	bool OnToggleFiringModePad();
	bool OnToggleCrouchPad();
	void OnToggleCrouch();
	bool OnThrowWeaponPad();
	void OnTest_InspectObject();
	bool OnSubWeaponPad();
	bool OnStopTargetingPad();
	void OnStopTargeting();
	bool OnStopScopeAdjustmentModifierPad();
	bool OnStopHoldBreathPad();
	bool OnStopFirePad();
	void OnStopFire();
	bool OnStopAimPad();
	bool OnStopADSPad();
	bool OnStartTargetingPad();
	bool OnStartScopeAdjustmentModifierPad();
	bool OnStartJumpOrVaultPad();
	void OnStartJumpOrVault();
	void OnStartInteractBy(class ATslCharacter* OtherCharacter);
	bool OnStartHoldBreathPad();
	bool OnStartFirePad();
	void OnStartFire();
	bool OnStartCookingThrowablePad();
	bool OnStartAimPad();
	bool OnStartADSPad();
	bool OnSprintPad();
	void OnShowDynamicCrosshair(bool bShow);
	bool OnResetZeroingPad();
	void OnRep_ZombieModePlayerState();
	void OnRep_Team();
	void OnRep_SkydiveComponent();
	void OnRep_ShoesSoundType();
	void OnRep_ReviveCastingTime();
	void OnRep_ParseEmoteSlotNames();
	void OnRep_LastTakeHitInfo();
	void OnRep_IsWeaponObstructed();
	void OnRep_IsThrowHigh();
	void OnRep_IsThirdPerson();
	void OnRep_IsScopingRemote();
	void OnRep_IsReviving();
	void OnRep_IsPeekRightRemote();
	void OnRep_IsPeekRight();
	void OnRep_IsPeekLeftRemote();
	void OnRep_IsPeekLeft();
	void OnRep_IsOutsideBluezone();
	void OnRep_IsInVehicleRemote();
	void OnRep_IsGroggying();
	void OnRep_IsFirstPersonRemote();
	void OnRep_IsDying();
	void OnRep_IsCrouched();
	void OnRep_IsCoatEquipped();
	void OnRep_IsAimingRemote();
	void OnRep_IgnoreRotation();
	void OnRep_Health(float LastHealth);
	void OnRep_GroggyHealth(float LastGroggyHealth);
	void OnRep_CurrentWeaponZoomLevel();
	void OnRep_CharacterState();
	void OnRep_CastAnim();
	void OnRep_BoostGauge(float LastBoostGauge);
	void OnRep_BitContainerSkipOwner(uint32_t OldValue);
	void OnRep_BitContainerNormal(uint32_t OldValue);
	void OnRep_Angled();
	void OnRep_AimStateActive();
	void OnRep_AimOffsets(const struct FRotator& PrevAimOffsets);
	bool OnReloadPad();
	void OnReloadInputPad(bool bPressed);
	bool OnPeekRightPad();
	bool OnPeekLeftPad();
	bool OnNextMainWeaponPad();
	bool OnMeleeWeaponOrUnarmPad();
	bool OnMeleeOrSideWeaponPad();
	void OnInteractBy(class ATslCharacter* OtherCharacter);
	bool OnIncreaseZeroingPad();
	void OnIncreaseMaxFlyAccerleration();
	void OnHoldBreathReleased();
	void OnHoldBreathPressed();
	void OnHoldAngledReleased();
	void OnHoldAngledPressed();
	bool OnHoldAngledPad();
	void OnHitReaction(float DamageTaken, class UTslDamageType* DamageType);
	void OnFinishInteractBy(class ATslCharacter* OtherCharacter);
	void OnEquippedItemUpdated();
	bool OnDecreaseZeroingPad();
	void OnDecreaseMaxFlyAccerleration();
	void OnChangeBreathADS(float Breath, float LastBreath, float BreathMax);
	void OnChangeBreath(float Breath, float LastBreath, float BreathMax);
	void OnCancelInteractBy(class ATslCharacter* OtherCharacter);
	void OnBlockingWidgetOpened(class UWidget* Widget);
	bool OnArmPadInput();
	void NotHaveThrowItemNotifyMessage(const struct FText& ItemName);
	void NotHaveHealItemNotifyMessage(const struct FText& ItemName);
	void NotHaveBoostItemNotifyMessage();
	void NetMulti_StopWeaponInspection_CP();
	void NetMulti_StartWeaponInspection_CP();
	void NetMulti_HandleVault_CP(const struct FVaultingTask& InVaultTask);
	void NativeOnWeaponChanged();
	void Multicast_SetInstantCastAnim();
	void Multicast_HeavyFall();
	void Multi_SyncRotationStart(float InTarget);
	void Multi_SyncRotationFinish();
	void LocalMagazineDrop(class USkeletalMeshComponent* PawnMesh);
	void LocalHandleVault_CP(const struct FVector& V_Start, const struct FVector& V_Apex, const struct FVector& V_ApexAdditive, const struct FVector& V_End, bool bIsClimb, bool bEndToFall, float Direction, float PlayerVelocity, float DistanceFromObject, const struct FVector& JumpStart, const struct FVector& ImpactPosition, const struct FName& ImpactObjectName);
	bool IsZooming();
	bool IsWeaponUsingHighMagnificationScope();
	bool IsVehiclePassenger();
	bool IsVehicleNearlyStopped();
	bool IsVehicleDriver();
	bool IsVehicleCameraInside();
	bool IsVaultingEnabled();
	bool IsVaultingDebugEnabled();
	bool IsVaulting();
	bool IsVaultCancelled();
	bool IsUsingRightShoulderAiming();
	bool IsUpperCollision();
	bool IsUnderwater();
	bool IsUnderRoof();
	bool IsThrowableReadyState();
	bool IsTeamMatch();
	bool IsTargeting();
	bool IsSwimming();
	bool IsSprinting();
	bool IsSpectatingCharacter();
	bool IsSkydiving();
	bool IsSitting();
	bool IsScoping();
	bool IsRunning();
	bool IsRolling();
	bool IsReviving();
	bool IsQuitter();
	bool IsQuickThrowHigh();
	bool IsProning();
	bool IsPlayingPickUpAnimation();
	bool IsPeekRight();
	bool IsPeekLeft();
	bool IsParachuting();
	bool IsMoving();
	bool IsMouseUse();
	bool IsMeleeAttacking();
	bool IsMagazineHandAttached(class USkeletalMeshComponent* PawnMesh);
	bool IsMagazineGunAttached(class USkeletalMeshComponent* WeapMesh);
	bool IsLookingThroughScope();
	bool IsLocalOrSpectating();
	bool IsInWaterVolume();
	bool IsInVehicle();
	bool IsInteracting();
	bool IsInParachute();
	bool IsIndoor();
	bool IsInAircraft();
	bool IsHoldingBreath();
	bool IsHoldingAngled();
	bool IsHitted();
	bool IsHipped();
	bool IsGroggying();
	bool IsFreelooking();
	bool IsForcingFall();
	bool IsForceRotation();
	bool IsForcedProneAfterFall();
	bool IsFollowingCharacter();
	bool IsFloating();
	bool IsFirstPerson();
	bool IsFiring();
	bool IsFallingWithParachute();
	bool IsFallingLong();
	bool IsFallingFromHighAltitude();
	bool IsDying();
	bool IsDebugCameraLocked();
	bool IsCycleInProgress();
	bool IsCycleAnimActive();
	bool IsCrosshairHiddenByWeapon();
	bool IsCoatEquipped();
	bool IsCheckLoaded();
	bool IsCasting();
	void IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackageItem);
	bool IsCameraUnderwater();
	bool IsBloodSpotInvisible();
	bool IsAudioTestEnabled();
	bool IsAttacked();
	bool IsAnimDynamicsEnabled();
	bool IsAllEquipmentsMeshLoaded();
	bool IsAlive();
	bool IsActiveRagdoll();
	void Invulnerable();
	void InitilizeServerSkydiveComp();
	void InitializeFreefall(const struct FVector& InVelocity);
	void IncreaseMaxFly();
	void HaveNotAnyHealItemNotifyMessage();
	bool HasWeaponLeftHandIKSocket();
	bool HasWeapon(class UClass* WeaponClass);
	bool HasSkinForTag(const struct FName& Tag);
	bool HasSameSkin(class USkinItem* TargetSkinItem);
	bool HasAnimatableObject();
	bool HasActiveScopeType();
	void HandleVaulting_BP(const struct FVector& ImpactLocation, const struct FVector& CapsulePredictedLocation, const struct FVector& Normal2D, const struct FVector& DirectionVecotor, bool bForceVault, float JumpDistance, bool bBlockVault, bool bBlockClimb);
	void HandleVaultEnd_CP(const struct FVector& InVaultEndVelocity);
	void HandleCapsuleCollision();
	void GiveWeapon(class UClass* WeaponClass);
	void GiveShieldToPlayer_BP();
	void GetZombieModePlayerState();
	class ATslWeapon_Trajectory* GetWeaponTrajectory();
	class ATslWeapon_Throwable* GetWeaponThrowable();
	float GetWeaponReloadPlayRate();
	class ATslWeapon_Gun_Projectile* GetWeaponProjectile();
	class UWeaponProcessorComponent* GetWeaponProcessor();
	bool GetWeaponObstructionRemote();
	float GetWeaponMovementModifierSprinting();
	float GetWeaponMovementModifierScope();
	float GetWeaponMovementModifierRunning();
	float GetWeaponMovementModifierJumpVelocity();
	float GetWeaponMovementModifierAim();
	struct FTransform GetWeaponLeftHandIKTransform();
	struct FRotator GetWeaponInertiaRecoil();
	struct FRotator GetWeaponInertia();
	struct FTransform GetWeaponHandIK_Right();
	struct FTransform GetWeaponHandIK_Left();
	float GetWeaponGunCollisionAlpha();
	class ATslWeapon_Gun* GetWeaponGun();
	float GetWeaponADSTimeModifier();
	class ATslWeapon* GetWeapon();
	bool GetWantsToJump();
	class UTslVehicleSeatComponent* GetVehicleSeatComponent();
	class UVehicleSeatInteractionComponent* GetVehicleSeat();
	class UVehicleRiderComponent* GetVehicleRiderComponent();
	class APawn* GetVehiclePawn();
	TScriptInterface<class UTslVehicleInterface> GetVehicleInterface();
	float GetVaultTimer();
	float GetVaultingDirection();
	int GetVaultingDebugType();
	class UVaultingData* GetVaultingDataByEnum();
	class ATslPlayerState* GetTslPlayerState();
	class ATslPlayerController* GetTslPlayerController();
	class ATslHUD* GetTslHUD();
	class UTslCharacterMovement* GetTslCharacterMovement();
	float GetTPPSpringarmOffset();
	class UCurveFloat* GetTPPCameraCurve();
	class ATeam* GetTeam();
	float GetTargetingSpeedModifier();
	TEnumAsByte<EStanceMode> GetStance();
	float GetSprintingSpeedModifier_Stand();
	float GetSprintingSpeedModifier_Prone();
	float GetSprintingSpeedModifier_Crouch();
	float GetSprintCurrentValue();
	float GetSpeedModifierByWeaponClass();
	float GetSpeedKmPerHour2D();
	int GetSpectatedCount();
	struct FString GetShortPlayerName();
	bool GetServerVaultFinished();
	struct FName GetScopingMagnifiedMouseSensitiveName();
	float GetRunningSpeedModifier_Stand();
	float GetRunningSpeedModifier_Prone();
	float GetRunningSpeedModifier_Crouch();
	struct FName GetReactionBone(const struct FName& BoneName);
	struct FString GetPlayerName();
	bool GetParachuteLandingAssist();
	TScriptInterface<class UInteractionInterface> GetObjectCanInteract();
	float GetMaxSprintSpeed();
	float GetMaxGroundSpeedOnSlope();
	struct FString GetLocationString();
	float GetLeanRightAlpha();
	float GetLeanLeftAlpha();
	int GetLastTeamNum();
	int GetLastSquadIndex();
	class ATslPlayerState* GetLastNonNullTslPlayerState();
	struct FRotator GetLastMoveRotation();
	class AInventoryFacade* GetInventoryFacade();
	struct FVector GetInteractObjectLocation();
	struct FString GetInteractionString();
	float GetIndoorFactor();
	struct FRotator GetFreelookSavedRotation();
	struct FRotator GetFreelookDeltaRotation();
	class AEquipment* GetEquipment();
	bool GetDynamicCrosshairHidden();
	class UClass* GetDropPackageType();
	struct FString GetDisplayName(bool bShortPlayerName, bool bHideName);
	struct FString GetDirectionString();
	float GetDirectionalSpeedModifier(TEnumAsByte<EMovementType> StanceType);
	struct FRotator GetDesiredRotation();
	struct FVector2D GetDesiredInput();
	class ATslWeapon* GetCurrentWeapon();
	float GetCurrentWaterSurfaceZ();
	float GetCurrentWaterSurfaceBaseZ();
	float GetCurrentWaterDepth();
	struct FRotator GetCurrentSway();
	class UStaticMesh* GetCurrentMagazineMesh(class USkeletalMeshComponent* WeapMesh);
	struct FTransform GetCurrentMagazineLocation(class USkeletalMeshComponent* WeapMesh);
	float GetCurrentHeightFromWaterFloor();
	bool GetCtrlShortCutOnOff();
	TScriptInterface<class UInteractionInterface> GetComponentCanInteract();
	class ATslPlayerState* GetClientTslPlayerState();
	struct FString GetCharacterNetId();
	class UObject* GetCastObject();
	float GetCameraRotationOverride();
	struct FVector GetCameraDOF();
	bool GetBulletSpawnOverride();
	class UBuffComponet* GetBuffComponent();
	class UCharacterBreathComponent* GetBreathComponent();
	void GetAnimWeaponType();
	void GetAnimStance();
	float GetAimStateTimer();
	float GetAimStateAlpha();
	struct FRotator GetAimOffsets();
	struct FVector GetADSSocketOffset();
	struct FVector GetActorLocationInServer();
	class AActor* GetActorCanInteract();
	class ATslPlayerController* GetActiveTslPlayerController();
	class UCameraComponent* GetActiveCamera();
	class UTslAccessoryComponent* GetAccessorySlot();
	void FreeMoveMode();
	void FixupCamera();
	class ATslWeapon* FindWeapon(class UClass* WeaponClass);
	class USkinItem* FindSkinItem(const struct FName& TagName, bool bAutoAction);
	void EnableWorldOriginShiftTick(float Distance);
	bool EnableScopeOutsideBlur();
	void EnableCollision();
	void DisableCollision();
	void DelayedFire();
	void DecreaseMaxFly();
	void DajMnieSzild();
	void CreateSkydiveComponent();
	void ClientSoundPlayMulticast(class UAkAudioEvent* SoundAk);
	void ClientSoundPlay(class UAkAudioEvent* SoundAk);
	void ClientSimulationArmorDestruction(const struct FTransform& Impact, float Durability);
	void ClientSetTargeting();
	void ClientSendGroggyMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel);
	void ClientRevivedCastingWidgetShow(float CastingTime, bool bVisible);
	void ClientProcessRevive(float RemainGroggyHealth);
	void ClientPlayPickUpAnimation(const struct FVector_NetQuantize& InteractionObject, const struct FName& PickUpAnimName);
	void ClientNotifyCrack(const struct FVector_NetQuantize& LocationRelative, float BulletVelocity);
	void ClientMyCharacterPlayPickUpAnimation(const struct FVector_NetQuantize& InteractionObject, float Duration, const struct FName& PickUpAnimName);
	void ClientForceInitStance(TEnumAsByte<EStanceMode> ToStance);
	void ClientFlareGunSuccessedMessage();
	void ClientDrawDamageInfo(float Damage, class UTslDamageType* DamageType);
	void ClientChangeToGroggyStance(TEnumAsByte<EStanceMode> ToStance);
	void Client_TimerCheckSkydivingTrainingStart();
	void Client_ShowServerTransform(const struct FVector& InLocation, const struct FRotator& InRotation);
	void Client_SetFiringMode();
	void Client_PlayUnarmedAttack(int AnimationIndex);
	void Client_DrawDebugDamage(float Damage, float ModifiedDamage, float ActualDamage, const struct FString& ExtraInfo);
	void Client_CastFinishNotify();
	void Client_CastCancelNotify();
	void CheckScopePP();
	void CheckOverlapWithRiver();
	void CheckMuzzleCollision();
	void CheckMuzzleBulletSpawn();
	void CheckJumpAndVault(bool bForceVelocity, const struct FVector& InForcedVelocity);
	void CheckForCoat();
	bool CheckEquipmentSlot(const struct FEquipPosition& InSlotData);
	bool CanSwim();
	void CancelCastOnClient();
	struct FTransform CalculateFreeFallSpeedAndRotationTF();
	void CalculateFreeFallSpeedAndRotation(struct FVector* OutVelocity, struct FRotator* OutRotation);
	void BindCallbackToHUD(class ATslPlayerController* InController);
	void ApplyRagdollPhysicsForce();
	void Anim_MagazineShow(bool bShow, class USkeletalMeshComponent* PawnMesh);
	void Anim_MagazineHandAttach(bool bAttach, class USkeletalMeshComponent* PawnMesh);
	bool Anim_IsMagazineVisible();
	bool AllowInteract(class ATslCharacter* OtherCharacter);
	void AdminSetUpWeapon();
	void AdminInvulnerable();
	void AdminFreeMoveMode();
	void AddBuffMoveSpeedFactor(float MoveSpeedFactor);
};


// Class TslGame.ZombieAppearanceCustomizationBuilder
// 0x0008 (0x0030 - 0x0028)
class UZombieAppearanceCustomizationBuilder : public UAppearanceCustomizationBuilder
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ZombieAppearanceCustomizationBuilder");
		return ptr;
	}

};


// Class TslGame.AsyncStaticMeshComponent
// 0x0070 (0x0AF0 - 0x0A80)
class UAsyncStaticMeshComponent : public UStaticMeshComponent
{
public:
	struct FScriptMulticastDelegate                    OnStaticMeshLoaded;                                       // 0x0A80(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TAssetPtr<class UStaticMesh>                       StaticMeshAsset;                                          // 0x0A90(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0AB0(0x0008) MISSED OFFSET
	class UStaticMesh*                                 ErrorStaticMesh;                                          // 0x0AB8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ClientCollisionProfileNameOverride;                       // 0x0AC0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TAssetPtr<class UStaticMesh>                       PendingStaticMeshAsset;                                   // 0x0AC8(0x0020) (CPF_Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0AE8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AsyncStaticMeshComponent");
		return ptr;
	}


	void SetStaticMeshAsset(TAssetPtr<class UStaticMesh> Asset);
	bool IsSameMesh(TAssetPtr<class UStaticMesh> Asset);
	bool IsLoading();
	bool IsLoaded();
	TAssetPtr<class UStaticMesh> GetStaticMeshAsset();
	void ClearStaticMeshAsset();
};


// Class TslGame.TslLaserPointerAttachment
// 0x0070 (0x0B60 - 0x0AF0)
class UTslLaserPointerAttachment : public UAsyncStaticMeshComponent
{
public:
	class UParticleSystem*                             LaserBeamTemplate;                                        // 0x0AF0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       BeamAttachSocketName;                                     // 0x0AF8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BeamMaxLength;                                            // 0x0B00(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0B04(0x0004) MISSED OFFSET
	class UCurveVector*                                BeamConfigCurve;                                          // 0x0B08(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpotOuterConeAngle;                                       // 0x0B10(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                SpotColor;                                                // 0x0B14(0x0010) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpotAttenuationRadius;                                    // 0x0B24(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxAdjustableAimAngleDifference;                          // 0x0B28(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0B2C(0x0004) MISSED OFFSET
	class UParticleSystemComponent*                    LaserBeamLight;                                           // 0x0B30(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class USpotLightComponent*                         LaserSpotLight;                                           // 0x0B38(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class ATslCharacter*                               Character;                                                // 0x0B40(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslWeapon_Gun*                              Gun;                                                      // 0x0B48(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0B50(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLaserPointerAttachment");
		return ptr;
	}


	void OnSpectatingChanged(bool bIsSpectating);
	void ActivateLaser();
};


// Class TslGame.BattlepassExporter
// 0x0028 (0x0058 - 0x0030)
class UBattlepassExporter : public UDataAsset
{
public:
	struct FDirectoryPath                              CsvSaveDirectory;                                         // 0x0030(0x0010) (CPF_Edit)
	struct FString                                     CsvSaveFileName;                                          // 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0050(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.BattlepassExporter.ExportCsv

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BattlepassExporter");
		return ptr;
	}

};


// Class TslGame.BluezoneInOutComponent
// 0x00F0 (0x02D0 - 0x01E0)
class UBluezoneInOutComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xF0];                                      // 0x01E0(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BluezoneInOutComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class TslGame.BluezoneInOutSoundEffectComponent
// 0x0010 (0x01F0 - 0x01E0)
class UBluezoneInOutSoundEffectComponent : public UActorComponent
{
public:
	class UAkComponent*                                AkComponent;                                              // 0x01E0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BluezoneInOutSoundEffectComponent");
		return ptr;
	}

};


// Class TslGame.BTDecorator_HasLoSTo
// 0x0028 (0x0090 - 0x0068)
class UBTDecorator_HasLoSTo : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                      EnemyKey;                                                 // 0x0068(0x0028) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BTDecorator_HasLoSTo");
		return ptr;
	}

};


// Class TslGame.BTTask_FindPointNearEnemy
// 0x0000 (0x0098 - 0x0098)
class UBTTask_FindPointNearEnemy : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BTTask_FindPointNearEnemy");
		return ptr;
	}

};


// Class TslGame.BuffComponet
// 0x0060 (0x0240 - 0x01E0)
class UBuffComponet : public UActorComponent
{
public:
	TArray<class ATslBuff*>                            Buffs;                                                    // 0x01E0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x01F0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BuffComponet");
		return ptr;
	}


	void Server_RequestSelfBuff(class UClass* BuffClass, class ATslReplicatedBuff* BuffInst, float Param);
	void RemoveBuff(const struct FName& OverlapId);
	class ATslBuff* FindBuffWithOverlapId(const struct FName& BuffOverlapId);
	class ATslBuff* AddBuff(class UClass* TslBuffClass);
};


// Class TslGame.CameraSettings
// 0x0070 (0x0098 - 0x0028)
class UCameraSettings : public UObject
{
public:
	float                                              CameraPitchMinStand;                                      // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraPitchMaxStand;                                      // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraYawMinStand;                                        // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraYawMaxStand;                                        // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraPitchMinProne;                                      // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraPitchMaxProne;                                      // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraYawMinProne;                                        // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraYawMaxProne;                                        // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              FPSShowOnHighScopingFOV;                                  // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TPSShowOnHighScopingFOV;                                  // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraPitchMinInVehicle;                                  // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraPitchMaxInVehicle;                                  // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraYawMinInVehicle;                                    // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraYawMaxInVehicle;                                    // 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FName                                       HeadBoneName;                                             // 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FString>                             HideMaterialsWhenCameraIsInHead;                          // 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             HideMaterialsOnScopeMode;                                 // 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             HideMaterialsOnHighScopeMode;                             // 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CameraSettings");
		return ptr;
	}

};


// Class TslGame.CaptureAreaActor
// 0x0180 (0x0578 - 0x03F8)
class ACaptureAreaActor : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x03F8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.CaptureAreaActor.PreoccupiedTeamType
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	float                                              ScorePerSecond;                                           // 0x03FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCheckCharacterOnVehicle : 1;                             // 0x0400(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	float                                              ExposeOnScreenDistance;                                   // 0x0404(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ColorParameterName;                                       // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       TryingTeamColorParameterName;                             // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ProgressParameterName;                                    // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              IndicatorZOffset;                                         // 0x0420(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PointsNeedToCapture;                                      // 0x0424(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     DisplayName;                                              // 0x0428(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FString                                     BattleAreaType;                                           // 0x0438(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	class UAkAudioEvent*                               AkEvent_CaptureStart;                                     // 0x0448(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               AkEvent_CaptureProgress;                                  // 0x0450(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               AkEvent_CaptureEnd;                                       // 0x0458(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     AkRTPCParamName;                                          // 0x0460(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UCurveFloat*                                 RTPCByPlayerNumber;                                       // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 CaptureScorePerSecByPlayerNumber;                         // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       AboveAreaMeshName;                                        // 0x0480(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ZOffsetAboveAreaMesh;                                     // 0x0488(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                RedTeamColor;                                             // 0x048C(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                BlueTeamColor;                                            // 0x049C(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FLinearColor                                NeuturalColor;                                            // 0x04AC(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x24];                                      // 0x04BC(0x0024) MISSED OFFSET
	class UAkComponent*                                AkComponent;                                              // 0x04E0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FTimerHandle                                CaptureProgressAudioDelayTimerHandle;                     // 0x04E8(0x0008)
	unsigned char                                      bActivated : 1;                                           // 0x04F0(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04F1(0x0003) MISSED OFFSET
	int                                                CaptureTeamId;                                            // 0x04F4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TryingTeamId;                                             // 0x04F8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CapturePoint;                                             // 0x04FC(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x78];                                      // 0x0500(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CaptureAreaActor");
		return ptr;
	}


	void OnRep_CaptureTryingTeamId(int CaptureTryingTeamId);
	void OnRep_CaptureTeamId(int OldCapturedTeamId);
	void OnRep_CapturePoint(float CapturePoint);
	void OnRep_Activated(bool bOldActviate);
	void OnActorEndOverlappedAtServer(class AActor* MyActor, class AActor* OverlappedActor);
	void OnActorEndOverlappedAtClient(class AActor* MyActor, class AActor* OverlappedActor);
	void OnActorBeginOverlappedAtServer(class AActor* MyActor, class AActor* OverlappedActor);
	void OnActorBeginOverlappedAtClient(class AActor* MyActor, class AActor* OverlappedActor);
	float GetCaptureProgressNormalized();
	float GetAreaRadius();
	void CheckCaptureAudioByTimer();
};


// Class TslGame.CharacterBreathComponent
// 0x00A0 (0x0280 - 0x01E0)
class UCharacterBreathComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01E0(0x0010) MISSED OFFSET
	float                                              Breath;                                                   // 0x01F0(0x0004) (CPF_Edit, CPF_Net, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              BreathMax;                                                // 0x01F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     BreathPointOffsetAtStand;                                 // 0x01F8(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     BreathPointOffsetAtCrouch;                                // 0x0204(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     BreathPointOffsetAtProne;                                 // 0x0210(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     BreathPointOffsetAtGroggy;                                // 0x021C(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      RestorationBuff;                                          // 0x0228(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      ApneaDebuff;                                              // 0x0230(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      HoldBreathDebuff;                                         // 0x0238(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinimumBreathStartHoldingBreath;                          // 0x0240(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	class UClass*                                      SprintDebuff;                                             // 0x0248(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinimumBreathStartSprinting;                              // 0x0250(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2C];                                      // 0x0254(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CharacterBreathComponent");
		return ptr;
	}


	void OnRep_Breath(float LastBreath);
	bool IsInApnea();
	bool IsConsuming();
	float GetBreathRatio();
	float GetBreathMax();
	float GetBreath();
	bool CanStartSprinting();
	bool CanStartHoldingBreath();
	void AddBreath(float Value);
};


// Class TslGame.CoherentCommonBinder
// 0x00C8 (0x00F0 - 0x0028)
class UCoherentCommonBinder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0028(0x0060) MISSED OFFSET
	struct FString                                     DefaultLobbyUrl;                                          // 0x0088(0x0010) (CPF_ZeroConstructor, CPF_Config)
	struct FString                                     DevelopmentLobbyUrl;                                      // 0x0098(0x0010) (CPF_ZeroConstructor, CPF_Config)
	struct FString                                     CertificationLobbyUrl;                                    // 0x00A8(0x0010) (CPF_ZeroConstructor, CPF_Config)
	struct FString                                     LiveLobbyUrl;                                             // 0x00B8(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData01[0x28];                                      // 0x00C8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CoherentCommonBinder");
		return ptr;
	}


	void UnBindUI();
	void Test();
	void OnWebPageOnPlatformFailed();
	void BindUI();
	void BindDelegate();
};


// Class TslGame.CoherentWidgetBinder
// 0x0010 (0x0100 - 0x00F0)
class UCoherentWidgetBinder : public UCoherentCommonBinder
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CoherentWidgetBinder");
		return ptr;
	}


	void UnBindUI();
	void Test();
	void OnWebPageOnPlatformFailed();
	void BindUI();
	void BindDelegate();
};


// Class TslGame.LobbyCoherentWidgetBinder
// 0x0000 (0x0100 - 0x0100)
class ULobbyCoherentWidgetBinder : public UCoherentWidgetBinder
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyCoherentWidgetBinder");
		return ptr;
	}


	void UnBindUI();
	void Test();
	void OnWebPageOnPlatformFailed();
	void BindUI();
	void BindDelegate();
};


// Class TslGame.ConsoleCommandExecutor
// 0x0020 (0x0408 - 0x03E8)
class AConsoleCommandExecutor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ConsoleCommandExecutor");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.ModeController
// 0x0000 (0x0500 - 0x0500)
class AModeController : public AAIController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ModeController");
		return ptr;
	}


	bool UseBlackboard(class UBlackboardData* BlackboardAsset, class UBlackboardComponent** BlackboardComponent);
	void UnclaimTaskResource(class UClass* ResourceClass);
	void SetMoveBlockDetection(bool bEnable);
	bool RunBehaviorTree(class UBehaviorTree* BTAsset);
	void OnUsingBlackBoard(class UBlackboardComponent* BlackboardComp, class UBlackboardData* BlackboardAsset);
	void OnUnpossess(class APawn* UnpossessedPawn);
	void OnPossess(class APawn* PossessedPawn);
	void OnGameplayTaskResourcesClaimed(const struct FGameplayResourceSet& NewlyClaimed, const struct FGameplayResourceSet& FreshlyReleased);
	TEnumAsByte<EPathFollowingRequestResult> MoveToLocation(const struct FVector& Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class UClass* FilterClass, bool bAllowPartialPath);
	TEnumAsByte<EPathFollowingRequestResult> MoveToActor(class AActor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class UClass* FilterClass, bool bAllowPartialPath);
	void K2_SetFocus(class AActor* NewFocus);
	void K2_SetFocalPoint(const struct FVector& FP);
	void K2_ClearFocus();
	bool HasPartialPath();
	class UPathFollowingComponent* GetPathFollowingComponent();
	TEnumAsByte<EPathFollowingStatus> GetMoveStatus();
	struct FVector GetImmediateMoveDestination();
	class AActor* GetFocusActor();
	struct FVector GetFocalPointOnActor(class AActor* Actor);
	struct FVector GetFocalPoint();
	class UAIPerceptionComponent* GetAIPerceptionComponent();
	void ClaimTaskResource(class UClass* ResourceClass);
};


// Class TslGame.CarePackageController
// 0x00F8 (0x05F8 - 0x0500)
class ACarePackageController : public AModeController
{
public:
	class UClass*                                      AircraftCarePackageClass;                                 // 0x0500(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartDelay;                                               // 0x0508(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   SpawnInterval;                                            // 0x0510(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlyingHeight;                                             // 0x0518(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CarePackageLifeTime;                                      // 0x051C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WhiteZoneSpawnInnerRate;                                  // 0x0520(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DropAreaRate;                                             // 0x0524(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      OverrideFromModePreset : 1;                               // 0x0528(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0529(0x0007) MISSED OFFSET
	class UClass*                                      AircraftFlareGunCarePackageClass;                         // 0x0530(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      AircraftFlareGunVehicleClass;                             // 0x0538(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0540(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.CarePackageController.FlareDeploymentTypeMap
	float                                              SpawnAreaRadius;                                          // 0x0590(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0594(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData03[0x50];                                      // 0x0594(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.CarePackageController.SpawnDelayMap
	float                                              FlyHeight_Flare;                                          // 0x05E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                MaxConcurrentFlareAirplanes;                              // 0x05EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinWhitezoneDiameter;                                     // 0x05F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CarePackageController");
		return ptr;
	}


	struct FVector SpawnAircraftCarePackageCustom(const struct FVector& DropLocation, int InPackageID, int InNumberOfTeamPlayers);
	struct FVector SpawnAircraftCarePackage(bool CopyIntersectionInfo);
	bool SetNextCarePackageInBlackboard();
	void InitCarePackageSetting();
	float GetSpawnInterval();
	float GetSpawnDelayFromMap();
	float GetSpawnAreaRadius();
};


// Class TslGame.CustomCarepackageRulesComponent
// 0x00A0 (0x0280 - 0x01E0)
class UCustomCarepackageRulesComponent : public UActorComponent
{
public:
	TArray<struct FCustomCarepackageCircleData>        CustomCarepackageCircleArray;                             // 0x01E0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              SecondsToKeepPackageInfoAfterLanding;                     // 0x01F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                Deploy_InWhiteCarepackagesLeft;                           // 0x01F4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                Deploy_OutsideCarepackagesLeft;                           // 0x01F8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET
	TArray<struct FCustomCarepackageComing>            CarePackagesComing;                                       // 0x0200(0x0010) (CPF_Edit, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_Transient, CPF_EditConst)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0210(0x0060) MISSED OFFSET
	class ABattleRoyaleModeController*                 BRController;                                             // 0x0270(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslGameMode*                                TslGameMode;                                              // 0x0278(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CustomCarepackageRulesComponent");
		return ptr;
	}


	void OnCarepackageDeployed();
	void GetFlareDeploymentType(const struct FVector& ActorSize2D);
	int GetCarepackagesLeft();
	bool CanFireFlaregun();
	void AddZoneCarepackages(int PhaseIndex, bool bIsRelease);
};


// Class TslGame.DeployedItem
// 0x0020 (0x0408 - 0x03E8)
class ADeployedItem : public AActor
{
public:
	class UClass*                                      ItemType;                                                 // 0x03E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                StackCount;                                               // 0x03F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class USceneComponent*                             SceneComponent;                                           // 0x03F8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class ADroppedItem*                                DroppedItem;                                              // 0x0400(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DeployedItem");
		return ptr;
	}

};


// Class TslGame.TslAutoRespawnedItem
// 0x0010 (0x0418 - 0x0408)
class ATslAutoRespawnedItem : public ADeployedItem
{
public:
	float                                              ItemCheckInterval;                                        // 0x0408(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WaitingTimeForRespawn;                                    // 0x040C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FTimerHandle                                TimerHandle_Respawn;                                      // 0x0410(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAutoRespawnedItem");
		return ptr;
	}

};


// Class TslGame.SubActor
// 0x0008 (0x03F0 - 0x03E8)
class ASubActor : public AActor
{
public:
	class ATslCharacter*                               NetOwnerCharacter;                                        // 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SubActor");
		return ptr;
	}

};


// Class TslGame.SlotContainerInterface
// 0x0000 (0x0028 - 0x0028)
class USlotContainerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SlotContainerInterface");
		return ptr;
	}

};


// Class TslGame.ItemSlotContainer
// 0x0030 (0x0420 - 0x03F0)
class AItemSlotContainer : public ASubActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FScriptDelegate                             OnCreateAndShowContextMenuWidget;                         // 0x03F8(0x000E) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03F0(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             OnDestroyContextMenuWidget;                               // 0x0408(0x000E) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0408(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned char                                      UnknownData03[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemSlotContainer");
		return ptr;
	}

};


// Class TslGame.ItemExplorerInterface
// 0x0000 (0x0028 - 0x0028)
class UItemExplorerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemExplorerInterface");
		return ptr;
	}

};


// Class TslGame.ItemExplorer
// 0x0030 (0x0450 - 0x0420)
class AItemExplorer : public AItemSlotContainer
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	struct FScriptDelegate                             OnUpdateItemList;                                         // 0x0428(0x000E) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0420(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             OnClearItemList;                                          // 0x0438(0x000E) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0438(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned char                                      UnknownData03[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemExplorer");
		return ptr;
	}

};


// Class TslGame.ExplorableItemInterface
// 0x0000 (0x0028 - 0x0028)
class UExplorableItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ExplorableItemInterface");
		return ptr;
	}

};


// Class TslGame.TslParticleInterface
// 0x0000 (0x0028 - 0x0028)
class UTslParticleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslParticleInterface");
		return ptr;
	}

};


// Class TslGame.ItemPackage
// 0x0128 (0x0578 - 0x0450)
class AItemPackage : public AItemExplorer
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0450(0x0010) MISSED OFFSET
	struct FText                                       PackageName;                                              // 0x0460(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FText                                       PackageCategory;                                          // 0x0478(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FText                                       PackageDetailedName;                                      // 0x0490(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FText                                       PackageDescription;                                       // 0x04A8(0x0018) (CPF_Edit, CPF_DisableEditOnInstance)
	class UTexture*                                    PackageIcon;                                              // 0x04C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PackageIconSizeRatio;                                     // 0x04C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04CC(0x0004) MISSED OFFSET
	class UTexture*                                    PackageToolTipIcon;                                       // 0x04D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PackageToolTipIconSizeRatio;                              // 0x04D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	TAssetPtr<class UStaticMesh>                       PackageMesh;                                              // 0x04E0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	class UBoxComponent*                               BoxComponent;                                             // 0x0500(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UOnceInteractionComponent*                   InteractionComponent;                                     // 0x0508(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      DestroyByEmptyItem : 1;                                   // 0x0510(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0511(0x0007) MISSED OFFSET
	class UAsyncStaticMeshComponent*                   DropStaticMesh;                                           // 0x0518(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UItem*>                               Items;                                                    // 0x0520(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst)
	struct FString                                     CreatorName;                                              // 0x0530(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor)
	int                                                CreatorTeamId;                                            // 0x0540(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SortPriority;                                             // 0x0544(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0548(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.ItemPackage.PackageType
	unsigned char                                      UnknownData05[0xF];                                       // 0x0549(0x000F) MISSED OFFSET
	class UClass*                                      EffectClass;                                              // 0x0558(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	class ATslParticle*                                ParticleEffect;                                           // 0x0560(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     SpawnBoxExtent;                                           // 0x0568(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemPackage");
		return ptr;
	}


	void OnRep_EffectClass();
	void OnDestroy(class AActor* Actor);
	void Items_RepNotify();
	bool IsOpenedBy(class ATslCharacter* Character);
	void ClientOnInteractBy(class ATslCharacter* OtherCharacter);
	bool AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.DeployedItemPackage
// 0x0018 (0x0400 - 0x03E8)
class ADeployedItemPackage : public AActor
{
public:
	class UClass*                                      ItemPackageType;                                          // 0x03E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FPackagedItemInfo>                   ItemInfos;                                                // 0x03F0(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DeployedItemPackage");
		return ptr;
	}

};


// Class TslGame.DeployedVehicle
// 0x0028 (0x0410 - 0x03E8)
class ADeployedVehicle : public AActor
{
public:
	class UClass*                                      VehicleType;                                              // 0x03E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSnapToFloor : 1;                                         // 0x03F0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              SpawnZOffsetFromFloor;                                    // 0x03F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDesignateFuelPercent : 1;                                // 0x03F8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	float                                              DesignatedVehicleFuelPercent;                             // 0x03FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RandomMinFuelPercent;                                     // 0x0400(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RandomMaxFuelPercent;                                     // 0x0404(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x0408(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DeployedVehicle");
		return ptr;
	}

};


// Class TslGame.RichPresenceManager
// 0x00F8 (0x0120 - 0x0028)
class URichPresenceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC8];                                      // 0x0028(0x00C8) MISSED OFFSET
	class UTslGameInstance*                            TslGameInstance;                                          // 0x00F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APlayerController*                           PlayerController;                                         // 0x00F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslGameState*                               TslGameState;                                             // 0x0100(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslPlayerState*                             TslPlayerState;                                           // 0x0108(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0110(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.RichPresenceManager");
		return ptr;
	}

};


// Class TslGame.RichPresenceObserverInterface
// 0x0000 (0x0028 - 0x0028)
class URichPresenceObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.RichPresenceObserverInterface");
		return ptr;
	}

};


// Class TslGame.DiscordRichPresenceObserver
// 0x0140 (0x0168 - 0x0028)
class UDiscordRichPresenceObserver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x140];                                     // 0x0028(0x0140) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DiscordRichPresenceObserver");
		return ptr;
	}

};


// Class TslGame.DoorDataAsset
// 0x0038 (0x0068 - 0x0030)
class UDoorDataAsset : public UDataAsset
{
public:
	float                                              OpenAngle;                                                // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	class UCurveFloat*                                 OpenCurve;                                                // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OpenCurveDuration;                                        // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CloseCurve;                                               // 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CloseCurveDuration;                                       // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               OpenSound;                                                // 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               CloseSound;                                               // 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DoorDataAsset");
		return ptr;
	}

};


// Class TslGame.TslReactionDoorData
// 0x0040 (0x0070 - 0x0030)
class UTslReactionDoorData : public UDataAsset
{
public:
	float                                              PointDamageImpulse;                                       // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PointDamageRadius;                                        // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BreakingRadius;                                           // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BreakingImpulse;                                          // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BreakingMinDamage;                                        // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DamageAccumulateTimeout;                                  // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ZombieDamageAccumulateTimeout;                            // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FName                                       TopImpactSoketName;                                       // 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       CenterImpactSoketName;                                    // 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BottomImpactSoketName;                                    // 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               DestructibleSoundAk;                                      // 0x0068(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReactionDoorData");
		return ptr;
	}

};


// Class TslGame.DoorFrameComponent
// 0x0070 (0x0AF0 - 0x0A80)
class UDoorFrameComponent : public UStaticMeshComponent
{
public:
	struct FTransform                                  DoorTransform;                                            // 0x0A80(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	struct FVector                                     SoundOffsetFromDoor;                                      // 0x0AB0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0ABC(0x0004) MISSED OFFSET
	class UStaticMesh*                                 DoorStaticMesh;                                           // 0x0AC0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDestructibleMesh*                           DoorDestructibleMesh;                                     // 0x0AC8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDoorDataAsset*                              DoorDataAsset;                                            // 0x0AD0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslReactionDoorData*                        ReactionDoorData;                                         // 0x0AD8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisableSubComponents : 1;                                // 0x0AE0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0AE1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DoorFrameComponent");
		return ptr;
	}


	class UStaticMesh* GetDoorStaticMesh();
	void DisableSubComponents(bool bDisable);
};


// Class TslGame.DroppedItem
// 0x0048 (0x0430 - 0x03E8)
class ADroppedItem : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	ENCRYPTED class UItem*                             Item;                                                     // 0x03F0(0x0008) (CPF_BlueprintVisible, CPF_Net)
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x03F8(0x0020) (CPF_Net, CPF_Transient)
	class UAsyncStaticMeshComponent*                   AsyncStaticMesh;                                          // 0x0418(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0420(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedItem");
		return ptr;
	}


	void OnStaticMeshLoaded();
	void OnRep_ReplicatedSkinParam();
	void Item_RepNotify();
};


// Class TslGame.DroppedItemGridManager
// 0x00B0 (0x0498 - 0x03E8)
class ADroppedItemGridManager : public AInfo
{
public:
	float                                              MaxGridSize;                                              // 0x03E8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxGridLayerNum;                                          // 0x03EC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxItemNumPerGroup;                                       // 0x03F0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xA4];                                      // 0x03F4(0x00A4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedItemGridManager");
		return ptr;
	}

};


// Class TslGame.DroppedItemGroup
// 0x0010 (0x03F8 - 0x03E8)
class ADroppedItemGroup : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	float                                              RandomSpawnRadius;                                        // 0x03F0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxRandomSpawnCount;                                      // 0x03F4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedItemGroup");
		return ptr;
	}


	void OnItemEndPlay();
	void OnItemBeginPlay();
	bool AddItem(class UItem* NewItem, const struct FVector& NewWorldLocation, bool bCheckComplexCollision);
};


// Class TslGame.DroppedItemInterface
// 0x0000 (0x0028 - 0x0028)
class UDroppedItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedItemInterface");
		return ptr;
	}

};


// Class TslGame.GeneralItemSpawner
// 0x0000 (0x0028 - 0x0028)
class UGeneralItemSpawner : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GeneralItemSpawner");
		return ptr;
	}

};


// Class TslGame.DroppedPackageSpawnProcessor
// 0x00E8 (0x0110 - 0x0028)
class UDroppedPackageSpawnProcessor : public UObject
{
public:
	float                                              TotalSpawnFromActorRate;                                  // 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TotalSpawnFromComponentRate;                              // 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TArray<struct FGeneralItemSpawnProb>               SpawnProbArray;                                           // 0x0030(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UDataTable*                                  RawItemSpawnDataTable;                                    // 0x0040(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UDataTable*                                  RawItemSpawnTogetherDataTable;                            // 0x0048(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FStringClassReference                       ItemClass;                                                // 0x0050(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0060(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedPackageSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.DroppedPackageSpot
// 0x0008 (0x03F0 - 0x03E8)
class ADroppedPackageSpot : public AActor
{
public:
	class UDroppedPackageSpotComponent*                SpotComponent;                                            // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedPackageSpot");
		return ptr;
	}

};


// Class TslGame.DroppedPackageSpotComponent
// 0x0000 (0x0480 - 0x0480)
class UDroppedPackageSpotComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedPackageSpotComponent");
		return ptr;
	}


	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetIsAttachmentReplicated(bool ShouldReplicate);
	void SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(bool bCallModify);
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class TslGame.DynamicWeatherController
// 0x0078 (0x0460 - 0x03E8)
class ADynamicWeatherController : public AActor
{
public:
	TArray<struct FTslWeatherVolume>                   RegionalWeatherVolumes;                                   // 0x03E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate)
	class ATslParticle*                                WeatherParticle;                                          // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	class AExponentialHeightFog*                       HeightFog;                                                // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0408(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DynamicWeatherController");
		return ptr;
	}

};


// Class TslGame.DynamicWeatherInterface
// 0x0000 (0x0028 - 0x0028)
class UDynamicWeatherInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DynamicWeatherInterface");
		return ptr;
	}

};


// Class TslGame.ExportableDataAsset
// 0x0020 (0x0050 - 0x0030)
class UExportableDataAsset : public UDataAsset
{
public:
	struct FDirectoryPath                              JsonSaveDirectory;                                        // 0x0030(0x0010) (CPF_Edit)
	struct FString                                     JsonSaveFileName;                                         // 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ExportableDataAsset");
		return ptr;
	}

};


// Class TslGame.LobbyCustomizableData
// 0x0020 (0x0070 - 0x0050)
class ULobbyCustomizableData : public UExportableDataAsset
{
public:
	TArray<struct FLobbyFaceElement>                   Faces;                                                    // 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FLobbyHairElement>                   Hairs;                                                    // 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyCustomizableData");
		return ptr;
	}

};


// Class TslGame.LobbyItemExporter
// 0x0010 (0x0060 - 0x0050)
class ULobbyItemExporter : public UExportableDataAsset
{
public:
	struct FString                                     LocJsonSaveFileName;                                      // 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyItemExporter");
		return ptr;
	}

};


// Class TslGame.LobbyWeaponExporter
// 0x0000 (0x0050 - 0x0050)
class ULobbyWeaponExporter : public UExportableDataAsset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyWeaponExporter");
		return ptr;
	}

};


// Class TslGame.FakeProjectileComponent
// 0x0050 (0x0230 - 0x01E0)
class UFakeProjectileComponent : public UActorComponent
{
public:
	class ATslProjectile*                              FakeProjectile;                                           // 0x01E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslProjectile*                              MasterProjectile;                                         // 0x01E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x01F0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FakeProjectileComponent");
		return ptr;
	}


	void OnProjectileStopSim(const struct FHitResult& ImpactResult);
	void OnImpact(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
};


// Class TslGame.FlashBangCaptureActor
// 0x0038 (0x0420 - 0x03E8)
class AFlashBangCaptureActor : public AActor
{
public:
	class USceneComponent*                             SceneRootComponent;                                       // 0x03E8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneCaptureComponent2D*                    SceneCapture;                                             // 0x03F0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class APawn*                                       PlayerPawnReference;                                      // 0x03F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_IsPlainOldData)
	class UTextureRenderTarget2D*                      CaptureTexture;                                           // 0x0400(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_IsPlainOldData)
	int                                                TextureDownsampleMultiplier;                              // 0x0408(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x040C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FlashBangCaptureActor");
		return ptr;
	}


	void CaptureScreen();
	void CaptureINIT(bool bDoDelay, float CaptureDelay, class APawn* PlayerRef, class UTextureRenderTarget2D* RenderTexture, const struct FPostProcessSettings& PP_Settings, bool bHidePawn);
};


// Class TslGame.TslPostProcessEffect
// 0x0070 (0x0458 - 0x03E8)
class ATslPostProcessEffect : public AActor
{
public:
	struct FName                                       TargetPostProcessVolumeName;                              // 0x03E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FPostProcessMaterial>                PostProcessMaterials;                                     // 0x03F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FPostProcessEffectParameter>         DefaultPostProcessEffectParameter;                        // 0x0400(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<struct FPostProcessEffectDynamicMaterialState> PostProcessEffectDynamicMaterialStates;                   // 0x0410(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<float>                                      PostProcessEffectDynamicMaterialOriginalBlendWeight;      // 0x0420(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class APostProcessVolume*>                  PostProcessVolumeList;                                    // 0x0430(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FPostProcessEffectParameter>         CurrentParameters;                                        // 0x0440(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                UsingMeshCount;                                           // 0x0450(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsEnabled : 1;                                           // 0x0454(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPostProcessEffect");
		return ptr;
	}


	bool SetMaterialVectorParameter(int idx, const struct FName& ParameterName, const struct FLinearColor& Value);
	bool SetMaterialParameter(int idx, const struct FName& ParameterName, float Value);
	bool SetMaterialBlendWeight(int idx, float Value);
	bool SetEffectParameter(const struct FString& ParameterName, float Value);
	bool SetDepthOfFieldFarBlurSize(float NewBlurSize);
	void OnSetEffectParameter(const struct FString& ParameterName, float Value);
	float GetEffectParameter(const struct FString& ParameterName, float DefaultValue);
	float GetDepthOfFieldFarBlurSize();
};


// Class TslGame.FlashbangComponent
// 0x0080 (0x0260 - 0x01E0)
class UFlashbangComponent : public UActorComponent
{
public:
	struct FExplosionTracer                            Tracer;                                                   // 0x01E0(0x0040) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	TArray<TEnumAsByte<EObjectTypeQuery>>              SphereQueryObjects;                                       // 0x0220(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TEnumAsByte<ECollisionChannel>>             BlockQueryObjects;                                        // 0x0230(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FName                                       CharacterTraceSocket;                                     // 0x0240(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlashMaxAngle;                                            // 0x0248(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxApplyAngle;                                            // 0x024C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      DebuffClass;                                              // 0x0250(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0258(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FlashbangComponent");
		return ptr;
	}


	void InitializeCheck();
};


// Class TslGame.FlashbangDebuffCurve
// 0x0018 (0x0048 - 0x0030)
class UFlashbangDebuffCurve : public UCurveBase
{
public:
	class UEnum*                                       Enum;                                                     // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FRichCurve>                          FloatCurves;                                              // 0x0038(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FlashbangDebuffCurve");
		return ptr;
	}

};


// Class TslGame.FloatingVehicleAnimInstance
// 0x0050 (0x03E0 - 0x0390)
class UFloatingVehicleAnimInstance : public UAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0390(0x0010) MISSED OFFSET
	float                                              MapRangeClampedOutRangeA;                                 // 0x03A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MapRangeClampedOutRangeB;                                 // 0x03A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MultiplySteeringWheelRotYaw;                              // 0x03A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    SteeringWheelRotMultiplier;                               // 0x03AC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    RudderRot;                                                // 0x03B8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SteeringWheelRot;                                         // 0x03C4(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    PropellerRot;                                             // 0x03D0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FloatingVehicleAnimInstance");
		return ptr;
	}

};


// Class TslGame.FootprintController
// 0x0068 (0x0450 - 0x03E8)
class AFootprintController : public AActor
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                UpdateRateThresholdToUseAnimNotify;                       // 0x03F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class UMaterialInterface*                          ManualDecalMaterial;                                      // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UPhysicalMaterial*>                   MaterialsToApply;                                         // 0x0400(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0410(0x0003) MISSED OFFSET
	unsigned char                                      bUsePool : 1;                                             // 0x0413(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecalLifeSpan;                                            // 0x0414(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   DecalSize;                                                // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              ProjectionSweep;                                          // 0x0420(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RenderPriority;                                           // 0x0424(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AInstancedDeferredDecalActor*                DecalActor;                                               // 0x0428(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	class AInstancedDeferredDecalActor*                ManualDecalActor;                                         // 0x0430(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	int                                                NumErrorCreatingDecalActor;                               // 0x0438(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	int                                                NumErrorCreatingManualDecalActor;                         // 0x043C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bLimitNumberOnSpot : 1;                                   // 0x0440(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              LimitRadius;                                              // 0x0444(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LimitNum;                                                 // 0x0448(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FootprintController");
		return ptr;
	}

};


// Class TslGame.FpsCountStatistics
// 0x0020 (0x0048 - 0x0028)
class UFpsCountStatistics : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FpsCountStatistics");
		return ptr;
	}

};


// Class TslGame.FreefallAnimData
// 0x0048 (0x0078 - 0x0030)
class UFreefallAnimData : public UDataAsset
{
public:
	float                                              VerticalStabilizationIn;                                  // 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VerticalStabilizationOut;                                 // 0x0034(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HorizontalStabilizationIn;                                // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HorizontalStabilizationOut;                               // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    LegsFreeMoveLimit;                                        // 0x0040(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    BodyFreeMoveLimit;                                        // 0x004C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StrafingYawLimit;                                         // 0x0058(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StrafingRollLimit;                                        // 0x005C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StrafingIn;                                               // 0x0060(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StrafingOut;                                              // 0x0064(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PitchInterpolationSpeedDown;                              // 0x0068(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PitchInterpolationSpeedUp;                                // 0x006C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              IdlePitchMax;                                             // 0x0070(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              YawInterpolationSpeed;                                    // 0x0074(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FreefallAnimData");
		return ptr;
	}

};


// Class TslGame.GameEventFluentdAdapter
// 0x0030 (0x0058 - 0x0028)
class UGameEventFluentdAdapter : public UObject
{
public:
	int                                                Port;                                                     // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	struct FString                                     Host;                                                     // 0x0030(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0040(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GameEventFluentdAdapter");
		return ptr;
	}

};


// Class TslGame.TslGameOption
// 0x0000 (0x0028 - 0x0028)
class UTslGameOption : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameOption");
		return ptr;
	}

};


// Class TslGame.TslGameInstance
// 0x1120 (0x1210 - 0x00F0)
class UTslGameInstance : public UGameInstance
{
public:
	TArray<struct FString>                             PersistentUClassPaths;                                    // 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_Config)
	TArray<class UClass*>                              PersistentUClasses;                                       // 0x0100(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     WelcomeScreenMap;                                         // 0x0110(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bUseLobbyWidget : 1;                                      // 0x0120(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0121(0x0003) MISSED OFFSET
	int                                                LobbyWidgetZOrder;                                        // 0x0124(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	class ULobbyLink*                                  LobbyLink;                                                // 0x0128(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UVoiceManager*                               VoiceManager;                                             // 0x0130(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UReporterManager*                            ReporterManager;                                          // 0x0138(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FTslStartParameter                          StartParamter;                                            // 0x0140(0x0098)
	unsigned char                                      UnknownData01[0x158];                                     // 0x01D8(0x0158) MISSED OFFSET
	struct FStringAssetReference                       LobbyWidgetClassName;                                     // 0x0330(0x0010)
	unsigned char                                      UnknownData02[0x170];                                     // 0x0340(0x0170) MISSED OFFSET
	class ULobbyWidget*                                LobbyWidget;                                              // 0x04B0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xB8];                                      // 0x04B8(0x00B8) MISSED OFFSET
	TArray<struct FReplayKillEventItem>                ReplayKillEventItems;                                     // 0x0570(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayKillEventsDone;                          // 0x0580(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData04[0xA0];                                      // 0x0590(0x00A0) MISSED OFFSET
	TArray<struct FReplayGroggyEventItem>              ReplayGroggyEventItems;                                   // 0x0630(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayGroggyEventsDone;                        // 0x0640(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData05[0xA0];                                      // 0x0650(0x00A0) MISSED OFFSET
	TArray<struct FReplayEtceteraEventItem>            ReplayEtceteraEventItems;                                 // 0x06F0(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayEtceteraEventsDone;                      // 0x0700(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData06[0x50];                                      // 0x0710(0x0050) MISSED OFFSET
	TArray<struct FTslReplayOvercast>                  TslReplayOvercastArr;                                     // 0x0760(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayOvercastEventsDone;                      // 0x0770(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData07[0x50];                                      // 0x0780(0x0050) MISSED OFFSET
	TArray<struct FTslReplayCustomFog>                 TslReplayCustomFogArr;                                    // 0x07D0(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayCustomFogEventsDone;                     // 0x07E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData08[0x50];                                      // 0x07F0(0x0050) MISSED OFFSET
	TArray<struct FReplayCameraEventItem>              ReplayCameraEventItems;                                   // 0x0840(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FReplayCameraEventItem>              CurDataSetReplayCameraEventItems;                         // 0x0850(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayCameraEventsDone;                        // 0x0860(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData09[0xA0];                                      // 0x0870(0x00A0) MISSED OFFSET
	TArray<struct FReplayRecordTargetEventItem>        ReplayRecordTargetEventItems;                             // 0x0910(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayRecordTargetEventsDone;                  // 0x0920(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      IsLoadRecordTargetEvent : 1;                              // 0x0930(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnablePlayHighlight : 1;                                 // 0x0931(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bChangeableHighlightBeginEndTime : 1;                     // 0x0932(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableHighlightExport : 1;                               // 0x0933(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableHighlightShortcut : 1;                             // 0x0934(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bHighlightPlaying : 1;                                    // 0x0935(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHighlightFadeOut : 1;                                    // 0x0936(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowHighlightKeyGuide : 1;                               // 0x0937(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowHighlightTopWidget : 1;                              // 0x0938(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSmoothNextEvent : 1;                                     // 0x0939(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShowLastSurvivorMatchResult : 1;                         // 0x093A(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRenderingForHighlightExport : 1;                         // 0x093B(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHighlightOnlyView : 1;                                   // 0x093C(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOneViewResult : 1;                                       // 0x093D(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHighlightFirstEvent : 1;                                 // 0x093E(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x1];                                       // 0x093F(0x0001) MISSED OFFSET
	struct FString                                     HighlightTargetName;                                      // 0x0940(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	int                                                HighlightEventTotalCount;                                 // 0x0950(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                HighlightEventCurrentNum;                                 // 0x0954(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                HighlightEventTimeBefore;                                 // 0x0958(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                HighlightEventTimeAfter;                                  // 0x095C(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TimeBackBeforeHighlight;                                  // 0x0960(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0964(0x0004) MISSED OFFSET
	struct FString                                     TimeBackTargetName;                                       // 0x0968(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	struct FTslKillcamMetadata                         HighlightMetadata;                                        // 0x0978(0x0098)
	int                                                HighlightIndex;                                           // 0x0A10(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CurrentEventIndexTimeInfo;                                // 0x0A14(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      IsHighlightIndexPlayable : 1;                             // 0x0A18(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      IsPlaybackHighlightMode : 1;                              // 0x0A19(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      IsActivateHighlight : 1;                                  // 0x0A1A(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x5];                                       // 0x0A1B(0x0005) MISSED OFFSET
	struct FString                                     HighlightLocalPlayerName;                                 // 0x0A20(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FString                                     HighlightLocalPlayerNetId;                                // 0x0A30(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FString                                     HighlightPlayerName;                                      // 0x0A40(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FString                                     HighlightPlayerNetId;                                     // 0x0A50(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	float                                              PercentageToValue;                                        // 0x0A60(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0A64(0x0004) MISSED OFFSET
	TArray<struct FReplayKillEventItem>                ReplayHighlightEventItems;                                // 0x0A68(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData14[0x10];                                      // 0x0A78(0x0010) MISSED OFFSET
	TArray<struct FReplayItem>                         ReplayItemList;                                           // 0x0A88(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData15[0x38];                                      // 0x0A98(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGetReplayListDone;                                      // 0x0AD0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGotoTimelineDone;                                       // 0x0AE0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRecordStarted;                                          // 0x0AF0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReplayProblem;                                          // 0x0B00(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownloadZippedReplayProgressDelegate;                   // 0x0B10(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownloadZippedReplayCompleteDelegate;                   // 0x0B20(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData16[0x28];                                      // 0x0B30(0x0028) MISSED OFFSET
	int                                                MaxReplaysForNullStreamer;                                // 0x0B58(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumReplaysForNullStreamer;                                // 0x0B5C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumReplaysToKeepForNullStreamer;                          // 0x0B60(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0B64(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKeepAndDeleteOldestReplaysDoneDelegate;                 // 0x0B68(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData18[0x10];                                      // 0x0B78(0x0010) MISSED OFFSET
	class UGameEventObserver*                          GameEventObserver;                                        // 0x0B88(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UGameEventFluentdAdapter*                    GameEventFluentdAdapter;                                  // 0x0B90(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData19[0xC8];                                      // 0x0B98(0x00C8) MISSED OFFSET
	struct FTslReplaySummary                           ReplaySummaryForPlayback;                                 // 0x0C60(0x0090) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FScriptMulticastDelegate                    OnGetReplaySummaryDone;                                   // 0x0CF0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      bIsStartedFromReplayListMap : 1;                          // 0x0D00(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x0D01(0x0007) MISSED OFFSET
	class ATslPlayerState*                             CachedDemoPlayerState;                                    // 0x0D08(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData21[0x180];                                     // 0x0D10(0x0180) MISSED OFFSET
	class UHighlightSession*                           HighlightSession;                                         // 0x0E90(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData22[0xD8];                                      // 0x0E98(0x00D8) MISSED OFFSET
	class UKakaoSessionClientChecker*                  KakaoSessionClientProcessChecker;                         // 0x0F70(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UFpsCountStatistics*                         FpsCountStatstics;                                        // 0x0F78(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData23[0x28];                                      // 0x0F80(0x0028) MISSED OFFSET
	TMap<int, struct FTeamInfo>                        TeamInfoMap;                                              // 0x0FA8(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	TMap<struct FString, struct FPlayerStatInfo>       PlayerStatInfoMap;                                        // 0x0FF8(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FRankingInfo>                        RankingInfos;                                             // 0x1048(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FPointInfo>                          PointInfos;                                               // 0x1058(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                KillPoint;                                                // 0x1068(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData24[0x55];                                      // 0x106C(0x0055) MISSED OFFSET
	unsigned char                                      bLoadedPersonalGameUserSettings : 1;                      // 0x10C1(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData25[0x1E];                                      // 0x10C2(0x001E) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSetOvercastWeights;                                     // 0x10E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetOvercastDurations;                                   // 0x10F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TArray<struct FString>                             PathWhitelistKeywords;                                    // 0x1100(0x0010) (CPF_ZeroConstructor, CPF_Config)
	float                                              MinValFov;                                                // 0x1110(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValFov;                                                // 0x1114(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofFocalRegion;                                     // 0x1118(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofFocalRegion;                                     // 0x111C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofFocalDistance;                                   // 0x1120(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofFocalDistance;                                   // 0x1124(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValBloomIntensity;                                     // 0x1128(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValBloomIntensity;                                     // 0x112C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValVignetteIntensity;                                  // 0x1130(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValVignetteIntensity;                                  // 0x1134(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValAngle;                                          // 0x1138(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValAngle;                                              // 0x113C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValAngle;                                              // 0x1140(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValColorGradingLUTIntensity;                           // 0x1144(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValColorGradingLUTIntensity;                           // 0x1148(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValDofNearTransitionRegion;                        // 0x114C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofNearTransitionRegion;                            // 0x1150(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofNearTransitionRegion;                            // 0x1154(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValDofFarTransitionRegion;                         // 0x1158(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofFarTransitionRegion;                             // 0x115C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofFarTransitionRegion;                             // 0x1160(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValDofBokehScale;                                  // 0x1164(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofBokehScale;                                      // 0x1168(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofBokehScale;                                      // 0x116C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValDofBokehMaxSize;                                // 0x1170(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofBokehMaxSize;                                    // 0x1174(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofBokehMaxSize;                                    // 0x1178(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValDofGaussianNearBlurSize;                        // 0x117C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofGaussianNearBlurSize;                            // 0x1180(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofGaussianNearBlurSize;                            // 0x1184(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultValDofGaussianFarBlurSize;                         // 0x1188(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinValDofGaussianFarBlurSize;                             // 0x118C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxValDofGaussianFarBlurSize;                             // 0x1190(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData26[0x1C];                                      // 0x1194(0x001C) MISSED OFFSET
	class URichPresenceManager*                        RichPresenceManager;                                      // 0x11B0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<TScriptInterface<class URichPresenceObserverInterface>> RichPresence;                                             // 0x11B8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     SelectedModeNameInLobby;                                  // 0x11C8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class ALevelAttribute*                             LevelAttributeForReplaying;                               // 0x11D8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FString                                     LogServerUrl;                                             // 0x11E0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	float                                              LoggingProbability;                                       // 0x11F0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreSuccessLog : 1;                                    // 0x11F4(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData27[0x3];                                       // 0x11F5(0x0003) MISSED OFFSET
	int                                                LogCooltimeForSameFunction;                               // 0x11F8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData28[0x4];                                       // 0x11FC(0x0004) MISSED OFFSET
	TArray<struct FQualityLevelInfo>                   CacheQualityLevelInfo;                                    // 0x1200(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslGameInstance");
		return ptr;
	}


	bool UseLobbyWidget();
	bool UpdateReplayShouldKeepBP(const struct FString& RegionOrLocal, const struct FString& SessionName, bool bShouldKeep);
	bool UpdateReplayAllDeadOrWinBP(const struct FString& RegionOrLocal, const struct FString& SessionName, bool bAllDeadOrWin);
	bool UnPause();
	void StopStat(TEnumAsByte<EServerStatType> StatType);
	void StopIfReplaying();
	bool StartStat(TEnumAsByte<EServerStatType> StatType);
	void SortByTimeReplayCameraEventItems();
	void SortByTimeCurDataSetReplayCameraEventItems();
	bool ShowYesNoMessage(const struct FString& strTitle, const struct FString& strMsg);
	void ShowSystemMessage(const struct FString& strTitle, const struct FString& strMsg);
	bool ShowOkCancelMessage(const struct FString& strTitle, const struct FString& strMsg);
	void ShowLoadingScreen();
	void ShowLastSurvivorMatchResult();
	void SetStartedFromReplayListMap(bool bSet);
	void SetReplayTimeSpeed(float TimeSpeed);
	void SetReplayBusy(bool bBusy);
	void SetOvercastWeightsDelegate__DelegateSignature(float fNoChange, float fChangeToRain, float fChangeToFog);
	void SetOvercastWeights(float fNoChange, float fChangeToRain, float fChangeToFog);
	void SetOvercastDurationsDelegate__DelegateSignature(float FMin, float FMax);
	void SetOvercastDurations(float FMin, float FMax);
	void SetMaxReplaysForNullStreamer();
	void SetIsChangedSpectateCharacter(bool force);
	void SetHighlightArray();
	void SetForceTickWhenPaused(bool ForceTick);
	void SaveReplayThumbnailImage(const struct FString& path, const struct FString& Filename);
	void SaveReplayCameraEvent();
	void ResetReplayStreamer();
	void RequestReplayARecordTargetEvent(const struct FString& EventID);
	void RequestReplayAKillEvent(const struct FString& EventID);
	void RequestReplayAGroggyEvent(const struct FString& EventID);
	void RequestReplayAEtceteraEvent(const struct FString& EventID);
	void ReplayProblemDelegate__DelegateSignature();
	void ReplayJumpTimeInSecondsAndPause(float TimeInSeconds);
	void ReplayJumpTimeInSeconds(float TimeInSeconds);
	void ReplayJumpInt(int second);
	void ReplayJump(float TimelinePercentage);
	void RemoveAllRecordTargetEvents();
	void RemoveAllOvercastEvents();
	void RemoveAllKillEvents();
	void RemoveAllGroggyEvents();
	void RemoveAllEventGroup(const struct FString& Group);
	void RemoveAllEtceteraEvents();
	void RemoveAllCustomFogEvents();
	void RemoveAllCameraEvents();
	int RecordTimeReplayCameraEventItemsEx(float GlobalStartSec, float GlobalEndSec);
	int RecordTimeReplayCameraEventItems();
	void RecordStartedDelegate__DelegateSignature();
	void RecordOvercastEvent(float inInitDemoTime, const struct FString& inWeather, float inInitElapsedTime, float inSaturateTime, float inBlendInTime, float inBlendOutTime, float inTimeMultiplier, float inThunderAngle, float inThunderDistance);
	int RecordDurationSkipCount(float GlobalStartSec, float GlobalEndSec);
	int RecordDurationKeyFrameCount(float GlobalStartSec, float GlobalEndSec);
	void RecordCustomFogEvent(float inDemoTime, float inFogFallOff, float inFogStartDistance, float inFogDensity);
	bool ReadyHighlight();
	void QuitApplication(bool bShowMessage);
	void PlayReplayCommand(const struct FString& RegionOrLocal, const struct FString& SessionName);
	void PlayReplayBPByRegionOrLocal(const struct FString& Region, const struct FString& SessionName);
	void PlayReplayBP(const struct FString& SessionName);
	bool PlaybackHighlight();
	bool Pause();
	float ParseReplaySpeedStrToFloat(const struct FString& ReplaySpeed);
	void OnSteamNetworkDisconnectedTimeExpired();
	void OnPressedPopupSignOut();
	void OnPressedPopupConfirmInvitePS4();
	void OnPressedPopupConfirmInvite();
	void OnPressedPopupCommon();
	void KeepMaxReplaysAndDeleteOldestReplaysForNullStreamer();
	void KeepAndDeleteOldestReplaysForNullStreamer(int nReplaysToKeep);
	void KeepAndDeleteOldestReplaysDoneDelegate__DelegateSignature(int nRemains);
	void JumpTimelineInHighlightMode(float Percentage);
	bool IsShowLastSurvivorMatchResult();
	bool IsReplayJumping();
	bool IsReplaying();
	bool IsReplayError();
	bool IsReplayEditable();
	bool IsRecording();
	bool IsPlayingKillcam();
	bool IsPlatform_PS4();
	bool IsPaused();
	bool IsOutsideKeyFrame(float InMilliSeconds);
	bool IsLoadedForReplayExport();
	bool IsLive();
	bool IsLevelLoaded();
	bool IsLastHighlightEventAndNoZero();
	bool IsKillcamPlayback();
	bool IsInPlayingState();
	bool IsHighlightPlaying();
	bool IsHighlightFadeOut();
	bool IsEnterButton_Facebutton_Bottom();
	bool IsEndHighlightCurrnetEvent();
	void HideLastSurvivorMatchResult();
	void GotoTimelineDoneDelegate__DelegateSignature();
	void GotoReplayList();
	void GotoEndOfReplayTimelineBP();
	int GetUnderFpsCount(int Fps, int DuringSeconds);
	struct FString GetStartParameterStringValue(const struct FString& Key, const struct FString& NotFoundValue);
	struct FTslStartParameter GetStartParameter();
	bool GetStartedFromReplayListMap();
	int GetServerMaxTickRate(int DefaultMaxTickRate);
	float GetReplayTotalTime();
	float GetReplayTimeSpeed();
	void GetReplaySummaryDoneDelegate__DelegateSignature(const struct FTslReplaySummary& aTslReplaySummary);
	void GetReplaySummary(const struct FString& RegionOrLocal, const struct FString& SessionName);
	void GetReplayListLocal(int PageIndex, int PageSize);
	void GetReplayListDoneDelegate__DelegateSignature();
	void GetReplayListByRegionOrLocal(const struct FString& RegionOrLocal, int PageIndex, int PageSize, int InReplayVer);
	void GetReplayList();
	void GetReplayKill__DelegateSignature();
	struct FString GetReplayEventPath();
	float GetReplayCurrentTime();
	float GetReplayChunkSizeInSeonds();
	bool GetReplayBusy();
	struct FTslPlayerStateSummary GetRecordUserFromReplaySummary(const struct FTslReplaySummary& inReplaySummary);
	TArray<struct FTslPlayerStateSummary> GetRecorderTeamMembersFromReplaySummary(const struct FTslReplaySummary& inReplaySummary);
	int GetNumTotalReplays();
	void GetNumReplaysForNullStreamer();
	int GetMinFps(int DuringSeconds);
	int GetMaxFps(int DuringSeconds);
	class ALevelAttribute* GetLevelAttributeForReplaying();
	class UGameEventObserver* GetGameEventObserver();
	float GetDemoDiskFreeSpace();
	struct FName GetCurrentGameState();
	bool GetAvailableTimeKeyFrames(float BeginTime, float EndTime, TArray<float>* InArr);
	bool GetAvailableTimeHighlightEvents(TArray<float>* InArr);
	class ATslCharacter* FindRecorderCharacterForPlayback(TArray<class ATslCharacter*> ReplicatedCharacterList, bool bIsClip, const struct FString& ClipTargetUserId, const struct FString& ClipTargetUserNickName);
	bool FindRecentReplayOvercast(const struct FString& inWeather, int* CurrentIndex, struct FTslReplayOvercast* foundOvercast);
	bool FindRecentReplayCustomFog(int* CurrentIndex, struct FTslReplayCustomFog* foundCustomFog);
	bool FindNextReplayCustomFog(int inCurrentIndex, int* CurrentIndex, struct FTslReplayCustomFog* foundCustomFog);
	bool FindNewReplayOvercast(int inCurrentIndex, int* CurrentIndex, struct FTslReplayOvercast* foundOvercast);
	bool FindNewReplayCustomFog(int inCurrentIndex, int* CurrentIndex, struct FTslReplayCustomFog* foundCustomFog);
	void FindCharactersForReplayExport();
	void EnumerateReplayRecordTargetEvents();
	void EnumerateReplayOvercastEventsDoneDelegate__DelegateSignature();
	void EnumerateReplayOvercastEvents();
	void EnumerateReplayKillEvents(int Time);
	void EnumerateReplayGroggyEvents(int Time);
	void EnumerateReplayEtceteraEvents(int Time);
	void EnumerateReplayCustomFogEventsDoneDelegate__DelegateSignature();
	void EnumerateReplayCustomFogEvents();
	void EnumerateReplayCameraEvents();
	void EndHighlightPlay();
	void DownloadZippedReplayProgressDelegate__DelegateSignature(const struct FString& strFileName, int nReceived, int nTotal);
	void DownloadZippedReplayCompleteDelegate__DelegateSignature(const struct FString& strFullPath, const struct FString& strDirToExtract);
	bool DownloadZippedReplayBPByRegion(const struct FString& Region, const struct FString& SessionName, int nTotalSize);
	bool DeleteZippedReplayBP(const struct FString& ArchiveName);
	bool DeleteReplayBPByRegionOrLocal(const struct FString& RegionOrLocal, const struct FString& SessionName);
	void CreateReplayHighlightEventByTargetName(const struct FString& TargetName);
	bool CancelDownloadingZippedReplay(const struct FString& SessionName);
	void BPStopRecordingKillcam(bool force);
	void BeginHighlightPlay();
	void AddReplayCameraEventAtTime(struct FReplayCameraEventItem* InputItem);
	void AddReplayCameraEvent(int DataSetNumber, bool IsSkip, const struct FString& Type, float FOV, const struct FVector& Pos, const struct FRotator& Rot, const struct FString& TargetCharacterID, const struct FString& InterpolationType, const struct FString& CameraDirection, const struct FString& ReplaySpeed);
	void AddPlayerStateToReplaySummary(class ATslPlayerState* pPlayerState, struct FTslReplaySummary* inReplaySummary);
};


// Class TslGame.GameEventObserver
// 0x00B8 (0x00E0 - 0x0028)
class UGameEventObserver : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnClientStateToPlaying;                                   // 0x0028(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnClientStateOutofPlaying;                                // 0x0038(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnDeathCamFinished;                                       // 0x0048(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	float                                              PriodicReportIntervalSec;                                 // 0x0058(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_Config, CPF_IsPlainOldData)
	float                                              PriodicFrequentReportIntervalSec;                         // 0x005C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0060(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GameEventObserver");
		return ptr;
	}

};


// Class TslGame.GamePadInputAixsComponent
// 0x0030 (0x0210 - 0x01E0)
class UGamePadInputAixsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x01E0(0x000C) MISSED OFFSET
	float                                              YawAccelPct;                                              // 0x01EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchAccelPct;                                            // 0x01F0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastYawAccelDir;                                          // 0x01F4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastPitchAccelDir;                                        // 0x01F8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastYawInput;                                             // 0x01FC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastPitchInput;                                           // 0x0200(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0204(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GamePadInputAixsComponent");
		return ptr;
	}

};


// Class TslGame.GameStateListenerComponent
// 0x0020 (0x0200 - 0x01E0)
class UGameStateListenerComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnMatchStateChange;                                       // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameModeEvent;                                          // 0x01F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GameStateListenerComponent");
		return ptr;
	}

};


// Class TslGame.TslPerformanceTestComponent
// 0x0000 (0x01E0 - 0x01E0)
class UTslPerformanceTestComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPerformanceTestComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class TslGame.BattleRoyaleModeController
// 0x0150 (0x0650 - 0x0500)
class ABattleRoyaleModeController : public AModeController
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0500(0x0070) MISSED OFFSET
	TArray<struct FBattleRoyalePoisionGasData>         BattleRoyalePoisonGasDataArray;                           // 0x0570(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              BattleRoyaleZoneTypeCheckTime;                            // 0x0580(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0584(0x0004) MISSED OFFSET
	TArray<float>                                      PoisonWarningTime;                                        // 0x0588(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              WaterVolumeRayHeight;                                     // 0x0598(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x059C(0x0004) MISSED OFFSET
	struct FString                                     TestMapDataName;                                          // 0x05A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	int                                                NextPoisonGasIndex;                                       // 0x05B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x05B4(0x0014) MISSED OFFSET
	TArray<class ATslBlueZoneCreateArea*>              BlueZoneCreateAreas;                                      // 0x05C8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATslPhysicsVolume*>                   OceanPhysicsVolume;                                       // 0x05D8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATslPassBluezoneArea*>                PassBluezoneAreas;                                        // 0x05E8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATslPassBlueZoneAreaRectangle*>       PassBluezoneAreasRectangle;                               // 0x05F8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x48];                                      // 0x0608(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BattleRoyaleModeController");
		return ptr;
	}


	void UpdateGamePhase();
	bool SetNextGasInBlackboard();
	void SetNeedUpdateGasData(bool InbNeedUpdateGasDate);
	bool LastCircleAlgorithm();
	bool IsPauseBlueZone();
	void InitRadius();
	float GetPoisonGasDamagePerSecond(float CharaterToCenterDistance, float SafetyZoneRadius, float PoisonGasWarningRadius);
	bool GetNeedUpdateGasData();
	int GetMaxPhaseCount();
};


// Class TslGame.TslBpRewardRuleTable
// 0x0000 (0x0080 - 0x0080)
class UTslBpRewardRuleTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBpRewardRuleTable");
		return ptr;
	}

};


// Class TslGame.ThingSpawnProcessor
// 0x0010 (0x0038 - 0x0028)
class UThingSpawnProcessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ThingSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.ItemSpawnProcessor
// 0x0010 (0x0038 - 0x0028)
class UItemSpawnProcessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.ModePreset
// 0x0050 (0x0078 - 0x0028)
class UModePreset : public UObject
{
public:
	TArray<struct FModePresetsPerMap>                  ModePresets;                                              // 0x0028(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FString                                     MapName;                                                  // 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0048(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ModePreset");
		return ptr;
	}

};


// Class TslGame.TslXpRewardRuleAsset
// 0x0018 (0x0048 - 0x0030)
class UTslXpRewardRuleAsset : public UDataAsset
{
public:
	float                                              OverallGain;                                              // 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SurvivalTimeGain;                                         // 0x0034(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              TeamSpectatingTimeGain;                                   // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              UnitTimeInSeconds;                                        // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              XpPerUnitTime;                                            // 0x0040(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxDailyXp;                                               // 0x0044(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslXpRewardRuleAsset");
		return ptr;
	}

};


// Class TslGame.StatTrakManagerComponent
// 0x0020 (0x0200 - 0x01E0)
class UStatTrakManagerComponent : public UActorComponent
{
public:
	TArray<struct FStatTrakDataPair>                   StatTrakDataPairs;                                        // 0x01E0(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	struct FScriptMulticastDelegate                    OnStatTrakDataUpdated;                                    // 0x01F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StatTrakManagerComponent");
		return ptr;
	}


	void OnRep_StatTrakDataPairs();
};


// Class TslGame.TableGeneralItemSpawner
// 0x00D8 (0x0100 - 0x0028)
class UTableGeneralItemSpawner : public UGeneralItemSpawner
{
public:
	TArray<struct FGeneralItemSpawnCount>              SpawnCountByTeamPlayers;                                  // 0x0028(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UDataTable*                                  RawItemSpawnDataTable;                                    // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UDataTable*                                  RawItemSpawnTogetherDataTable;                            // 0x0040(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FGeneralItemSpawnProb>               SpawnProbArray;                                           // 0x0048(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0058(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TableGeneralItemSpawner");
		return ptr;
	}

};


// Class TslGame.ModePresetItemSpawner
// 0x0018 (0x0118 - 0x0100)
class UModePresetItemSpawner : public UTableGeneralItemSpawner
{
public:
	struct FString                                     PresetSpawnTableKey;                                      // 0x0100(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ModePresetItemSpawner");
		return ptr;
	}

};


// Class TslGame.GroggyDamageCalculator
// 0x0000 (0x0028 - 0x0028)
class UGroggyDamageCalculator : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.GroggyDamageCalculator");
		return ptr;
	}

};


// Class TslGame.StaticGroggyDamageCalculator
// 0x0008 (0x0030 - 0x0028)
class UStaticGroggyDamageCalculator : public UGroggyDamageCalculator
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StaticGroggyDamageCalculator");
		return ptr;
	}

};


// Class TslGame.HighlightSession
// 0x0078 (0x00A0 - 0x0028)
class UHighlightSession : public UObject
{
public:
	struct FHighlightRecordConfig                      Config_Kill;                                              // 0x0028(0x000C) (CPF_Config)
	struct FHighlightRecordConfig                      Config_KillGroggy;                                        // 0x0034(0x000C) (CPF_Config)
	struct FHighlightRecordConfig                      Config_Die;                                               // 0x0040(0x000C) (CPF_Config)
	struct FHighlightRecordConfig                      Config_DieGroggy;                                         // 0x004C(0x000C) (CPF_Config)
	struct FHighlightRecordConfig                      Config_EndMatch;                                          // 0x0058(0x000C) (CPF_Config)
	struct FHighlightRecordConfig                      Config_DeathCam;                                          // 0x0064(0x000C) (CPF_Config)
	class UTslGameInstance*                            TslGameInstance;                                          // 0x0070(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0078(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.HighlightSession");
		return ptr;
	}


	void RecordRemainEvents();
	void MatchEnded();
	void DeathCamFinished(float DeathCamRunningTime);
};


// Class TslGame.InteractionComponent
// 0x01C0 (0x03A0 - 0x01E0)
class UInteractionComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01E0(0x0010) MISSED OFFSET
	float                                              MaxInteractableDistance;                                  // 0x01F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01F4(0x0004) MISSED OFFSET
	struct FText                                       InteractionVerb;                                          // 0x01F8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FText                                       InteractiveObjectName;                                    // 0x0210(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FCastConfig                                 CastConfig;                                               // 0x0228(0x0048) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	unsigned char                                      bUseTraceCheck : 1;                                       // 0x0270(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0271(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInteractBy;                                             // 0x0278(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClientOnInteractBy;                                       // 0x0288(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData03[0x100];                                     // 0x0298(0x0100) MISSED OFFSET
	class ATslCharacter*                               CurrentlyInteractingActor;                                // 0x0398(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.InteractionComponent");
		return ptr;
	}


	struct FText GetInteractiveObjectName();
	struct FText GetInteractionVerb();
	bool AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.CharacterInteractionComponent
// 0x0050 (0x03F0 - 0x03A0)
class UCharacterInteractionComponent : public UInteractionComponent
{
public:
	struct FCastConfig                                 AlternativeCastConfig;                                    // 0x03A0(0x0048) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	class UClass*                                      InstantRevivalKitClass;                                   // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CharacterInteractionComponent");
		return ptr;
	}

};


// Class TslGame.DoublePhaseInteractionComponent
// 0x00D0 (0x0470 - 0x03A0)
class UDoublePhaseInteractionComponent : public UInteractionComponent
{
public:
	struct FText                                       FirstInteractionVerb;                                     // 0x03A0(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FText                                       FirstInteractiveObjectName;                               // 0x03B8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FText                                       SecondInteractionVerb;                                    // 0x03D0(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FText                                       SecondInteractiveObjectName;                              // 0x03E8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnSecondInteractBy;                                       // 0x0400(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClientOnSecondInteractBy;                                 // 0x0410(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0420(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DoublePhaseInteractionComponent");
		return ptr;
	}

};


// Class TslGame.DroppedItemActorComponent
// 0x0020 (0x03C0 - 0x03A0)
class UDroppedItemActorComponent : public UInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedItemActorComponent");
		return ptr;
	}


	struct FText GetInteractiveObjectName();
	struct FText GetInteractionVerb();
	bool AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.OnceInteractionComponent
// 0x0010 (0x03B0 - 0x03A0)
class UOnceInteractionComponent : public UInteractionComponent
{
public:
	TArray<struct FName>                               CharacterHistory;                                         // 0x03A0(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.OnceInteractionComponent");
		return ptr;
	}

};


// Class TslGame.InteractorComponent
// 0x0000 (0x01E0 - 0x01E0)
class UInteractorComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.InteractorComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class TslGame.AmmoItem
// 0x0010 (0x0258 - 0x0248)
class UAmmoItem : public UItem
{
public:
	class UTexture*                                    AmmoIcon;                                                 // 0x0248(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AmmoIconRatio;                                            // 0x0250(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AmmoItem");
		return ptr;
	}

};


// Class TslGame.CastableItem
// 0x0058 (0x02A0 - 0x0248)
class UCastableItem : public UItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0248(0x0008) MISSED OFFSET
	struct FCastConfig                                 CastConfig;                                               // 0x0250(0x0048) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bCanUseInWater : 1;                                       // 0x0298(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0299(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.CastableItem.CastableItemType

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CastableItem");
		return ptr;
	}

};


// Class TslGame.EquipmentRepairKitItem
// 0x0008 (0x02A8 - 0x02A0)
class UEquipmentRepairKitItem : public UCastableItem
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x02A0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.EquipmentRepairKitItem.EquipSlot
	unsigned char                                      UnknownData01[0x3];                                       // 0x02A1(0x0003) MISSED OFFSET
	float                                              RepairAmount;                                             // 0x02A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.EquipmentRepairKitItem");
		return ptr;
	}

};


// Class TslGame.HealItem
// 0x0000 (0x02A0 - 0x02A0)
class UHealItem : public UCastableItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.HealItem");
		return ptr;
	}

};


// Class TslGame.HealOverTimeItem
// 0x0008 (0x02A8 - 0x02A0)
class UHealOverTimeItem : public UHealItem
{
public:
	class UClass*                                      HealOverTimeBuffClass;                                    // 0x02A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.HealOverTimeItem");
		return ptr;
	}

};


// Class TslGame.InstantHealItem
// 0x0008 (0x02A8 - 0x02A0)
class UInstantHealItem : public UHealItem
{
public:
	float                                              HealLimit;                                                // 0x02A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.InstantHealItem");
		return ptr;
	}

};


// Class TslGame.MagneticInductorItem
// 0x0000 (0x02A0 - 0x02A0)
class UMagneticInductorItem : public UCastableItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MagneticInductorItem");
		return ptr;
	}

};


// Class TslGame.VehicleRepairKitItem
// 0x0008 (0x02A8 - 0x02A0)
class UVehicleRepairKitItem : public UCastableItem
{
public:
	float                                              RepairAmount;                                             // 0x02A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleRepairKitItem");
		return ptr;
	}

};


// Class TslGame.BaseWeaponItem
// 0x0018 (0x0368 - 0x0350)
class UBaseWeaponItem : public UEquipableItem
{
public:
	class UClass*                                      WeaponType;                                               // 0x0350(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       WeaponTag;                                                // 0x0358(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FReplicatedMasteryItem                      MasteryItem;                                              // 0x0360(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BaseWeaponItem");
		return ptr;
	}

};


// Class TslGame.ThrowableItem
// 0x0010 (0x0378 - 0x0368)
class UThrowableItem : public UBaseWeaponItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	class ATslWeapon*                                  EquippedWeapon;                                           // 0x0370(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ThrowableItem");
		return ptr;
	}


	class ATslWeapon* GetEquippedWeapon();
	class ATslWeapon* GetDefaultWeaponObject();
};


// Class TslGame.WeaponItem
// 0x0060 (0x03C8 - 0x0368)
class UWeaponItem : public UBaseWeaponItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	int                                                AmmoCount;                                                // 0x0370(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                AmmoPerClip;                                              // 0x0374(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FWeaponAttachmentTagData>            AttachmentTagData;                                        // 0x0378(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	int                                                ForcedPrimarySlotIndex;                                   // 0x0388(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x038C(0x0004) MISSED OFFSET
	TArray<class UAttachableItem*>                     AttachedItems;                                            // 0x0390(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData02[0x1];                                       // 0x03A0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.WeaponItem.firingMode
	unsigned char                                      UnknownData03[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET
	class ATslWeapon*                                  EquippedWeapon;                                           // 0x03A8(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAkAudioEvent*                               DropAllAttachmentsSoundAk;                                // 0x03B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               InventoryPutAllAttachmentsSoundAk;                        // 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               DropAndInventoryPutAttachmentsSoundAk;                    // 0x03C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponItem");
		return ptr;
	}


	void SetFiringMode();
	bool IsAttachable(class UAttachableItem* Item);
	bool HasAttachmentSlot();
	void GetFiringMode();
	class ATslWeapon* GetEquippedWeapon();
	class ATslWeapon* GetDefaultWeaponObject();
	class UAttachableItem* GetAttachedItem();
	int GetAttachableItemCount();
	TArray<class UAttachableItem*> GetAllAttachedItems();
	class UAttachableItem* DetachItem();
	bool AttachItem(class UAttachableItem* Item);
};


// Class TslGame.ShieldItem
// 0x0008 (0x03D0 - 0x03C8)
class UShieldItem : public UWeaponItem
{
public:
	int                                                DebuffChargesCount;                                       // 0x03C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ShieldItem");
		return ptr;
	}

};


// Class TslGame.CustomEquipableItem
// 0x0100 (0x0450 - 0x0350)
class UCustomEquipableItem : public UEquipableItem
{
public:
	int                                                ItemLevel;                                                // 0x0350(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0354(0x000C) MISSED OFFSET
	struct FTransform                                  SlotOffset_Primary;                                       // 0x0360(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  SlotOffset_Secondary;                                     // 0x0390(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  SlotOffset_SideArm;                                       // 0x03C0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  SlotOffset_Melee;                                         // 0x03F0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  SlotOffset_Thrown;                                        // 0x0420(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CustomEquipableItem");
		return ptr;
	}


	struct FTransform GetOffset_Thrown();
	struct FTransform GetOffset_SideArm();
	struct FTransform GetOffset_Secondary();
	struct FTransform GetOffset_Primary();
	struct FTransform GetOffset_Melee();
	int GetItemLevel();
};


// Class TslGame.RandomlyGeneratableItem
// 0x0068 (0x02B0 - 0x0248)
class URandomlyGeneratableItem : public UItem
{
public:
	struct FString                                     RandomExpression;                                         // 0x0248(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bOpenByKey : 1;                                           // 0x0258(0x0001) (CPF_Edit)
	unsigned char                                      bOpenByPoint : 1;                                         // 0x0258(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	TAssetPtr<class UClass>                            OpenKeyItem;                                              // 0x0260(0x0020) (CPF_Edit)
	int                                                OpenKeyItemCount;                                         // 0x0280(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PointOpenPrice;                                           // 0x0284(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ExchangeBundleId;                                         // 0x0288(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x028C(0x0004) MISSED OFFSET
	TArray<struct FLobbyItemBundle>                    BundleList;                                               // 0x0290(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    ReferenceItems;                                           // 0x02A0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.RandomlyGeneratableItem");
		return ptr;
	}

};


// Class TslGame.UseByPickupItem
// 0x0000 (0x0248 - 0x0248)
class UUseByPickupItem : public UItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.UseByPickupItem");
		return ptr;
	}


	bool UseBy(class ATslCharacter* Character);
	bool PickUpBy(class ATslCharacter* Character, const struct FName& TargetContainer, const struct FString& Options);
	void OnRepStackCount(int OldStackCount);
	bool IsWeapon();
	bool IsToy();
	bool IsToolTipIconAsyncLoaded();
	bool IsPackageItem();
	bool IsIconAsyncLoaded();
	bool IsEquipable();
	bool IsCastableItem();
	bool IsAttachment();
	class UTexture* GetIconTexture();
};


// Class TslGame.SpawnTableItemSpawnProcessor
// 0x0F38 (0x0F70 - 0x0038)
class USpawnTableItemSpawnProcessor : public UItemSpawnProcessor
{
public:
	TArray<struct FItemSpotGroupTypeProperty>          RawSpotGroupProperties;                                   // 0x0038(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UDataTable*                                  RawItemSpawnDataTable;                                    // 0x0048(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UDataTable*                                  RawItemSpawnTogetherDataTable;                            // 0x0050(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0058(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.SpawnTableItemSpawnProcessor.ItemSpawnType
	unsigned char                                      bOverrideDataTableByModePreset : 1;                       // 0x0059(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xEBE];                                     // 0x005A(0x0EBE) MISSED OFFSET
	unsigned char                                      bUseActorSpawn : 1;                                       // 0x0F18(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x57];                                      // 0x0F19(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SpawnTableItemSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.ItemSpot
// 0x0008 (0x03F0 - 0x03E8)
class AItemSpot : public AActor
{
public:
	class UItemSpotGroupComponent*                     SpotGroupComponent;                                       // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemSpot");
		return ptr;
	}

};


// Class TslGame.ItemSpotComponent
// 0x0010 (0x0490 - 0x0480)
class UItemSpotComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0480(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.ItemSpotComponent.ItemSpotType
	unsigned char                                      bCheckComplexCollision : 1;                               // 0x0481(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0482(0x0002) MISSED OFFSET
	float                                              RandomSpawnRadius;                                        // 0x0484(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0488(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemSpotComponent");
		return ptr;
	}

};


// Class TslGame.ItemSpotGroupComponent
// 0x0010 (0x0490 - 0x0480)
class UItemSpotGroupComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0480(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.ItemSpotGroupComponent.SpotGroupType
	unsigned char                                      UnknownData01[0xF];                                       // 0x0481(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemSpotGroupComponent");
		return ptr;
	}

};


// Class TslGame.KakaoSessionClientChecker
// 0x0028 (0x0050 - 0x0028)
class UKakaoSessionClientChecker : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.KakaoSessionClientChecker");
		return ptr;
	}

};


// Class TslGame.MapLocationZoomTable
// 0x0000 (0x0080 - 0x0080)
class UMapLocationZoomTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MapLocationZoomTable");
		return ptr;
	}

};


// Class TslGame.LevelAttribute
// 0x00C0 (0x04A8 - 0x03E8)
class ALevelAttribute : public AInfo
{
public:
	int                                                NumMapBlock;                                              // 0x03E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox2D                                      MapRect2D;                                                // 0x03EC(0x0014) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net)
	TAssetPtr<class UMaterialInterface>                MapImageMaterial;                                         // 0x0400(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FStringAssetReference                       TencentMapTexture;                                        // 0x0420(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	TArray<struct FMapLocationData>                    MapLocationNameTable;                                     // 0x0430(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TEnumAsByte<EClimate>                              Climate;                                                  // 0x0440(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0441(0x0007) MISSED OFFSET
	struct FStringAssetReference                       WeatherLevelForGI;                                        // 0x0448(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FStringAssetReference                       LandscapeMaterialForGI;                                   // 0x0458(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FVector                                     LandscapeOriginOffset;                                    // 0x0468(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	int                                                LandscapeTileCount;                                       // 0x0474(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LandscapeTileWidth;                                       // 0x0478(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideSplitLevelSettings : 1;                          // 0x047C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x047D(0x0003) MISSED OFFSET
	struct FBox2D                                      MapBox;                                                   // 0x0480(0x0014) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	int                                                MainSplitCount;                                           // 0x0494(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                GridMaxDepth;                                             // 0x0498(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumOfGrid;                                                // 0x049C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LevelAttribute");
		return ptr;
	}


	bool IsClimateCold();
};


// Class TslGame.LobbyItemBundleIdPublisher
// 0x0028 (0x0050 - 0x0028)
class ULobbyItemBundleIdPublisher : public UObject
{
public:
	struct FString                                     LobbyItemPath;                                            // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyItemBundleIdPublisher");
		return ptr;
	}

};


// Class TslGame.LobbyLink
// 0x00B0 (0x00D8 - 0x0028)
class ULobbyLink : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0028(0x00A8) MISSED OFFSET
	unsigned char                                      bResponsePrepareUsers : 1;                                // 0x00D0(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyLink");
		return ptr;
	}

};


// Class TslGame.LobbyParachute
// 0x0040 (0x0428 - 0x03E8)
class ALobbyParachute : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	class USkeletalMesh*                               ParachuteSK;                                              // 0x03F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x0400(0x0020) (CPF_Net, CPF_Transient)
	class USkinnableSkeletalMeshComponent*             ParachuteSKReference;                                     // 0x0420(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyParachute");
		return ptr;
	}


	void OnRep_ReplicatedSkinParam();
	void InitializeParachuteMesh();
};


// Class TslGame.TslLobbySceneDataTable
// 0x0000 (0x0080 - 0x0080)
class UTslLobbySceneDataTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslLobbySceneDataTable");
		return ptr;
	}

};


// Class TslGame.LobbySceneManagerComponent
// 0x0190 (0x0370 - 0x01E0)
class ULobbySceneManagerComponent : public UActorComponent
{
public:
	struct FString                                     CachedPreviousSceneName;                                  // 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UDataTable*                                  SceneDataTable;                                           // 0x01F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDataTable*                                  ViewModeSceneDataTable;                                   // 0x01F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDataTable*                                  SceneTravelDatatable;                                     // 0x0200(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       MainCameraTag;                                            // 0x0208(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       FirstSceneTravel;                                         // 0x0210(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       DefaultSceneTravel;                                       // 0x0218(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TMap<struct FString, class ACameraActor*>          CachedCameraActors;                                       // 0x0220(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0270(0x0050) MISSED OFFSET
	class ATslPostProcessEffect*                       MainMenuPPE;                                              // 0x02C0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              CachedDOFFarBlueSize;                                     // 0x02C8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET
	struct FString                                     CurrentSceneName;                                         // 0x02D0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class ATslBaseLobbySceneTravel*                    LobbySceneTravel;                                         // 0x02E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslBaseLobbySceneTravel*                    CameraMove;                                               // 0x02E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsInitScene : 1;                                         // 0x02F0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x02F1(0x000F) MISSED OFFSET
	struct FString                                     SaveCameraKey;                                            // 0x0300(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              LastCharacterCameraMoveTime;                              // 0x0310(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	TMap<uint32_t, unsigned char>                      OverrideCharacterVisibility;                              // 0x0318(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbySceneManagerComponent");
		return ptr;
	}


	void OnUpdateWhenSceneVisibility(const struct FTslLobbySceneDataPair& SceneDataPair);
	void OnUpdateScene_CameraMove(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void OnUpdateScene(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void OnFinishTravel_CameraMove(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void OnFinishTravel(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
};


// Class TslGame.LobbyWidget
// 0x0000 (0x0248 - 0x0248)
class ULobbyWidget : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyWidget");
		return ptr;
	}


	void UnregisterInputComponent();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void StopListeningForInputAction(const struct FName& ActionName, TEnumAsByte<EInputEvent> EventType);
	void StopListeningForAllInputActions();
	void StopAnimation(class UWidgetAnimation* InAnimation);
	void StopAllAnimations();
	void SetPositionInViewport(const struct FVector2D& Position, bool bRemoveDPIScale);
	void SetPlaybackSpeed(class UWidgetAnimation* InAnimation, float PlaybackSpeed);
	void SetPadding(const struct FMargin& InPadding);
	void SetOwningPlayer(class APlayerController* LocalPlayerController);
	void SetOwningLocalPlayer(class ULocalPlayer* LocalPlayer);
	void SetNumLoopsToPlay(class UWidgetAnimation* InAnimation, int NumLoopsToPlay);
	void SetInputActionPriority(int NewPriority);
	void SetInputActionBlocking(bool bShouldBlock);
	void SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void SetDesiredSizeInViewport(const struct FVector2D& Size);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetAnchorsInViewport(const struct FAnchors& Anchors);
	void SetAlignmentInViewport(const struct FVector2D& Alignment);
	void ReverseAnimation(class UWidgetAnimation* InAnimation);
	void RemoveFromViewport();
	void RegisterInputComponent();
	void PreConstruct(bool IsDesignTime);
	void PlaySound(class USoundBase* SoundToPlay);
	void PlayAnimationTo(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed);
	void PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed);
	float PauseAnimation(class UWidgetAnimation* InAnimation);
	struct FEventReply OnTouchStarted(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnTouchMoved(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnTouchGesture(const struct FGeometry& MyGeometry, const struct FPointerEvent& GestureEvent);
	struct FEventReply OnTouchEnded(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnPaint(struct FPaintContext* Context);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMotionDetected(const struct FGeometry& MyGeometry, const struct FMotionEvent& InMotionEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyChar(const struct FGeometry& MyGeometry, const struct FCharacterEvent& InCharacterEvent);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnControllerButtonReleased(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply OnControllerButtonPressed(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply OnControllerAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	void OnAnimationStarted(class UWidgetAnimation* Animation);
	void OnAnimationFinished(class UWidgetAnimation* Animation);
	struct FEventReply OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void ListenForInputAction(const struct FName& ActionName, TEnumAsByte<EInputEvent> EventType, bool bConsume, const struct FScriptDelegate& Callback);
	bool IsPlayingAnimation();
	bool IsListeningForInputAction(const struct FName& ActionName);
	bool IsInViewport();
	bool IsInteractable();
	bool IsAnyAnimationPlaying();
	bool IsAnimationPlaying(class UWidgetAnimation* InAnimation);
	class APawn* GetOwningPlayerPawn();
	class APlayerController* GetOwningPlayer();
	class ULocalPlayer* GetOwningLocalPlayer();
	bool GetIsVisible();
	float GetAnimationCurrentTime(class UWidgetAnimation* InAnimation);
	struct FAnchors GetAnchorsInViewport();
	struct FVector2D GetAlignmentInViewport();
	void FinishStoppedSequencePlayers();
	void Destruct();
	void Construct();
	void AddToViewport(int ZOrder);
	bool AddToPlayerScreen(int ZOrder);
};


// Class TslGame.MatchPreparer
// 0x0030 (0x0058 - 0x0028)
class UMatchPreparer : public UObject
{
public:
	int                                                WarmupTime;                                               // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                WarmupTimeInPIE;                                          // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MatchPreparer");
		return ptr;
	}


	void TimerGameStartCountDown();
};


// Class TslGame.AirborneMatchPreparer
// 0x0088 (0x00E0 - 0x0058)
class UAirborneMatchPreparer : public UMatchPreparer
{
public:
	TAssetPtr<class UClass>                            AircraftClass;                                            // 0x0058(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<class ATransportAircraftVehicle*>           Aircrafts;                                                // 0x0078(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATslCharacter*>                       RodeCharacters;                                           // 0x0088(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                AircraftCount;                                            // 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                AircraftCapacityOverride;                                 // 0x009C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x00A0(0x0014) MISSED OFFSET
	float                                              AircraftAltitude;                                         // 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              EndThetaDegree;                                           // 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AircraftIntervalDistance;                                 // 0x00BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AllowRangeByBlueZone;                                     // 0x00C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x00C4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AirborneMatchPreparer");
		return ptr;
	}


	void AllowDealDamage();
};


// Class TslGame.CenterSafetyZoneAirborneMatchPreparer
// 0x0020 (0x0100 - 0x00E0)
class UCenterSafetyZoneAirborneMatchPreparer : public UAirborneMatchPreparer
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00E0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CenterSafetyZoneAirborneMatchPreparer");
		return ptr;
	}


	void AllowDealDamage();
};


// Class TslGame.ESportsAirborneMatchPreparer
// 0x0000 (0x00E0 - 0x00E0)
class UESportsAirborneMatchPreparer : public UAirborneMatchPreparer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ESportsAirborneMatchPreparer");
		return ptr;
	}


	void AllowDealDamage();
};


// Class TslGame.NormalMatchPreparer
// 0x0018 (0x0070 - 0x0058)
class UNormalMatchPreparer : public UMatchPreparer
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0058(0x0010) MISSED OFFSET
	int                                                AvailablePlayerStartCount;                                // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NormalMatchPreparer");
		return ptr;
	}

};


// Class TslGame.MaterialMergeSettings
// 0x0080 (0x00A8 - 0x0028)
class UMaterialMergeSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0028(0x0058) MISSED OFFSET
	class UMaterial*                                   MasterMaterial;                                           // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterial*                                   MergedMaterial;                                           // 0x0088(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FMaterialMergerParameters>           ParameterList;                                            // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bUpdateParameterList : 1;                                 // 0x00A0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MaterialMergeSettings");
		return ptr;
	}

};


// Class TslGame.MissionManager
// 0x0018 (0x0400 - 0x03E8)
class AMissionManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<class ATslSpecificLocationMarker*>          SpecificLocationMarkers;                                  // 0x03F0(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MissionManager");
		return ptr;
	}


	void OnRedZoneStarted();
	void OnRedZoneEnded();
	void CheckIfDrivingInRedZone();
};


// Class TslGame.BattleRoyaleController_ESports
// 0x0000 (0x0650 - 0x0650)
class ABattleRoyaleController_ESports : public ABattleRoyaleModeController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BattleRoyaleController_ESports");
		return ptr;
	}


	void UpdateGamePhase();
	bool SetNextGasInBlackboard();
	void SetNeedUpdateGasData(bool InbNeedUpdateGasDate);
	bool LastCircleAlgorithm();
	bool IsPauseBlueZone();
	void InitRadius();
	float GetPoisonGasDamagePerSecond(float CharaterToCenterDistance, float SafetyZoneRadius, float PoisonGasWarningRadius);
	bool GetNeedUpdateGasData();
	int GetMaxPhaseCount();
};


// Class TslGame.BombingZoneController
// 0x0028 (0x0528 - 0x0500)
class ABombingZoneController : public AModeController
{
public:
	class UClass*                                      AircraftCombatClass;                                      // 0x0500(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   StartDelay;                                               // 0x0508(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlyingHeight;                                             // 0x0510(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   SpawnInterval;                                            // 0x0514(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WhiteZoneSpawnInnerRate;                                  // 0x051C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BombingZoneLifeTime;                                      // 0x0520(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.BombingZoneController");
		return ptr;
	}


	bool UpdateNextStartDelay();
	void SpawnCombatAircraft();
	bool SetNextBombingZoneInBlackboard();
	float GetStartDelay();
	float GetSpawnInterval();
};


// Class TslGame.RedZoneController
// 0x00E8 (0x05E8 - 0x0500)
class ARedZoneController : public AModeController
{
public:
	class UClass*                                      BombTemplateClass;                                        // 0x0500(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0508(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.RedZoneController.RedZoneGenerateType
	unsigned char                                      UnknownData01[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	float                                              StartDelay;                                               // 0x050C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   NextCreateRedZoneInterval;                                // 0x0510(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BombingDelay;                                             // 0x0518(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              OuterRadius;                                              // 0x051C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   LimitExceptExplosionRadius;                               // 0x0520(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ExceptExplosionRadius;                                    // 0x0528(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BombProjectileDelayTime;                                  // 0x052C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RedZoneDuration;                                          // 0x0530(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   BombingInterval;                                          // 0x0534(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RedZoneLifeTime;                                          // 0x053C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ReyStartHeight;                                           // 0x0540(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RedZoneRadiusOffsetRate;                                  // 0x0544(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FText                                       RedZoneStartText;                                         // 0x0548(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	int                                                RedZoneProjectileCount;                                   // 0x0560(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bFGSquircularMapping : 1;                                 // 0x0564(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0565(0x0003) MISSED OFFSET
	float                                              RayCheckAroundLength;                                     // 0x0568(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseRedZoneSizeRate : 1;                                  // 0x056C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x056D(0x0003) MISSED OFFSET
	class UCurveFloat*                                 RedZoneSizeRateCurve;                                     // 0x0570(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 BombingDelayRateCurve;                                    // 0x0578(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 BombingIntervalRateCurve;                                 // 0x0580(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 ProjectileCountCurve;                                     // 0x0588(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 RedZoneDurationRateCurve;                                 // 0x0590(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      BeginServerPaticleClass;                                  // 0x0598(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class ATslServerParticle*                          BeginServerPaticle;                                       // 0x05A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              BeginSoundDelay;                                          // 0x05A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x05AC(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData05[0x10];                                      // 0x05AC(0x0010) UNKNOWN PROPERTY: ArrayProperty TslGame.RedZoneController.RedZoneGenerateTypeByPhase
	float                                              WaterVolumeRayHeight;                                     // 0x05C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x14];                                      // 0x05C4(0x0014) MISSED OFFSET
	TArray<class ATslPhysicsVolume*>                   OceanPhysicsVolume;                                       // 0x05D8(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.RedZoneController");
		return ptr;
	}


	bool UpdateNextStartDelay();
	void SpawnBombProjectile();
	bool SetNextRedZoneInBlackboard();
	void OnRedZoneStart(const struct FVector& RedZonePosition);
	void OnRedZoneEnd();
	void OnBombingStart(const struct FVector& RedZonePosition);
	void OnBombing();
	bool IsRedZoneStopByCommand();
	void InitRedZoneSetting();
	float GetRandomBombingInterval();
};


// Class TslGame.LobbyCharacter
// 0x00F0 (0x0950 - 0x0860)
class ALobbyCharacter : public AMutableCharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0860(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHost;                                                   // 0x0868(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRankEmblem;                                             // 0x0878(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLobbySceneChanged;                                      // 0x0888(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	class UTslEmoteComponent*                          EmoteComponent;                                           // 0x0898(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x08A0(0x0040) MISSED OFFSET
	unsigned char                                      bHasJacket : 1;                                           // 0x08E0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bIsReady : 1;                                             // 0x08E0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bIsHost : 1;                                              // 0x08E0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bIsLogout : 1;                                            // 0x08E0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bIsInCustomizationScene : 1;                              // 0x08E0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x1];                                       // 0x08E1(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.LobbyCharacter.LobbyCharacterAnimationType
	unsigned char                                      UnknownData03[0x2];                                       // 0x08E2(0x0002) MISSED OFFSET
	struct FRotator                                    ToRotate;                                                 // 0x08E4(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x08F0(0x0028) MISSED OFFSET
	class UWeaponAnimInfoComponent*                    WeaponAnimInfoComponent;                                  // 0x0918(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FLobbyWeaponProcessor                       LobbyWeaponProcessor;                                     // 0x0920(0x0018) (CPF_Transient)
	TArray<struct FLobbyItem>                          SkinItemList;                                             // 0x0938(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bSimulateWind : 1;                                        // 0x0948(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyCharacter");
		return ptr;
	}


	void SetLobbyCharacterAnimationType();
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	bool IsLogout();
	bool IsInCustomizationScene();
	int GetSlotId();
	void GetRankType();
	struct FString GetNickName();
	struct FString GetNetId();
	void GetLobbyCharacterAnimationType();
};


// Class TslGame.TestMutableCharacter
// 0x0000 (0x0860 - 0x0860)
class ATestMutableCharacter : public AMutableCharacter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TestMutableCharacter");
		return ptr;
	}


	void UpdateAppearence();
	void OnRep_InstanceDescriptor();
	void GetGender();
};


// Class TslGame.TslBot
// 0x0000 (0x1F80 - 0x1F80)
class ATslBot : public ATslCharacter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBot");
		return ptr;
	}

};


// Class TslGame.NpcBTTask_ArmedWeapon
// 0x0008 (0x0078 - 0x0070)
class UNpcBTTask_ArmedWeapon : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0070(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.NpcBTTask_ArmedWeapon.Slot

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NpcBTTask_ArmedWeapon");
		return ptr;
	}

};


// Class TslGame.NpcBTTask_FireWeapon
// 0x0040 (0x00B0 - 0x0070)
class UNpcBTTask_FireWeapon : public UBTTaskNode
{
public:
	float                                              BurstTime_Min;                                            // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BurstTime_Max;                                            // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BurstInterval_Min;                                        // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BurstInterval_Max;                                        // 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                BurstNum_Min;                                             // 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                BurstNum_Max;                                             // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BurstTime;                                                // 0x0088(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              BurstInterval;                                            // 0x008C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                BurstNum;                                                 // 0x0090(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurBustCount;                                             // 0x0094(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UBehaviorTreeComponent*                      MyOwnerComp;                                              // 0x0098(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NpcBTTask_FireWeapon");
		return ptr;
	}


	void TimerBurstEnd();
	void TimerBreakEnd();
};


// Class TslGame.NpcBTTask_MeleeAttack
// 0x0050 (0x00C0 - 0x0070)
class UNpcBTTask_MeleeAttack : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0070(0x0040) MISSED OFFSET
	struct FTimerHandle                                TimerHandle;                                              // 0x00B0(0x0008) (CPF_Transient)
	class UBehaviorTreeComponent*                      MyOwnerComp;                                              // 0x00B8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NpcBTTask_MeleeAttack");
		return ptr;
	}

};


// Class TslGame.NpcBTTask_Move
// 0x0008 (0x00B8 - 0x00B0)
class UNpcBTTask_Move : public UBTTask_MoveTo
{
public:
	unsigned char                                      bIsAlwaysMoving : 1;                                      // 0x00B0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsLastMoveFailed : 1;                                    // 0x00B1(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NpcBTTask_Move");
		return ptr;
	}

};


// Class TslGame.NpcBTTask_SetWanderLocation
// 0x0008 (0x00A0 - 0x0098)
class UNpcBTTask_SetWanderLocation : public UBTTask_BlackboardBase
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0098(0x0004) UNKNOWN PROPERTY: EnumProperty TslGame.NpcBTTask_SetWanderLocation.PointSelectType
	float                                              Radius;                                                   // 0x009C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NpcBTTask_SetWanderLocation");
		return ptr;
	}

};


// Class TslGame.NpcDebugCameraController
// 0x0068 (0x07F8 - 0x0790)
class ANpcDebugCameraController : public ADebugCameraController
{
public:
	TArray<class APawn*>                               SelectedPawnArray;                                        // 0x0790(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class ATslPlayerController*                        LocalPC;                                                  // 0x07A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ANpcDebugCameraHud*                          MyNDCHud;                                                 // 0x07A8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bFollowCamera : 1;                                        // 0x07B0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07B1(0x0003) MISSED OFFSET
	struct FVector                                     FollowRelLocation;                                        // 0x07B4(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07C0(0x0004) UNKNOWN PROPERTY: EnumProperty TslGame.NpcDebugCameraController.PathDebugType
	struct FVector                                     PathStartLocation;                                        // 0x07C4(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     PathEndLocation;                                          // 0x07D0(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x07DC(0x0004) MISSED OFFSET
	TArray<struct FVector>                             PathResultArray;                                          // 0x07E0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                NpcCount;                                                 // 0x07F0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NpcDebugCameraController");
		return ptr;
	}

};


// Class TslGame.NpcDebugCameraHud
// 0x0020 (0x04F0 - 0x04D0)
class ANpcDebugCameraHud : public AHUD
{
public:
	int                                                DrawMovingInfoMaxCounter;                                 // 0x04D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MovingInfoDirScale;                                       // 0x04D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MovingInfoDirArrowSize;                                   // 0x04D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MovingInfoDirArrowThickness;                              // 0x04DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      MovingInfoDirArrowColor;                                  // 0x04E0(0x0004) (CPF_Edit, CPF_IsPlainOldData)
	float                                              MovingInfoSpeedScale;                                     // 0x04E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      MovingInfoSpeedArrowColor;                                // 0x04E8(0x0004) (CPF_Edit, CPF_IsPlainOldData)
	unsigned char                                      bDrawMovingPath : 1;                                      // 0x04EC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDrawAnimation : 1;                                       // 0x04ED(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NpcDebugCameraHud");
		return ptr;
	}

};


// Class TslGame.ObserverTagWidget
// 0x0098 (0x0450 - 0x03B8)
class UObserverTagWidget : public UUmgBaseWidget
{
public:
	float                                              OffsetZ;                                                  // 0x03B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GroggyOffsetZ;                                            // 0x03BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DeadOffsetZ;                                              // 0x03C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InVehicleOffsetZ;                                         // 0x03C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Distance;                                                 // 0x03C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceForName;                                          // 0x03CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceForIndicator;                                     // 0x03D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	class UCurveFloat*                                 WidgetCurve;                                              // 0x03D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 AnchorCurve;                                              // 0x03E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UTexture2D*>                          TeamBackgroundImages;                                     // 0x03E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	float                                              LifeSpanOnDeath;                                          // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UTexture2D*                                  DeathTexture;                                             // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DeathRatio;                                               // 0x0408(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x040C(0x0004) MISSED OFFSET
	class ATslCharacter*                               Character;                                                // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0418(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_SizeBox                    WeaponIconSizeBoxBinder;                                  // 0x0428(0x0028) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverTagWidget");
		return ptr;
	}


	void UpdateWeaponIcon_Imp(class USizeBox* weaponBox, class UImage* weaponImage);
	void UpdateWeaponIcon();
	void UpdatePlayerNameTag();
	void SetTeamNumber(int TeamNumber, const struct FLinearColor& TeamColor);
	void SetPlayerNameTag(const struct FName& PlayerName);
	void SetIndicatorColor(const struct FLinearColor& TeamColor);
	void SetCharacterIconPosition_UC(const struct FVector2D& Pos_UC, bool IsHidden);
	void OnUpdateWidgetTransform(class UWidget* CharacterNameWidget, class UWidget* IndicatorWidget, const struct FVector2D& Pos_UC, bool IsHidden);
	bool IsTeamMember();
	bool IsLastSpectatedCharacter();
	void HandleWeaponImagePrepass(class UWidget* Widget);
	int GetTeamId(class ATslCharacter* TslCharacter);
	struct FLinearColor GetTeamColor(class ATslCharacter* TslCharacter);
};


// Class TslGame.ObserverTagManagerBaseWidget
// 0x0078 (0x02C0 - 0x0248)
class UObserverTagManagerBaseWidget : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0248(0x0070) MISSED OFFSET
	class UClass*                                      WidgetTemplate;                                           // 0x02B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ObserverTagManagerBaseWidget");
		return ptr;
	}


	void UpdateReplicateCharacter();
	void RemoveReplicateCharacter(TArray<class ATslCharacter*> Characters);
	void AddReplicateCharacter(TArray<class ATslCharacter*> Characters);
};


// Class TslGame.ParachuteExperienceActor
// 0x0020 (0x0408 - 0x03E8)
class AParachuteExperienceActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UInteractionComponent*                       InteractionComponent;                                     // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              TeleportMaxXYRadius;                                      // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TeleportZDistance;                                        // 0x03FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      ParachuteItemClass;                                       // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ParachuteExperienceActor");
		return ptr;
	}


	void StartTrainingFor(class ATslCharacter* TargetCharacter);
	void OnInteract(class ATslCharacter* OtherCharacter);
	bool AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.PhysicalMaterialAudioEventData
// 0x0058 (0x0088 - 0x0030)
class UPhysicalMaterialAudioEventData : public UDataAsset
{
public:
	class UAkAudioEvent*                               DefaultEvent;                                             // 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TMap<class UPhysicalMaterial*, class UAkAudioEvent*> EventMappings;                                            // 0x0038(0x0050) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.PhysicalMaterialAudioEventData");
		return ptr;
	}

};


// Class TslGame.PracticeTarget
// 0x0118 (0x0500 - 0x03E8)
class APracticeTarget : public AActor
{
public:
	class USceneComponent*                             RootSceneComponent;                                       // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        TargetRootComponent;                                      // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        TargetMeshComponent;                                      // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AkComponent;                                              // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bMovingTarget : 1;                                        // 0x0408(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bRandomizeInitialMovingProperty : 1;                      // 0x0409(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x040A(0x0002) MISSED OFFSET
	struct FVector                                     MovingStartRelativeLocation;                              // 0x040C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     MovingEndRelativeLocation;                                // 0x0418(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MovementTimeSec;                                          // 0x0424(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     TargetForward;                                            // 0x0428(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     FlippingAxis;                                             // 0x0434(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bReverseFlippingDirection : 1;                            // 0x0440(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAutoFlippingTarget : 1;                                  // 0x0441(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bRandomizeInitialFlippingProperty : 1;                    // 0x0442(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0443(0x0001) MISSED OFFSET
	float                                              FlippingInitialDegree;                                    // 0x0444(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlippingAutoDegree;                                       // 0x0448(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlippingAutoTimeSec;                                      // 0x044C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlippingDegree;                                           // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlippingHitTimeSec;                                       // 0x0454(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 HitFlippingCurve;                                         // 0x0458(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               MovingAudio;                                              // 0x0460(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               FlippingAudio;                                            // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnHitDelegate;                                            // 0x0470(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangedMoveDirectionDelegate;                           // 0x0480(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData02[0x70];                                      // 0x0490(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.PracticeTarget");
		return ptr;
	}


	void OnTakenPointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
	void OnHit();
	void OnChangedMoveDirection();
	void ClientHit(const struct FVector& HitLocation, const struct FVector& HitDirection, class UPrimitiveComponent* Target);
};


// Class TslGame.ProneTrackManager
// 0x0078 (0x0460 - 0x03E8)
class AProneTrackManager : public AActor
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UPhysicalMaterial*>                   MaterialsToApply;                                         // 0x03F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0400(0x0003) MISSED OFFSET
	unsigned char                                      bUsePool : 1;                                             // 0x0403(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecalLifeSpan;                                            // 0x0404(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   DecalSizeForProne;                                        // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector2D                                   DecalSizeForDBNO;                                         // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              ProjectionSweep;                                          // 0x0418(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	class AInstancedDeferredDecalActor*                DecalActor;                                               // 0x0420(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              MinDistanceFromLastMark;                                  // 0x0428(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinRotationFromLastMark;                                  // 0x042C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimTransitionDelay;                                      // 0x0430(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0434(0x000C) MISSED OFFSET
	struct FVector4                                    BorderOpacityBiases;                                      // 0x0440(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	int                                                NumErrorCreatingDecalActor;                               // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	int                                                RenderPriority;                                           // 0x0454(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ProneTrackManager");
		return ptr;
	}

};


// Class TslGame.RandomDeferredDecal
// 0x0020 (0x0408 - 0x03E8)
class ARandomDeferredDecal : public AActor
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamicList;                              // 0x03E8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FName                                       ParameterName;                                            // 0x03F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FFloatInterval                              RandomRange;                                              // 0x0400(0x0008) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.RandomDeferredDecal");
		return ptr;
	}


	void UpdateDecal(const struct FTransform& Transform);
};


// Class TslGame.ReplayDemoActorChannel
// 0x0290 (0x0500 - 0x0270)
class UReplayDemoActorChannel : public UDemoActorChannel
{
public:
	unsigned char                                      UnknownData00[0x290];                                     // 0x0270(0x0290) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReplayDemoActorChannel");
		return ptr;
	}

};


// Class TslGame.ReplicatedRootComponent
// 0x0000 (0x0480 - 0x0480)
class UReplicatedRootComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReplicatedRootComponent");
		return ptr;
	}


	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetIsAttachmentReplicated(bool ShouldReplicate);
	void SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(bool bCallModify);
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class TslGame.ReplicationTrigger
// 0x0030 (0x0418 - 0x03E8)
class AReplicationTrigger : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<class AActor*>                              TargetReplicatedActors;                                   // 0x03F0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0400(0x0004) MISSED OFFSET
	int                                                ReplicationGroupCount;                                    // 0x0404(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0408(0x0004) MISSED OFFSET
	float                                              ReplicationGroupIntervalSeconds;                          // 0x040C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0410(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReplicationTrigger");
		return ptr;
	}


	void EnableReplicationGroup();
};


// Class TslGame.ReplicationTriggerManager
// 0x0028 (0x0410 - 0x03E8)
class AReplicationTriggerManager : public AInfo
{
public:
	TArray<class UClass*>                              TargetReplicatedActorClasses;                             // 0x03E8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate)
	float                                              TriggerRadius;                                            // 0x03F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	float                                              TriggerInterval;                                          // 0x03FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	TArray<class AReplicationTrigger*>                 Triggers;                                                 // 0x0400(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReplicationTriggerManager");
		return ptr;
	}

};


// Class TslGame.ReporterManager
// 0x0088 (0x00B0 - 0x0028)
class UReporterManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x0028(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ReporterManager");
		return ptr;
	}

};


// Class TslGame.RewardData
// 0x0028 (0x0058 - 0x0030)
class URewardData : public UDataAsset
{
public:
	float                                              DefaultScoreMultiplierByDamage;                           // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultScoreMultiplierByKill;                             // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<float>                                      ScoreByReverseRanking;                                    // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<float>                                      ScoreMultiplierByRanking;                                 // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.RewardData");
		return ptr;
	}

};


// Class TslGame.SceneInteractionComponent
// 0x0140 (0x05C0 - 0x0480)
class USceneInteractionComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0480(0x0010) MISSED OFFSET
	float                                              MaxInteractableDistance;                                  // 0x0490(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0494(0x0004) MISSED OFFSET
	struct FText                                       InteractionVerb;                                          // 0x0498(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	struct FText                                       InteractiveObjectName;                                    // 0x04B0(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	unsigned char                                      bUseTraceCheck : 1;                                       // 0x04C8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x04C9(0x0007) MISSED OFFSET
	struct FCastConfig                                 CastConfig;                                               // 0x04D0(0x0048) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0518(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInteractBy;                                             // 0x0520(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClientOnInteractBy;                                       // 0x0530(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData04[0x80];                                      // 0x0540(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SceneInteractionComponent");
		return ptr;
	}


	struct FText GetInteractiveObjectName();
	struct FText GetInteractionVerb();
	bool AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.TslReplayMapDataInterface
// 0x0000 (0x0028 - 0x0028)
class UTslReplayMapDataInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslReplayMapDataInterface");
		return ptr;
	}

};


// Class TslGame.DoorInteractionComponent
// 0x01F0 (0x07B0 - 0x05C0)
class UDoorInteractionComponent : public USceneInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x05C0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.DoorInteractionComponent.DoorState
	unsigned char                                      bReverseRotation : 1;                                     // 0x05C1(0x0001) (CPF_Net)
	unsigned char                                      bIgnoreParentValidityCheck : 1;                           // 0x05C1(0x0001)
	unsigned char                                      UnknownData01[0x2];                                       // 0x05C2(0x0002) MISSED OFFSET
	struct FVector                                     SoundOffset;                                              // 0x05C4(0x000C) (CPF_IsPlainOldData)
	class UDoorDataAsset*                              DoorDataAsset;                                            // 0x05D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C8];                                     // 0x05D8(0x01C8) MISSED OFFSET
	class UAkComponent*                                AkAudioComponent;                                         // 0x07A0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x07A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DoorInteractionComponent");
		return ptr;
	}


	void OnRep_DoorState();
	bool AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.DroppedItemInteractionComponent
// 0x0050 (0x0610 - 0x05C0)
class UDroppedItemInteractionComponent : public USceneInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x05C0(0x0030) MISSED OFFSET
	class UItem*                                       Item;                                                     // 0x05F0(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05F8(0x0008) MISSED OFFSET
	class UAsyncStaticMeshComponent*                   StaticMeshComponent;                                      // 0x0600(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0608(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedItemInteractionComponent");
		return ptr;
	}


	void OnRep_Item();
	bool AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.TslVehicleInterface
// 0x0000 (0x0028 - 0x0028)
class UTslVehicleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleInterface");
		return ptr;
	}

};


// Class TslGame.VehicleSeatInteractionComponent
// 0x01B0 (0x0770 - 0x05C0)
class UVehicleSeatInteractionComponent : public USceneInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x05C0(0x000C) MISSED OFFSET
	int                                                SeatIndex;                                                // 0x05CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x05D0(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.VehicleSeatInteractionComponent.RiderType
	unsigned char                                      UnknownData02[0x7];                                       // 0x05D1(0x0007) MISSED OFFSET
	struct FName                                       LeaveSocketName;                                          // 0x05D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       RiderCollisionComponentName;                              // 0x05E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              EnterCollisionOverlapRadiusSlack;                         // 0x05E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              EnterCollisionOverlapCapsuleHalfHeightSlack;              // 0x05EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bDisablePlayerCapsuleCollision : 1;                       // 0x05F0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bBlockDrowning : 1;                                       // 0x05F1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bBlockRadialDamage : 1;                                   // 0x05F2(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x05F3(0x0005) MISSED OFFSET
	unsigned char                                      UnknownData04[0x50];                                      // 0x05F3(0x0050) UNKNOWN PROPERTY: MapProperty TslGame.VehicleSeatInteractionComponent.ViewYawPerWeaponOverrideMap
	float                                              ViewPitchMin;                                             // 0x0648(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x064C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewYawMin;                                               // 0x0650(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewYawMax;                                               // 0x0654(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 CurvePitchMax;                                            // 0x0658(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 CurvePitchMin;                                            // 0x0660(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       FirstPersonCameraName;                                    // 0x0668(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ThirdPersonCameraName;                                    // 0x0670(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0678(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.VehicleSeatInteractionComponent.SeatAnimationType
	unsigned char                                      UnknownData06[0x7];                                       // 0x0679(0x0007) MISSED OFFSET
	class UBlendSpaceBase*                             SeatBlendspaceAiming;                                     // 0x0680(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             SeatBlendspaceFPPAiming;                                  // 0x0688(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Rifle;                                  // 0x0690(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Melee;                                  // 0x0698(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Unarmed;                                // 0x06A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Grenade;                                // 0x06A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAimOffsetBlendSpace*                        SeatIdleAO;                                               // 0x06B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             TransitionOutBlendspace;                                  // 0x06B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             TransitionInBlendspace;                                   // 0x06C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SeatAnimDynamicsScale;                                    // 0x06C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x06CC(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           DriverMain;                                               // 0x06D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanHorizontalMeshSpaceAdditive;                    // 0x06D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanVerticalMeshSpaceAdditive;                      // 0x06E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_FrontBack;                               // 0x06E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_LeftRight;                               // 0x06F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopBase;                                           // 0x06F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopMeshSpaceAdditive;                              // 0x0700(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRiderShouldLean : 1;                                     // 0x0708(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRiderShouldUseStop : 1;                                  // 0x0709(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAdjustRiderFPPPosition : 1;                              // 0x070A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x070B(0x0001) MISSED OFFSET
	struct FVector                                     AdjustRiderFPPScale;                                      // 0x070C(0x000C) (CPF_Edit, CPF_IsPlainOldData)
	unsigned char                                      bRestricWeaponUse : 1;                                    // 0x0718(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0719(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData10[0x10];                                      // 0x0719(0x0010) UNKNOWN PROPERTY: ArrayProperty TslGame.VehicleSeatInteractionComponent.AllowedWeaponClasses
	unsigned char                                      bCanOnlyFireWhileAiming : 1;                              // 0x0730(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCanAimFromSeat : 1;                                      // 0x0731(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseEntryVelocityRestriction : 1;                         // 0x0732(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x0733(0x0001) MISSED OFFSET
	float                                              MaxVelocityForEntry;                                      // 0x0734(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseSeatChangeAngleRestriction : 1;                       // 0x0738(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bEjectOnSeatChangeFail : 1;                               // 0x0739(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x073A(0x0002) MISSED OFFSET
	float                                              MaxRollForSeatChange;                                     // 0x073C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCanBeAffectedByMolotov : 1;                              // 0x0740(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0741(0x0003) MISSED OFFSET
	float                                              InteractionBlockDuration;                                 // 0x0744(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0748(0x0008) MISSED OFFSET
	class UPrimitiveComponent*                         RiderCollisionComponent;                                  // 0x0750(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0758(0x0008) MISSED OFFSET
	class UAkAudioEvent*                               VehicleInsideEvent;                                       // 0x0760(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bBlockFPPCameraUnderWaterEffect : 1;                      // 0x0768(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleSeatInteractionComponent");
		return ptr;
	}


	void OnRep_Rider();
	void OnInteractDelegate(class ATslCharacter* OtherCharacter);
	bool IsWeaponClassAllowed();
	bool IsSeatChangeAllowedByAngle();
	bool IsEntryAllowedByVelocity();
	class UTslVehicleSeatComponent* GetVehicleSeatComponent();
	class APawn* GetVehiclePawn();
	TScriptInterface<class UTslVehicleInterface> GetVehicleInterface();
	void GetVehicleAnimType();
	class UBlendSpaceBase* GetTransitionOutBlendspace();
	class UBlendSpaceBase* GetTransitionInBlendspace();
	class UAimOffsetBlendSpace* GetSeatIdleAO();
	class UAnimSequenceBase* GetSeatIdleAnimation_Unarmed();
	class UAnimSequenceBase* GetSeatIdleAnimation_Rifle();
	class UAnimSequenceBase* GetSeatIdleAnimation_Melee();
	class UAnimSequenceBase* GetSeatIdleAnimation_Grenade();
	class UBlendSpaceBase* GetSeatAimingFPPBlendspace();
	class UBlendSpaceBase* GetSeatAimingBlendspace();
	float GetMinPitchByYaw(float CurrentYaw);
	float GetMaxPitchByYaw(float CurrentYaw);
	bool GetCanFireOnlyWhileAimed();
	bool GetCanAimFromSeat();
	struct FText GetAdditionalMessage(class ATslCharacter* Character);
	bool AllowInteractDelegate(class ATslCharacter* OtherCharacter);
};


// Class TslGame.MotorbikeVehicleSeatInteraction
// 0x0020 (0x0790 - 0x0770)
class UMotorbikeVehicleSeatInteraction : public UVehicleSeatInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0770(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.MotorbikeVehicleSeatInteraction");
		return ptr;
	}


	void OnRep_Rider();
	void OnInteractDelegate(class ATslCharacter* OtherCharacter);
	bool IsWeaponClassAllowed();
	bool IsSeatChangeAllowedByAngle();
	bool IsEntryAllowedByVelocity();
	class UTslVehicleSeatComponent* GetVehicleSeatComponent();
	class APawn* GetVehiclePawn();
	TScriptInterface<class UTslVehicleInterface> GetVehicleInterface();
	void GetVehicleAnimType();
	class UBlendSpaceBase* GetTransitionOutBlendspace();
	class UBlendSpaceBase* GetTransitionInBlendspace();
	class UAimOffsetBlendSpace* GetSeatIdleAO();
	class UAnimSequenceBase* GetSeatIdleAnimation_Unarmed();
	class UAnimSequenceBase* GetSeatIdleAnimation_Rifle();
	class UAnimSequenceBase* GetSeatIdleAnimation_Melee();
	class UAnimSequenceBase* GetSeatIdleAnimation_Grenade();
	class UBlendSpaceBase* GetSeatAimingFPPBlendspace();
	class UBlendSpaceBase* GetSeatAimingBlendspace();
	float GetMinPitchByYaw(float CurrentYaw);
	float GetMaxPitchByYaw(float CurrentYaw);
	bool GetCanFireOnlyWhileAimed();
	bool GetCanAimFromSeat();
	struct FText GetAdditionalMessage(class ATslCharacter* Character);
	bool AllowInteractDelegate(class ATslCharacter* OtherCharacter);
};


// Class TslGame.SharedVehicleSeatInteractionCom
// 0x0020 (0x0790 - 0x0770)
class USharedVehicleSeatInteractionCom : public UVehicleSeatInteractionComponent
{
public:
	TArray<class ATslCharacter*>                       RiderArray;                                               // 0x0770(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	float                                              LeaveAreaRadius;                                          // 0x0780(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0784(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SharedVehicleSeatInteractionCom");
		return ptr;
	}

};


// Class TslGame.ScopeInfo
// 0x0020 (0x0048 - 0x0028)
class UScopeInfo : public UObject
{
public:
	class UMeshComponent*                              MeshComponent;                                            // 0x0028(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAttachableItem*                             Scope;                                                    // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslWeapon_Gun*                              Gun;                                                      // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ScopeInfo");
		return ptr;
	}


	void RemoveScopeComponent(class UActorComponent* Component);
	void RemoveScopeActor(class AActor* Actor);
	void RemoveScope(class UWorld* World);
};


// Class TslGame.ScopeGlintManager
// 0x0070 (0x0250 - 0x01E0)
class UScopeGlintManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01E0(0x0050) MISSED OFFSET
	TArray<class UScopeInfo*>                          ScopeInfoList;                                            // 0x0230(0x0010) (CPF_ZeroConstructor)
	class ATslPlayerController*                        PlayerController;                                         // 0x0240(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0248(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ScopeGlintManager");
		return ptr;
	}

};


// Class TslGame.SimpleInterpolationMovement
// 0x00A0 (0x0310 - 0x0270)
class USimpleInterpolationMovement : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0270(0x0010) MISSED OFFSET
	float                                              LocationInterpTime;                                       // 0x0280(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	unsigned char                                      bNeedLocationInterp : 1;                                  // 0x0288(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bCheckForInterpEndLocation : 1;                           // 0x0289(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x028A(0x0002) MISSED OFFSET
	struct FVector                                     InterpStartLocation;                                      // 0x028C(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     InterpEndLocation;                                        // 0x0298(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     InterpStartVelocity;                                      // 0x02A4(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     InterpEndVelocity;                                        // 0x02B0(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	float                                              RotationInterpTime;                                       // 0x02BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x02C0(0x0038) MISSED OFFSET
	unsigned char                                      bUseOnlyYawRotation : 1;                                  // 0x02F8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseSweepMove : 1;                                        // 0x02F9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x02FA(0x0002) MISSED OFFSET
	float                                              ForceMoveTime;                                            // 0x02FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0300(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SimpleInterpolationMovement");
		return ptr;
	}

};


// Class TslGame.TslAircraftVehicleMovement
// 0x0000 (0x0310 - 0x0310)
class UTslAircraftVehicleMovement : public USimpleInterpolationMovement
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAircraftVehicleMovement");
		return ptr;
	}

};


// Class TslGame.SkinDataConfig
// 0x0018 (0x0048 - 0x0030)
class USkinDataConfig : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0030(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.SkinDataConfig.SkinApplicationType
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FSkinMaterialData>                   SkinMaterials;                                            // 0x0038(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SkinDataConfig");
		return ptr;
	}

};


// Class TslGame.SkinHelperComponent
// 0x00F0 (0x02D0 - 0x01E0)
class USkinHelperComponent : public UActorComponent
{
public:
	struct FSkinMessageFormat                          MsgFormatForWeapon;                                       // 0x01E0(0x0078) (CPF_Edit)
	struct FSkinMessageFormat                          MsgFormatForEquip;                                        // 0x0258(0x0078) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SkinHelperComponent");
		return ptr;
	}


	void ServerTestWeaponSkinApplyByItemReference(const struct FString& Reference);
	void Server_UpdateMasteryItem(class UEquipableItem* EquipableItem, bool bNewEquippedState);
	void Server_UpdateCharacterAppearance();
	void Server_DoUpdateSkinItem(class UEquipableItem* EquipableIte, class USkinItem* SkinItem);
};


// Class TslGame.SpawnKitData
// 0x0050 (0x0078 - 0x0028)
class USpawnKitData : public UObject
{
public:
	TMap<struct FString, struct FSpawnKitInfoListOfType> SpawnKitsDB;                                              // 0x0028(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SpawnKitData");
		return ptr;
	}

};


// Class TslGame.SpawnKit
// 0x0090 (0x00B8 - 0x0028)
class USpawnKit : public UObject
{
public:
	struct FStringClassReference                       SpawnKitDataClass;                                        // 0x0028(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_NoClear)
	class USpawnKitData*                               SpawnKitData;                                             // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FSpawnKitInstance>                   SpawnKits;                                                // 0x0040(0x0010) (CPF_ZeroConstructor)
	TArray<struct FSpawnKitInstance>                   SelectableSpawnKits;                                      // 0x0050(0x0010) (CPF_ZeroConstructor)
	TArray<struct FSpawnKitInstance>                   PlatoonASpawnKits;                                        // 0x0060(0x0010) (CPF_ZeroConstructor)
	TArray<struct FSpawnKitInstance>                   PlatoonBSpawnKits;                                        // 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0080(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SpawnKit");
		return ptr;
	}

};


// Class TslGame.SpringArmInVehicleComponent
// 0x0000 (0x0510 - 0x0510)
class USpringArmInVehicleComponent : public USpringArmComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SpringArmInVehicleComponent");
		return ptr;
	}

};


// Class TslGame.TslPlayerStart
// 0x0030 (0x0448 - 0x0418)
class ATslPlayerStart : public APlayerStart
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0418(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslPlayerStart.MatchStartType
	unsigned char                                      UnknownData01[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	float                                              StartRadius;                                              // 0x041C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRandomRotation : 1;                                      // 0x0420(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	TArray<class AStartActivationVolume*>              ActivationVolumes;                                        // 0x0428(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      bForceSelect : 1;                                         // 0x0438(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	int                                                Weight;                                                   // 0x043C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0440(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslPlayerStart");
		return ptr;
	}


	float GetRandomStartYawRotation();
	struct FVector GetRandomStartLocation();
};


// Class TslGame.StartActivationVolume
// 0x0008 (0x0428 - 0x0420)
class AStartActivationVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StartActivationVolume");
		return ptr;
	}

};


// Class TslGame.ThingActivationVolume
// 0x0000 (0x0428 - 0x0428)
class AThingActivationVolume : public AStartActivationVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ThingActivationVolume");
		return ptr;
	}

};


// Class TslGame.StatTrakActor
// 0x0050 (0x0438 - 0x03E8)
class AStatTrakActor : public AActor
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamics_StatTrakMesh;                    // 0x03E8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03F8(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.StatTrakActor.StatTrakState
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	struct FString                                     SkinId;                                                   // 0x0400(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                SkinOwnerPlayerId;                                        // 0x0410(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	struct FStatTrakDataPair                           SaveStatTrakDataPair;                                     // 0x0418(0x0018) (CPF_Transient)
	class ATslPlayerState*                             SaveSkinOnwerPlayerState;                                 // 0x0430(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StatTrakActor");
		return ptr;
	}


	void UpdatedStatTrakData(const struct FString& SkinId, const struct FStatTrakDataPair& StatTrakDataPair);
	void OnUpdatedStatTrakDatas(TArray<struct FStatTrakDataPair> StatTrakDataPairs);
	void OnUpdatedStatTrakData(const struct FString& SkinId, const struct FStatTrakDataPair& StatTrakDataPair);
	void OnStatTrakStateUpdate();
	class UMeshComponent* GetStatTrakMeshComponent();
};


// Class TslGame.StatTrakActor_Meter
// 0x0038 (0x0470 - 0x0438)
class AStatTrakActor_Meter : public AStatTrakActor
{
public:
	class UCurveFloat*                                 Curve_EffectOffset;                                       // 0x0438(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_Fade;                                               // 0x0440(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_Noise;                                              // 0x0448(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 Curve_NumChange;                                          // 0x0450(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FPlaceValue>                         PlaceValues;                                              // 0x0458(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bUpdated : 1;                                             // 0x0468(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StatTrakActor_Meter");
		return ptr;
	}

};


// Class TslGame.StatTrakActor_TextRender
// 0x0010 (0x0448 - 0x0438)
class AStatTrakActor_TextRender : public AStatTrakActor
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamics_Text;                            // 0x0438(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.StatTrakActor_TextRender");
		return ptr;
	}


	void SetScalarParameterValue_TextRender(const struct FName& ParameterName, float Value);
	void SetScalarParameterValue_StatTrakMesh(const struct FName& ParameterName, float Value);
	class UTextRenderComponent* GetStatTextComponent();
};


// Class TslGame.SteamRichPresenceObserver
// 0x00D0 (0x00F8 - 0x0028)
class USteamRichPresenceObserver : public UObject
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0028(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SteamRichPresenceObserver");
		return ptr;
	}

};


// Class TslGame.InventoryFacade
// 0x0020 (0x0410 - 0x03F0)
class AInventoryFacade : public ASubActor
{
public:
	class AInventory*                                  Inventory;                                                // 0x03F0(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F8(0x0010) UNKNOWN PROPERTY: ArrayProperty TslGame.InventoryFacade.AutoSwapEquipSlotID
	class AEquipment*                                  Equipment;                                                // 0x0408(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.InventoryFacade");
		return ptr;
	}


	bool IsAutoSwappable();
	bool HasItemByClass(class UClass* ItemClass);
	void GiveItem_Admin(class UClass* ItemClass);
	class ATslCharacter* GetOwnerCharacter();
	class AInventory* GetInventory();
	class AEquipment* GetEquipment();
};


// Class TslGame.Equipment
// 0x0050 (0x0470 - 0x0420)
class AEquipment : public AItemSlotContainer
{
public:
	struct FScriptMulticastDelegate                    OnEquipmentUpdated;                                       // 0x0420(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0430(0x0030) MISSED OFFSET
	TArray<class UEquipableItem*>                      Items;                                                    // 0x0460(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.Equipment");
		return ptr;
	}


	struct FEquipPosition WeaponIndexToEquipPosition(int WeaponIndex);
	void WeaponAttachmentSwap(const struct FEquipPosition& SourceWeapon, const struct FEquipPosition& TargetWeapon, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void UnequipItem(const struct FEquipPosition& Position, const struct FName& ItemClassForVerify, bool bSoundPlay);
	bool TryEquipItem(class UItem* Item, bool bSoundPlay, bool bSwap);
	void PrimaryWeaponSwap(const struct FEquipPosition& EquipPosition, const struct FString& Options);
	void Items_RepNotify();
	bool IsSwapablePrimaryWeapon(const struct FEquipPosition& EquipPosition, const struct FString& Options);
	bool IsAttachableToWeapon(int WeaponIndex, class UAttachableItem* AttachableItem, bool bOnlyFree);
	class ATslCharacter* GetOwnerCharacter();
	int GetItemCountByClass(class UClass* ItemClass);
	class UEquipableItem* GetItem(const struct FEquipPosition& Position);
	class AInventoryFacade* GetInventoryFacade();
	struct FEquipPosition FindPosition(class UItem* Item);
	struct FEquipPosition FindEquipPosition(bool bOnlyFree);
	struct FEquipPosition FindEquipableWeaponPosition(class UEquipableItem* EquipableItem, const struct FString& Options);
	int FindAttachableWeaponIndex(class UAttachableItem* AttachableItem, const struct FString& Options);
	int EquipPositionToWeaponIndex(const struct FEquipPosition& Position);
	bool EquipItem(const struct FEquipPosition& Position, class UEquipableItem* Item, bool bCheckViaCanEquipTo, bool bSoundPlay);
	void DropItemWithPhysics(const struct FEquipPosition& Position, const struct FName& ItemClassForVerify, const struct FItemThrowParams& ThrowParams, bool bIsForce, bool bNeedSimulate);
	void DropItem(const struct FEquipPosition& Position, const struct FName& ItemClassForVerify, bool bIsForce, bool bNeedSimulate);
	void DropAttachedItemAll(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void DropAttachedItem(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void DetachItemAll(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void DetachItem(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void ClientSimulateDropItem(class UEquipableItem* Item);
};


// Class TslGame.Inventory
// 0x0040 (0x0460 - 0x0420)
class AInventory : public AItemSlotContainer
{
public:
	struct FScriptMulticastDelegate                    OnInventoryUpdated;                                       // 0x0420(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0430(0x000C) MISSED OFFSET
	float                                              MaxSpace;                                                 // 0x043C(0x0004) (CPF_Edit, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0440(0x0008) MISSED OFFSET
	TArray<class UItem*>                               Items;                                                    // 0x0448(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.Inventory");
		return ptr;
	}


	void OnFinishUseCast(class UObject* CastObject);
	void MaxSpace_RepNotify();
	void Items_RepNotify();
	class ATslCharacter* GetOwnerCharacter();
	float GetMaxSpace();
	int GetItemCountByClass(class UClass* ItemClass);
	int GetItemCount();
	class AInventoryFacade* GetInventoryFacade();
	float GetCurrentSpace();
	TArray<struct FInventoryItem> GetAllItemsByType(class UClass* ItemSuperClass);
	TArray<struct FInventoryItem> GetAllItems();
	int GetAdditionalMaxCount(class UItem* Item);
	int FindItemIndex(class UItem* Item);
	class UItem* FindItemHasMinStack(class UClass* ItemClass);
	class UItem* FindItem(class UClass* ItemClass);
	void EquipOrDropItem(int Index, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void EquipItem(int Index, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void DropItem(int Index, const struct FName& ItemClassForVerify, const struct FString& Options, bool bSoundPlay);
	bool ConsumeItemByClass(class UClass* ItemClass, int Count);
	void ClientBroadcastNoBagSpaceEvent();
	void AttachOrDropItem(int Index, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void AttachItem(int Index, const struct FName& ItemClassForVerify, const struct FEquipPosition& EquipPosition, bool bSoundPlay);
};


// Class TslGame.ItemExplorerProxy
// 0x0020 (0x0470 - 0x0450)
class AItemExplorerProxy : public AItemExplorer
{
public:
	struct FScriptDelegate                             OnChangeItemExplorerProxy;                                // 0x0450(0x000E) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0450(0x0002) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned char                                      UnknownData01[0x10];                                      // 0x0460(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ItemExplorerProxy");
		return ptr;
	}


	void PropagateUpdateItemList();
	void PropagateDestroyContextMenuWidget();
	void PropagateCreateAndShowContextMenuWidget(const TScriptInterface<class USlotContainerInterface>& Param);
	void Pop();
	bool IsBaseExplorer();
};


// Class TslGame.CarePackageItem
// 0x00F8 (0x0670 - 0x0578)
class ACarePackageItem : public AItemPackage
{
public:
	class UClass*                                      ParachuteClass;                                           // 0x0578(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SmokeFxClass;                                             // 0x0580(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      SmokeAirFxClass;                                          // 0x0588(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      LightFxClass;                                             // 0x0590(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAsyncStaticMeshComponent*                   VisualStaticMesh;                                         // 0x0598(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	TAssetPtr<class UStaticMesh>                       VisualPackageMesh;                                        // 0x05A0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	float                                              LimitFallSpeed;                                           // 0x05C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x05C4(0x0004) MISSED OFFSET
	struct FName                                       SmokeSocket;                                              // 0x05C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       SmokeAirSocket;                                           // 0x05D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       LightSocket;                                              // 0x05D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       ParachuteSocket;                                          // 0x05E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               LandSoundAk;                                              // 0x05E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsFalling : 1;                                           // 0x05F0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsPickupedItem : 1;                                      // 0x05F1(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsHideIconOnMap : 1;                                     // 0x05F2(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsTranslucentIconOnMap : 1;                              // 0x05F3(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SmokeRemainTime;                                          // 0x05F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05F8(0x0008) MISSED OFFSET
	class ATslParticle*                                SmokeFx;                                                  // 0x0600(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                SmokeAirFx;                                               // 0x0608(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                LightFx;                                                  // 0x0610(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AActor*                                      Parachute;                                                // 0x0618(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              FloorCheckDelayTime;                                      // 0x0620(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FloorCheckRemainedTime;                                   // 0x0624(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0628(0x0008) MISSED OFFSET
	class USimpleInterpolationMovement*                MovementComponent;                                        // 0x0630(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0638(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AkComponent;                                              // 0x0640(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0648(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CarePackageItem");
		return ptr;
	}


	bool IsPickupedItem();
	bool IsFalling();
};


// Class TslGame.DroppedPackageItem
// 0x0000 (0x0578 - 0x0578)
class ADroppedPackageItem : public AItemPackage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.DroppedPackageItem");
		return ptr;
	}


	void OnRep_EffectClass();
	void OnDestroy(class AActor* Actor);
	void Items_RepNotify();
	bool IsOpenedBy(class ATslCharacter* Character);
	void ClientOnInteractBy(class ATslCharacter* OtherCharacter);
	bool AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.FloorSnapItemPackage
// 0x0010 (0x0588 - 0x0578)
class AFloorSnapItemPackage : public AItemPackage
{
public:
	unsigned char                                      bUseWaterSurface : 1;                                     // 0x0578(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0579(0x0003) MISSED OFFSET
	float                                              WaterSurfaceThreshold;                                    // 0x057C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0580(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.FloorSnapItemPackage");
		return ptr;
	}

};


// Class TslGame.NearbyInteractiveItemExplorer
// 0x0010 (0x0460 - 0x0450)
class ANearbyInteractiveItemExplorer : public AItemExplorer
{
public:
	TArray<TWeakObjectPtr<class UObject>>              ExplorableItems;                                          // 0x0450(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.NearbyInteractiveItemExplorer");
		return ptr;
	}

};


// Class TslGame.SubThingSpawnProcessor
// 0x0000 (0x0028 - 0x0028)
class USubThingSpawnProcessor : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.SubThingSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.CombinedThingSpawnProcessor
// 0x0028 (0x0060 - 0x0038)
class UCombinedThingSpawnProcessor : public UThingSpawnProcessor
{
public:
	TArray<class UClass*>                              SubProcessorClasses;                                      // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<class USubThingSpawnProcessor*>             SubProcessors;                                            // 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CombinedThingSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.PackageSubThingSpawnProcessor
// 0x03D0 (0x03F8 - 0x0028)
class UPackageSubThingSpawnProcessor : public USubThingSpawnProcessor
{
public:
	class UDataTable*                                  RawItemSpawnDataTable;                                    // 0x0028(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UDataTable*                                  RawItemSpawnTogetherDataTable;                            // 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TArray<struct FPackageSpotGroupProperty>           RawSpotGroupProperties;                                   // 0x0038(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3B0];                                     // 0x0048(0x03B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.PackageSubThingSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.VehicleSubThingSpawnProcessor
// 0x03F0 (0x0418 - 0x0028)
class UVehicleSubThingSpawnProcessor : public USubThingSpawnProcessor
{
public:
	TArray<struct FVehicleSpotGroupProperty>           RawSpotGroupProperties;                                   // 0x0028(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	class UDataTable*                                  RawVehicleSpawnDataTable;                                 // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpawnZOffsetFromFloor;                                    // 0x0040(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bOverrideDataTableByModePreset : 1;                       // 0x0044(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3D3];                                     // 0x0045(0x03D3) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.VehicleSubThingSpawnProcessor");
		return ptr;
	}

};


// Class TslGame.ThingHolder
// 0x00A8 (0x0490 - 0x03E8)
class AThingHolder : public AActor
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x03E8(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ThingHolder");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.ThingSpot
// 0x0008 (0x03F0 - 0x03E8)
class AThingSpot : public AActor
{
public:
	class UThingSpotComponent*                         SpotComponent;                                            // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ThingSpot");
		return ptr;
	}

};


// Class TslGame.ThingSpotComponent
// 0x0010 (0x0490 - 0x0480)
class UThingSpotComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0480(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.ThingSpotComponent.SpotGroupType
	unsigned char                                      UnknownData01[0x3];                                       // 0x0481(0x0003) MISSED OFFSET
	struct FVector2D                                   RandomRotatorRange;                                       // 0x0484(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.ThingSpotComponent");
		return ptr;
	}

};


// Class TslGame.TimerTextBlockUpdater
// 0x0018 (0x0040 - 0x0028)
class UTimerTextBlockUpdater : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnTimeUpdated;                                            // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TimerTextBlockUpdater");
		return ptr;
	}


	void SetWorldTimeLimitSeconds(float WorldTimeLimitSeconds);
	void Reset(const struct FString& ResetText);
};


// Class TslGame.TrackManager
// 0x0020 (0x0408 - 0x03E8)
class ATrackManager : public AActor
{
public:
	class UStaticMesh*                                 MeshForSpline;                                            // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          MaterialForSpline;                                        // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PatchLength;                                              // 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              speedThreshold;                                           // 0x03FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AInstancedSplineDecalActor*                  SplineDecalActor;                                         // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TrackManager");
		return ptr;
	}

};


// Class TslGame.TslAccessoryComponent
// 0x0040 (0x04C0 - 0x0480)
class UTslAccessoryComponent : public USceneComponent
{
public:
	struct FTransform                                  InitialTransformAttachmentScene;                          // 0x0480(0x0030) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class USceneComponent*                             AttachmentScene;                                          // 0x04B0(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAccessoryComponent");
		return ptr;
	}


	void SetPhysicsSimulation(bool bSimulatePhysics);
	void InitSetupComponent(bool bSimulatePhysics);
};


// Class TslGame.TslAccuracyManager
// 0x0018 (0x0400 - 0x03E8)
class ATslAccuracyManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAccuracyManager");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslAchievement
// 0x00F8 (0x04E0 - 0x03E8)
class ATslAchievement : public AActor
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x03E8(0x0080) MISSED OFFSET
	TArray<TAssetPtr<class UClass>>                    HelmetLv3List;                                            // 0x0468(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    BackpackLv3List;                                          // 0x0478(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    VestLv3List;                                              // 0x0488(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    GhillieSuitList;                                          // 0x0498(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    SilenceWeaponList;                                        // 0x04A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    CrossbowClassList;                                        // 0x04B8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    PanClassList;                                             // 0x04C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAchievement");
		return ptr;
	}

};


// Class TslGame.TslAggroSystem
// 0x0050 (0x0078 - 0x0028)
class UTslAggroSystem : public UObject
{
public:
	unsigned char                                      bForceAddPlayer : 1;                                      // 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	struct FTslAggroData                               AggroData;                                                // 0x002C(0x0020) (CPF_Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<struct FTslAggroScore>                      AggroScoreArray;                                          // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FTimerHandle                                UpdateAggroTimerHandle;                                   // 0x0060(0x0008) (CPF_Transient)
	class AActor*                                      CachedCurrentEnemy;                                       // 0x0068(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bChangedCurrentEnemy : 1;                                 // 0x0070(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAggroSystem");
		return ptr;
	}

};


// Class TslGame.TslAIController
// 0x0020 (0x0520 - 0x0500)
class ATslAIController : public AAIController
{
public:
	class UBlackboardComponent*                        BlackboardComp;                                           // 0x0500(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBehaviorTreeComponent*                      BehaviorComp;                                             // 0x0508(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0510(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAIController");
		return ptr;
	}


	void ShootEnemy();
	bool FindClosestEnemyWithLOS(class ATslCharacter* ExcludeEnemy);
	void FindClosestEnemy();
};


// Class TslGame.TslAircraftVehicle
// 0x00B8 (0x0500 - 0x0448)
class ATslAircraftVehicle : public APawn
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0448(0x0018) MISSED OFFSET
	struct FVector2D                                   RouteStartPointLocation;                                  // 0x0460(0x0008) (CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	struct FVector2D                                   RouteEndPointLocation;                                    // 0x0468(0x0008) (CPF_Net, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FAircraftParticle>                   AircraftParticles;                                        // 0x0470(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<class ATslParticle*>                        AttachedParticles;                                        // 0x0480(0x0010) (CPF_ZeroConstructor)
	class UStaticMeshComponent*                        MeshComponent;                                            // 0x0490(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslAircraftVehicleMovement*                 MovementComponent;                                        // 0x0498(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USplineComponent*                            SplineComponent;                                          // 0x04A0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x04A8(0x0048) MISSED OFFSET
	float                                              TotalFlyingTime;                                          // 0x04F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AircraftSpeed;                                            // 0x04F4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAircraftVehicle");
		return ptr;
	}

};


// Class TslGame.TslVehicleDrop
// 0x0060 (0x0448 - 0x03E8)
class ATslVehicleDrop : public AActor
{
public:
	class UBoxComponent*                               CollisionComponent;                                       // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UProjectileMovementComponent*                MovementComponent;                                        // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UClass*                                      VehicleSpawnClass;                                        // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AltitudeCheck_LoopTime;                                   // 0x0400(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AltitudeCheck_ArriveDistance;                             // 0x0404(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AltitudeCheck_SphereTraceRadius;                          // 0x0408(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AltitudeCheck_TraceDistance;                              // 0x040C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCorrectForGroundStaticMeshes : 1;                        // 0x0410(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseAltitudeVelocityClamp : 1;                            // 0x0411(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0412(0x0002) MISSED OFFSET
	struct FVector2D                                   VelocityClampInMap;                                       // 0x0414(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   VelocityClampOutMap;                                      // 0x041C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      FakeMesh;                                                 // 0x0428(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bDrawAltCheckDebug : 1;                                   // 0x0430(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x17];                                      // 0x0431(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleDrop");
		return ptr;
	}

};


// Class TslGame.AircraftCarePackage
// 0x00A0 (0x05A0 - 0x0500)
class AAircraftCarePackage : public ATslAircraftVehicle
{
public:
	class UClass*                                      CarePackageItemSpawnerClass;                              // 0x0500(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      CarePackageItemClass;                                     // 0x0508(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FDropCarePackageTableData>           DropCarePackageTableData;                                 // 0x0510(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      bUseCustomCarepackageItem : 1;                            // 0x0520(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0521(0x0007) MISSED OFFSET
	class UClass*                                      CustomCarepackageItem;                                    // 0x0528(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UGeneralItemSpawner*                         CarePackageItemSpawner;                                   // 0x0530(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class ATslPassCarePackageArea*>             PassCarePackageAreas;                                     // 0x0538(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ATslPassCarePackageAreaRectangle*>    PassCarePackageAreasRectangle;                            // 0x0548(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData01[0x44];                                      // 0x0558(0x0044) MISSED OFFSET
	unsigned char                                      bCalledByFlareGun : 1;                                    // 0x059C(0x0001) (CPF_Net, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.AircraftCarePackage");
		return ptr;
	}


	bool IsPlayInEditor();
};


// Class TslGame.CombatAircraft
// 0x0040 (0x0540 - 0x0500)
class ACombatAircraft : public ATslAircraftVehicle
{
public:
	class UClass*                                      BombTemplateClass;                                        // 0x0500(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   BombDropInterval;                                         // 0x0508(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0510(0x0004) MISSED OFFSET
	float                                              BombProjectileDelayTime;                                  // 0x0514(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BombingZoneDuration;                                      // 0x0518(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                BombingZoneProjectileCount;                               // 0x051C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BombingZoneWidth;                                         // 0x0520(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   ExplosionArea;                                            // 0x0524(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x052C(0x0004) MISSED OFFSET
	TArray<class ATslPhysicsVolume*>                   OceanPhysicsVolume;                                       // 0x0530(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.CombatAircraft");
		return ptr;
	}


	class ATslGameState* GetGameState();
	class ATslGameMode* GetGameMode();
};


// Class TslGame.TransportAircraftVehicle
// 0x0088 (0x0588 - 0x0500)
class ATransportAircraftVehicle : public ATslAircraftVehicle
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0500(0x0028) MISSED OFFSET
	class UAkAudioEvent*                               RideSound;                                                // 0x0528(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkAudioEvent*                               LeaveSound;                                               // 0x0530(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAkComponent*                                AkSoundCom;                                               // 0x0538(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                TotalRiderCount;                                          // 0x0540(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RiderCount;                                               // 0x0544(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTslVehicleSeatComponent*                    VehicleSeatComponent;                                     // 0x0548(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UClass*                                      ParachuteItem;                                            // 0x0550(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInteractionComponent*                       InteractionComponent;                                     // 0x0558(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslTransportEjectionComponent*              EjectionComponent;                                        // 0x0560(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bIsEnteredAtEjectionArea : 1;                             // 0x0568(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsAllEjected : 1;                                        // 0x0569(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsVisible : 1;                                           // 0x056A(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x056B(0x0001) MISSED OFFSET
	float                                              EjectPredictionTime;                                      // 0x056C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxEjectSpeed;                                            // 0x0570(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x0574(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TransportAircraftVehicle");
		return ptr;
	}


	void OnRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void OnRep_IsVisible();
	void OnLocalPlayerRide();
	void OnLocalPlayerLeave();
	void OnLeave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void OnInteractBy(class ATslCharacter* Character);
	bool IsInEjectionArea();
	int GetTotalRiderCount();
	int GetRiderCount();
	void EnterAtEjectionArea();
	void EjectAll();
	bool AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.TslAnchorActor
// 0x0010 (0x03F8 - 0x03E8)
class ATslAnchorActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAnchorActor");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslFloatingVehicle
// 0x00C8 (0x0510 - 0x0448)
class ATslFloatingVehicle : public APawn
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0448(0x0018) MISSED OFFSET
	class UGamePadInputAixsComponent*                  GamePadInputAixsComponent;                                // 0x0460(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DisableEditOnInstance, CPF_InstancedReference, CPF_IsPlainOldData)
	class USkeletalMeshComponent*                      MeshComponent;                                            // 0x0468(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0470(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslFloatingVehicleMovement*                 MovementComponent;                                        // 0x0478(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleHitComponent*                     VehicleHitComponent;                                      // 0x0480(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleCommonComponent*                  VehicleCommonComponent;                                   // 0x0488(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleSeatComponent*                    VehicleSeatComponent;                                     // 0x0490(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleEffectComponent*                  VehicleEffectComponent;                                   // 0x0498(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleSyncComponent*                    VehicleSyncComponent;                                     // 0x04A0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleTempComponent*                    VehicleTempComponent;                                     // 0x04A8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslVehicleXRayComponent*                    VehicleXRayComponent;                                     // 0x04B0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslHornComponent*                           TslHornComponent;                                         // 0x04B8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslPawnInputBindingComponent*               TslPawnInputBindingComponent;                             // 0x04C0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x04C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UAkComponent*                                AudioComEngine;                                           // 0x04D0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UClass*>                              ComponentsToDestroyOnDedicatedServer;                     // 0x04D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	struct FName                                       VehicleEnginePoint;                                       // 0x04E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VehicleEngineRadius;                                      // 0x04F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Health;                                                   // 0x04F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              HealthMax;                                                // 0x04F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Fuel;                                                     // 0x04FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              FuelMax;                                                  // 0x0500(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EngineSoundModifier;                                      // 0x0504(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAkAudioEvent*                               StopSound;                                                // 0x0508(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFloatingVehicle");
		return ptr;
	}


	void UnBindCallbackToHUD(class ATslPlayerController* InController);
	bool OnStopBoostingPad();
	void OnStopBoosting();
	bool OnStartBoostingPad();
	void OnStartBoosting();
	void OnRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void OnPostDriverRide();
	void OnPostDriverLeave();
	void OnLeave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void OnBlockingWidgetOpened(class UWidget* Widget);
	void MoveForwardPad(float Val);
	bool IsBoosting();
	float GetVehicleEngineImmersionDepth();
	struct FVector GetVehicleAcceleration();
	float GetSteerYawAngle();
	float GetMaxSteerYawAngle();
	void BindCallbackToHUD(class ATslPlayerController* InController);
};


// Class TslGame.WeaponTrajectoryData
// 0x00C0 (0x00F0 - 0x0030)
class UWeaponTrajectoryData : public UDataAsset
{
public:
	struct FWeaponRecoilConfig                         RecoilConfig;                                             // 0x0030(0x0080) (CPF_Edit, CPF_DisableEditOnInstance)
	struct FWeaponTrajectoryConfig                     TrajectoryConfig;                                         // 0x00B0(0x0040) (CPF_Edit, CPF_DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.WeaponTrajectoryData");
		return ptr;
	}

};


// Class TslGame.TslWeapon_Trajectory
// 0x0180 (0x0E00 - 0x0C80)
class ATslWeapon_Trajectory : public ATslWeapon_Gun
{
public:
	struct FTrajectoryWeaponData                       TrajectoryConfig;                                         // 0x0C80(0x0060) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0CE0(0x0010) MISSED OFFSET
	TMap<float, class UClass*>                         UnderWaterTrailFXClassPerLength;                          // 0x0CF0(0x0050) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0D40(0x0004) MISSED OFFSET
	unsigned char                                      FireAtViewPoint : 1;                                      // 0x0D44(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0D45(0x0003) MISSED OFFSET
	class UClass*                                      ImpactTemplate;                                           // 0x0D48(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      LightImpactTemplate;                                      // 0x0D50(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x24];                                      // 0x0D58(0x0024) MISSED OFFSET
	float                                              TrajectoryGravityZ;                                       // 0x0D7C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FName                                       TrailTargetParam;                                         // 0x0D80(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0D88(0x0028) MISSED OFFSET
	class UParticleSystem*                             TrailFX;                                                  // 0x0DB0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x48];                                      // 0x0DB8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWeapon_Trajectory");
		return ptr;
	}


	void SimulateUnderwaterTrail(const struct FVector& SurfaceImpactPoint, const struct FVector& ShootDirection, float TravelDistance);
	void SimulateUnderwaterHit(const struct FVector& UnderwaterImpactPoint, const struct FVector& ShootOrigin);
	void SimulateHit_UnReliable(const struct FHitResult& Impact, const struct FVector& RelLocation);
	void SimulateHit_Reliable(const struct FHitResult& Impact, const struct FVector& RelLocation);
	void Simulate_CreateAmmoInstance(const struct FVector& ServerStartTrace, const struct FVector& Dir, const struct FAttackId& AttackId);
	void SetCurrentRecoilValue(float InCurrent_RecoilValue);
	void SetCurrentBullet(int InCurrent_Bullet);
	void ServerWallCheckTest(const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void ServerTestBallistics(const struct FVector& Origin, const struct FVector& OriginDir);
	void ServerNotifyHit(TArray<int> Ints2, uint32_t uintr, uint32_t uinta, uint32_t uintp, uint32_t uintb, float L3, float L4, float CR_P, float CR_Y, TArray<int> Ints, unsigned char h0, int h1, int h2, unsigned char uint1, int chksum1, int checksum_CD, const struct FVector& SI, const struct FVector& L1, const struct FVector& L2, int LC, uint16_t Segment, const struct FVector& Dir0, unsigned char bUnder, const struct FVector& E1, float S1, const struct FVector& ClientImpactLocation, const struct FVector& RelativeImpact, const struct FHitResult& Impact, TArray<int> Ints3, const struct FVector& ClientOrigin, const struct FVector& Origin, const struct FVector& TraceStart, const struct FVector_NetQuantizeNormal& ShootDir, float TravelDistance, const struct FAttackId& AttackId, uint32_t HitSeq, const struct FVector& RelLocation, float SpeedLoss, const struct FVector& OD, float ts, const struct FVector& IV);
	void ServerNotifyCrack(class ATslCharacter* TargetCharacter, const struct FVector_NetQuantize& LocationRelative, float BulletVelocity);
	void ServerNotifyAmmoSpawned(const struct FVector& ServerStartTrace, const struct FVector& Dir, const struct FAttackId& AttackId);
	void ServerLogBodyPenetration(int AttackId, const struct FName& DamageZone, float DamageDiff);
	void OnWorldOriginShifted(const struct FVector& InShiftVector);
	void OnRep_WeaponSpread(float LastWeaponSpread);
	bool IsRecoilDebugEnabled_BP();
	bool IsBulletInAir();
	class UWeaponTrajectoryData* GetWeaponTrajectoryData();
	struct FWeaponTrajectoryConfig GetWeaponTrajectoryConfig();
	struct FTrajectoryWeaponData GetTrajectoryConfig();
	float GetRecoilStartTime();
	struct FRecoilDebugInfo GetRecoilDebugInfo();
	int GetRecoilDebugCurrentBullet();
	struct FWeaponRecoilConfig GetRecoilConfig();
	float GetRecoilBlendInTime();
	float GetInertiaPitchAdditive();
	float GetCurrentStabilityVar();
	float GetCurrentReoveryTarget();
	float GetCurrentRecoilValue();
	struct FVector2D GetCurrentRecoilTarget();
	struct FRotator GetBulletRotation();
	struct FVector GetBulletLocation();
	void ClientWallCheckFail(const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FVector& Impact);
};


// Class TslGame.TslWheeledVehicleMovement
// 0x0170 (0x06D0 - 0x0560)
class UTslWheeledVehicleMovement : public UWheeledVehicleMovementComponent4W
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0560(0x0010) MISSED OFFSET
	struct FCustomTransmissionData                     CustomTransmission;                                       // 0x0570(0x0020) (CPF_Edit)
	unsigned char                                      bUseSpeedDifferential : 1;                                // 0x0590(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0591(0x000F) MISSED OFFSET
	struct FDifferentialOverrideData                   SpeedDifferentialSetup;                                   // 0x05A0(0x0040) (CPF_Edit)
	struct FWaterControlSetup                          WaterControlSetup;                                        // 0x05E0(0x0080) (CPF_Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0660(0x0004) MISSED OFFSET
	unsigned char                                      bAlwaysUseDirectInput : 1;                                // 0x0664(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0665(0x0003) MISSED OFFSET
	float                                              Anim_SteeringInputInterpSpeed;                            // 0x0668(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Anim_InterpOfInterpSpeedScale;                            // 0x066C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Anim_InterpOfInterpSpeedAbs;                              // 0x0670(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0674(0x0008) MISSED OFFSET
	float                                              Anim_SpeedForInputTypeSwitch;                             // 0x067C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x50];                                      // 0x0680(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWheeledVehicleMovement");
		return ptr;
	}


	void SetWheelRotationSpeed(int Index, float InSpeed);
	void SetSimulateVehicle(bool bSimulate);
	void ServerUpdateAdditionalState(int TargetGear);
	void Server_SetMovementParameters(float InThrottle, float InSteer, float InBreak, float InHandbrake, int Gear);
	void ProcessCustomTransmission(float InVelocity);
	void OnDriverRide();
	void OnDriverLeave();
	void OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	void OnBreak();
	bool IsSimulatingVehicle();
	float GetWheelWaterDepth(int Index);
	float GetWheelSuspensionMaxRaise(int Index);
	float GetWheelSuspensionMaxDrop(int Index);
	float GetWheelRotationSpeed(int Index);
	TArray<float> GetWheelHealthPercentages();
	TEnumAsByte<EWheelContactType> GetWheelContactType(int Index, float MinVelocity, float MinSkid, float MinSpin, float SuspOffsetForContact);
	class UPhysicalMaterial* GetWheelContactSurfaceMaterial(int Index);
	struct FWheelContactData GetWheelContactData(int Index, float MinVelocity, float MinSkid, float MinSpin, float SuspOffsetForContact, float MinBrake, float MinRotationSpeed, bool bIgnoreHandbrake);
	float GetThrottleInput();
	float GetSteeringInputClamped();
	float GetSteeringInput();
	float GetPropulsionAlpha();
	float GetInWaterAlpha();
	float GetHandbrakeInput();
	float GetBrakeInput();
	void ClientPunctureTire(int WheelIndex);
	void Client_DrawBodyDebug(const struct FVector& InLocation, const struct FVector& InParentLocaiton, const struct FRotator& InRotation, float InMass, const struct FColor& InColor, const struct FBodyInstance& InBody);
};


// Class TslGame.TslFloatingVehicleMovement
// 0x0050 (0x02C0 - 0x0270)
class UTslFloatingVehicleMovement : public UPawnMovementComponent
{
public:
	float                                              StartAccelerationRate;                                    // 0x0270(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              StopAccelerationRate;                                     // 0x0274(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MaxRotationYawAngle;                                      // 0x0278(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              RotationYawAngle;                                         // 0x027C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RotationYawRate;                                          // 0x0280(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	class UCurveFloat*                                 DirectionalAccelerationCurve;                             // 0x0288(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 SlideCompensationCurve;                                   // 0x0290(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BoostModifier;                                            // 0x0298(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsBoosting : 1;                                          // 0x029C(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x029D(0x0003) MISSED OFFSET
	float                                              ForwardInput;                                             // 0x02A0(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RotationInput;                                            // 0x02A4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02A8(0x0008) MISSED OFFSET
	float                                              HitCharacterDuration;                                     // 0x02B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x02B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslFloatingVehicleMovement");
		return ptr;
	}


	void ServerUpdateInput(float InForwardInput, float InRotationInput, bool bInIsBoosting);
	void OnDriverLeave();
	bool IsBoosting();
	float GetRotationYawAngle();
	float GetMaxRotationYawAngle();
	float GetMaxAcceleration();
	struct FVector GetCalculatedAcceleration();
	float GetAcceleration();
};


// Class TslGame.TslWheelDragData
// 0x0060 (0x0090 - 0x0030)
class UTslWheelDragData : public UDataAsset
{
public:
	unsigned char                                      bScaleForceByMass : 1;                                    // 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bScaleForceByJounce : 1;                                  // 0x0031(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0032(0x0006) MISSED OFFSET
	class UCurveFloat*                                 JounceScalarCurve;                                        // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TMap<class UPhysicalMaterial*, struct FWheelDragSurfaceConfig> SurfaceDragMap;                                           // 0x0040(0x0050) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslWheelDragData");
		return ptr;
	}

};


// Class TslGame.TslVehicleWheel
// 0x0228 (0x0348 - 0x0120)
class UTslVehicleWheel : public UVehicleWheel
{
public:
	float                                              Health;                                                   // 0x0120(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HealthMax;                                                // 0x0124(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       TireBoneName;                                             // 0x0128(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseTireLink : 1;                                         // 0x0130(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	int                                                TireLinkIndex;                                            // 0x0134(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FWheeledEffectPool                          WheeledEffectMap;                                         // 0x0138(0x0050)
	float                                              LongSlipSkidThreshold;                                    // 0x0188(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LateralSlipSkidThreshold;                                 // 0x018C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SpringCompressionLandingThreshold;                        // 0x0190(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bManualSuspensionSoundControl : 1;                        // 0x0194(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0195(0x0003) MISSED OFFSET
	class UTslWheelSuspensionAudioData*                SuspensionAudioData;                                      // 0x0198(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     WheelEffectOffset;                                        // 0x01A0(0x000C) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	class UTslWheelEffectType*                         RollEffect;                                               // 0x01B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslWheelEffectType*                         SkidAccelEffect;                                          // 0x01B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UTslWheelEffectType*                         SkidEffect;                                               // 0x01C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      PuncturedParticleClass;                                   // 0x01C8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UClass*                                      PuncturedSparkParticleClass;                              // 0x01D0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              slipThresholdForPunkSpark;                                // 0x01D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               LandingSound;                                             // 0x01E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     LastValidLocation;                                        // 0x01E8(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	int                                                InvalidLocationFrames;                                    // 0x01F4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TEnumAsByte<EPhysicalSurface>                      LastValidSurface;                                         // 0x01F8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bUseSpline : 1;                                           // 0x01F9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x01FA(0x0002) MISSED OFFSET
	float                                              TrackWidth;                                               // 0x01FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseWheelDrag : 1;                                        // 0x0200(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0201(0x0007) MISSED OFFSET
	class UTslWheelDragData*                           WheelDragData;                                            // 0x0208(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x0210(0x000C) MISSED OFFSET
	unsigned char                                      bApplyForceOnPuncture : 1;                                // 0x021C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x021D(0x0003) MISSED OFFSET
	float                                              PunctureForce;                                            // 0x0220(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PunctureVelocityScalar;                                   // 0x0224(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0228(0x0008) MISSED OFFSET
	class ATslParticle*                                TslParticleRoll;                                          // 0x0230(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                TslParticleSkid;                                          // 0x0238(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                TslParticleAccelSkid;                                     // 0x0240(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ATslParticle*                                TslParticlePunctureSpark;                                 // 0x0248(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0250(0x0008) MISSED OFFSET
	class UAkComponent*                                AudioCom;                                                 // 0x0258(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              MinZVelocityForSuspensionSound;                           // 0x0260(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x3C];                                      // 0x0264(0x003C) MISSED OFFSET
	float                                              TotalSpeedKmPerHour;                                      // 0x02A0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              Slip;                                                     // 0x02A4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UseRoll : 1;                                              // 0x02A8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UseSkid : 1;                                              // 0x02A9(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UseAccelSkid : 1;                                         // 0x02AA(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bHasLastStatus : 1;                                       // 0x02AB(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FSuspensionSoundConfig                      SuspensionSoundConfig;                                    // 0x02AC(0x0010) (CPF_Edit)
	unsigned char                                      UnknownData11[0x8C];                                      // 0x02BC(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslVehicleWheel");
		return ptr;
	}

};


// Class TslGame.TslAnimInstance
// 0x0F00 (0x1290 - 0x0390)
class UTslAnimInstance : public UAnimInstance
{
public:
	struct FScriptMulticastDelegate                    WeaponFire;                                               // 0x0390(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponFireCycle;                                          // 0x03A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipPrimary;                                             // 0x03B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipSecondary;                                           // 0x03C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EqupiSidearm;                                             // 0x03D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipMelee;                                               // 0x03E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrown;                                              // 0x03F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipPrimary;                                           // 0x0400(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipSecondary;                                         // 0x0410(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEqupiSidearm;                                           // 0x0420(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipMelee;                                             // 0x0430(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipThrown;                                            // 0x0440(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ToggleFireMode;                                           // 0x0450(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadTactical;                                           // 0x0460(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadCharge;                                             // 0x0470(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneStart;                                         // 0x0480(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneStop;                                          // 0x0490(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneSingle;                                        // 0x04A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrownGrenade;                                       // 0x04B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrownMolotov;                                       // 0x04C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrownOther;                                         // 0x04D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowPrepare;                                             // 0x04E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowCooking;                                             // 0x04F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowStart;                                               // 0x0500(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowDrop;                                                // 0x0510(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandHeavy;                                                // 0x0520(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandExtreme;                                              // 0x0530(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadCancel;                                             // 0x0540(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    CharacterPickup;                                          // 0x0550(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    CharacterDropItem;                                        // 0x0560(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnarmedAttack;                                            // 0x0570(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ShieldPushAttack;                                         // 0x0580(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    PowerupUsed;                                              // 0x0590(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangeCharacterAppearance;                                // 0x05A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCastStart;                                              // 0x05B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCastCancel;                                             // 0x05C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCastFinish;                                             // 0x05D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEmotePlay;                                              // 0x05E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEmotePlayRNG;                                           // 0x05F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEmoteStop;                                              // 0x0600(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNegativeEffectApplied;                                  // 0x0610(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNegativeEffectRemoved;                                  // 0x0620(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0630(0x0008) MISSED OFFSET
	class ATslCharacter*                               CharacterReference;                                       // 0x0638(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USkeletalMeshComponent*                      CharacterMesh_CP;                                         // 0x0640(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0648(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.PreEvalPawnState
	unsigned char                                      UnknownData02[0x3];                                       // 0x0649(0x0003) MISSED OFFSET
	float                                              LocomotionSpeed_CP;                                       // 0x064C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocomotionSpeed2D_CP;                                     // 0x0650(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocomotionSpeedVertical_CP;                               // 0x0654(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsMoving_CP : 1;                                         // 0x0658(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0659(0x0003) MISSED OFFSET
	float                                              LocomotionDirection_CP;                                   // 0x065C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocomotionDirectionClamped_CP;                            // 0x0660(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocomotionJumpDirection_CP;                               // 0x0664(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LeanYaw_CP;                                               // 0x0668(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    LastAbsoluteDirection_CP;                                 // 0x066C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    ControlRotation_CP;                                       // 0x0678(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    ControlRotationFPP_CP;                                    // 0x0684(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    CameraFPPRotation_CP;                                     // 0x0690(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    ControlRotationLastMovement_CP;                           // 0x069C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    CharacterRotation_CP;                                     // 0x06A8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x06B4(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.Stance_CP
	unsigned char                                      UnknownData05[0x1];                                       // 0x06B5(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.LastKnownStance_CP
	unsigned char                                      bIsSprintingFast_CP : 1;                                  // 0x06B6(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSprinting_CP : 1;                                      // 0x06B7(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponGripType_CP;                                        // 0x06B8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintAlpha_CP;                                           // 0x06BC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintLocoAlpha_CP;                                       // 0x06C0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintLeanValue_CP;                                       // 0x06C4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintAlphaPitchComponent_CP;                             // 0x06C8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintAlphaSprintLimit_High;                              // 0x06CC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintAlphaSprintLimit_Low;                               // 0x06D0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintValue_CP;                                           // 0x06D4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLocalQuickThrowHigh_CP : 1;                              // 0x06D8(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x06D9(0x0003) MISSED OFFSET
	float                                              LocalThrowModeSwitchAlpha_CP;                             // 0x06DC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsJumping_CP : 1;                                        // 0x06E0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bJumpForward_CP : 1;                                      // 0x06E1(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSwimming_CP : 1;                                       // 0x06E2(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsUnderWater_CP : 1;                                     // 0x06E3(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsDBNO_CP : 1;                                           // 0x06E4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x06E5(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.DBNOEntryStance
	unsigned char                                      bIsReviving_CP : 1;                                       // 0x06E6(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsUpperbody_CP : 1;                                      // 0x06E7(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsTransitioning_CP : 1;                                  // 0x06E8(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSkydiveLanding_CP : 1;                                 // 0x06E9(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsPeekingRestrictedByAnimation_CP : 1;                   // 0x06EA(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x06EB(0x0001) MISSED OFFSET
	int                                                PlayerID_CP;                                              // 0x06EC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                AirCraftIDAnim_CP;                                        // 0x06F0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsEquippingPistol_CP : 1;                                // 0x06F4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x06F5(0x0003) MISSED OFFSET
	class UAnimMontage*                                PistolEquipMontageRefCP;                                  // 0x06F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsFlying_CP : 1;                                         // 0x0700(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsLocalPlayer : 1;                                       // 0x0701(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x0702(0x0002) MISSED OFFSET
	float                                              LocalPlayerAlpha;                                         // 0x0704(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsRagdollCacheActive_CP : 1;                             // 0x0708(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsBurning_CP : 1;                                        // 0x0709(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsFlashed_CP : 1;                                        // 0x070A(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsAffectedByStatus_CP : 1;                               // 0x070B(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShouldUseDerootFix : 1;                                  // 0x070C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsPunching_CP : 1;                                       // 0x070D(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x070E(0x0002) MISSED OFFSET
	float                                              PunchingAlpha_CP;                                         // 0x0710(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x0714(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.Weapon_CP
	unsigned char                                      UnknownData13[0x1];                                       // 0x0715(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.LeftHandWeapon_CP
	unsigned char                                      bIsArmedWithGun_CP : 1;                                   // 0x0716(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsArmedWithThrown_CP : 1;                                // 0x0717(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsPreparingThrow_CP : 1;                                 // 0x0718(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0719(0x0003) MISSED OFFSET
	float                                              ThrowableAdditionalAimYaw_CP;                             // 0x071C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimMontage*                                CurrentRecoilMontage_CP;                                  // 0x0720(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpace1D*                               GripBlendSpace_CP;                                        // 0x0728(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             GripBlendSpaceLH_CP;                                      // 0x0730(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LHGripIndex_CP;                                           // 0x0738(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsReloading_CP : 1;                                      // 0x073C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x073D(0x0003) MISSED OFFSET
	struct FVector                                     HandWeaponOffset_CP;                                      // 0x0740(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     HandWeaponOffsetTarget;                                   // 0x074C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0758(0x0008) MISSED OFFSET
	struct FTransform                                  WeaponInertia_CP;                                         // 0x0760(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              ReloadAlpha_CP;                                           // 0x0790(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceUpperbodyOverride_CP;                                // 0x0794(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceUpperbodyScale_CP;                                   // 0x0798(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HandWeaponOffsetAlpha_CP;                                 // 0x079C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RightClavicleRotation_CP;                                 // 0x07A0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              FinalRecoilAlpha_CP;                                      // 0x07AC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 ADSSocketByFOV_CP;                                        // 0x07B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseDefaultWeaponLocomotionBlendspace_CP : 1;             // 0x07B8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData17[0x7];                                       // 0x07B9(0x0007) MISSED OFFSET
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_CP;                            // 0x07C0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Pistol;                        // 0x07C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_SMG;                           // 0x07D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Rifle;                         // 0x07D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Sniper;                        // 0x07E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Pistol_FPP;                    // 0x07E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_SMG_FPP;                       // 0x07F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Rifle_FPP;                     // 0x07F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Sniper_FPP;                    // 0x0800(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaX_Scalar_CP;                                 // 0x0808(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaY_Scalar_CP;                                 // 0x080C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaX_Clamp_CP;                                  // 0x0810(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaY_Clamp_CP;                                  // 0x0814(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_CP;                              // 0x0818(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaX_Scalar_ADS_CP;                             // 0x081C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaY_Scalar_ADS_CP;                             // 0x0820(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaX_Clamp_ADS_CP;                              // 0x0824(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaY_Clamp_ADS_CP;                              // 0x0828(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_ADS_CP;                          // 0x082C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_YawScalar_CP;                    // 0x0830(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertia_YawToRollScalar_CP;                         // 0x0834(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertia_YawToRollScalar_ADS_CP;                     // 0x0838(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaRoll_Clamp_ADS_CP;                           // 0x083C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertiaRoll_Clamp_CP;                               // 0x0840(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HandWeaponOffsetInterpSpeed;                              // 0x0844(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              HandWeaponOffsetInterpSpeedReturn;                        // 0x0848(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x084C(0x0004) MISSED OFFSET
	struct FName                                       FireModeMontageSlotName_CP;                               // 0x0850(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FName                                       EmoteMontageSlotName_CP;                                  // 0x0858(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponInertia_Yaw_CP;                                     // 0x0860(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponInertia_Pitch_CP;                                   // 0x0864(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponInertia_Roll_CP;                                    // 0x0868(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintWeaponLoweringAlpha_CP;                             // 0x086C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsShieldEquipped_CP : 1;                                 // 0x0870(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData19[0x7];                                       // 0x0871(0x0007) MISSED OFFSET
	class UAnimMontage*                                WeaponInspectMontage_CP;                                  // 0x0878(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              CantedRotation;                                           // 0x0880(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CantedRotationLeanMultiplier_CP;                          // 0x0884(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ADSMovementStabilization_CP;                              // 0x0888(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ADSSwayPlayrate_CP;                                       // 0x088C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 ADSHoldBreathCounterCurve;                                // 0x0890(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 ADSScopeSwayCurve;                                        // 0x0898(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 ADSSightMisalignmentCurve;                                // 0x08A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ADSScopeSway_CP;                                          // 0x08A8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ADSSightMisalignment_CP;                                  // 0x08AC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ADSMaxRoll_CP;                                            // 0x08B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ADSRollInterpolationSpeed_CP;                             // 0x08B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    ADSRoll_CP;                                               // 0x08B8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              RecoilRollValue_CP;                                       // 0x08C4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RecoilTimer_CP;                                           // 0x08C8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RecoilRollRand_CP;                                        // 0x08CC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RecoilPlayStartTime_CP;                                   // 0x08D0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RecoilBlendInTime_CP;                                     // 0x08D4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RecoilADSRotation_CP;                                     // 0x08D8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              RecoilTimerScale_CP;                                      // 0x08E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UCurveFloat*                                 RecoilRollCurve_CP;                                       // 0x08E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponStabilityAlpha_CP;                                  // 0x08F0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponStabilityRefSpeed_CP;                               // 0x08F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   WeaponStabilityRefMapIn_CP;                               // 0x08F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   WeaponStabilityRefMapOut_CP;                              // 0x0900(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              WeaponStabilityInterpSpeed_CP;                            // 0x0908(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsAiming_CP : 1;                                         // 0x090C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsScoping_CP : 1;                                        // 0x090D(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0x2];                                       // 0x090E(0x0002) MISSED OFFSET
	float                                              ScopingAlpha_CP;                                          // 0x0910(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponAimState_CP;                                        // 0x0914(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SprintAlphaModifier_CP;                                   // 0x0918(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsAimingBackward_CP : 1;                                 // 0x091C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsRelaxed_CP : 1;                                        // 0x091D(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData21[0x2];                                       // 0x091E(0x0002) MISSED OFFSET
	float                                              RelaxedAlpha_CP;                                          // 0x0920(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CombatAlpha_CP;                                           // 0x0924(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsFlareReady : 1;                                        // 0x0928(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0929(0x0003) MISSED OFFSET
	float                                              FlareReadyAlpha_CP;                                       // 0x092C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponAimStateInterpolated_CP;                            // 0x0930(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShieldAimStateInterpolated_CP;                            // 0x0934(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData23[0x1];                                       // 0x0938(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.ShieldState_CP
	unsigned char                                      UnknownData24[0x3];                                       // 0x0939(0x0003) MISSED OFFSET
	float                                              Yaw_CP;                                                   // 0x093C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RotationYaw_CP;                                           // 0x0940(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Pitch_CP;                                                 // 0x0944(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              YawNormalized_CP;                                         // 0x0948(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              YawInterpolationSpeed;                                    // 0x094C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              YawNormalizedInterpolated_CP;                             // 0x0950(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              YawNormalizedCombat_CP;                                   // 0x0954(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DesiredPitch_CP;                                          // 0x0958(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      AimDirectionCardinal_CP;                                  // 0x095C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData25[0x3];                                       // 0x095D(0x0003) MISSED OFFSET
	struct FRotator                                    AORot_CP;                                                 // 0x0960(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    AORotBackwards_CP;                                        // 0x096C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              SwimmingPitch_CP;                                         // 0x0978(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceAddAimOffset_CP;                                     // 0x097C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RiderLookLeft;                                            // 0x0980(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RiderLookRight;                                           // 0x0984(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponCollisionAlpha_CP;                                  // 0x0988(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWeaponObstructedHigh_CP : 1;                             // 0x098C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData26[0x3];                                       // 0x098D(0x0003) MISSED OFFSET
	float                                              WeaponCollisionReloadAlpha_CP;                            // 0x0990(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWeaponCollisionActive_CP : 1;                            // 0x0994(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsFalling_CP : 1;                                        // 0x0995(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsFallingAndOffGround_CP : 1;                            // 0x0996(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData27[0x1];                                       // 0x0997(0x0001) MISSED OFFSET
	float                                              FallingOffGroudCheck_CP;                                  // 0x0998(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bWasFalling_CP : 1;                                       // 0x099C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x099D(0x0003) MISSED OFFSET
	float                                              FallingAlpha_CP;                                          // 0x09A0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   FallingMap2D;                                             // 0x09A4(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   FallingMapZ;                                              // 0x09AC(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bForceFall_CP : 1;                                        // 0x09B4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData29[0x3];                                       // 0x09B5(0x0003) MISSED OFFSET
	class UAnimMontage*                                MontageFallingRifle_CP;                                   // 0x09B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimMontage*                                MontageFallingUnarmed_CP;                                 // 0x09C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LandingAlpha_CP;                                          // 0x09C8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLocalForceProne_CP : 1;                                  // 0x09CC(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData30[0x3];                                       // 0x09CD(0x0003) MISSED OFFSET
	float                                              JumpHeight_CP;                                            // 0x09D0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FallHeight_CP;                                            // 0x09D4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     JumpStartLocation_CP;                                     // 0x09D8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     LandPredictionVector_CP;                                  // 0x09E4(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              LeanLeftAlpha_CP;                                         // 0x09F0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LeanRightAlpha_CP;                                        // 0x09F4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LeanTwoSideAlpha_CP;                                      // 0x09F8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LeanLeftApplyTranslation_CP;                              // 0x09FC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LeanInterpSpeed_CP;                                       // 0x0A00(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LeanInterpSpeedCollisionClamp_CP;                         // 0x0A04(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUseLinearLeanInterp : 1;                                 // 0x0A08(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bIsFreefalling_CP : 1;                                    // 0x0A09(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsParachuting_CP : 1;                                    // 0x0A0A(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsUsingNewFreefall_CP : 1;                               // 0x0A0B(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallX_CP;                                             // 0x0A0C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallY_CP;                                             // 0x0A10(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreeFallAlpha_CP;                                         // 0x0A14(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsParachuteLanding_CP : 1;                               // 0x0A18(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsParachuteMoving_CP : 1;                                // 0x0A19(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData31[0x2];                                       // 0x0A1A(0x0002) MISSED OFFSET
	float                                              Freefall_Yaw_CP;                                          // 0x0A1C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Freefall_Pitch_CP;                                        // 0x0A20(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_Accelerate_CP;                                  // 0x0A24(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_Brake_CP;                                       // 0x0A28(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_Lateral_CP;                                     // 0x0A2C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_Pitch_CP;                                       // 0x0A30(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_PitchAlpha_CP;                                  // 0x0A34(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_TurnAlphaInstant_CP;                            // 0x0A38(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_TurnAlphaInterpolated_CP;                       // 0x0A3C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_TurnDelta_CP;                                   // 0x0A40(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_VelocityAlpha_CP;                               // 0x0A44(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    FreefallN_TargetRotation;                                 // 0x0A48(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              FreefallN_TargetPitch;                                    // 0x0A54(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_TargetYaw;                                      // 0x0A58(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_TargetRoll;                                     // 0x0A5C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_HorizontalStabilizationAlpha_CP;                // 0x0A60(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_VerticalStabilizationAlpha_CP;                  // 0x0A64(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    FreefallN_LegMove;                                        // 0x0A68(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    FreefallN_BodyMove;                                       // 0x0A74(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    FreefallN_Strafing;                                       // 0x0A80(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              FreefallN_PitchInterpolated_CP;                           // 0x0A8C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FreefallN_Yaw_Interpolated_CP;                            // 0x0A90(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    FreefallN_DeltaRotation_CP;                               // 0x0A94(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              Parachute_Forward_CP;                                     // 0x0AA0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Parachute_Forward_Interpolated_CP;                        // 0x0AA4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Parachute_Lateral_CP;                                     // 0x0AA8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Parachute_Lateral_Interpolated_CP;                        // 0x0AAC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Parachute_RollTendency_CP;                                // 0x0AB0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Parachute_PitchTendency_CP;                               // 0x0AB4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Parachute_TendencyFrame_CP;                               // 0x0AB8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParaAnimTimeSinceStart_CP;                                // 0x0ABC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsFreelooking_CP : 1;                                    // 0x0AC0(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsMeleeAttacking_CP : 1;                                 // 0x0AC1(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLocalForceRotationHipLeft_CP : 1;                        // 0x0AC2(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLocalForceRotationHipRight_CP : 1;                       // 0x0AC3(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLocalForceRotationAimed_CP : 1;                          // 0x0AC4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData32[0x3];                                       // 0x0AC5(0x0003) MISSED OFFSET
	float                                              RotationPlayrateAimed_CP;                                 // 0x0AC8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RotationPlayrateAimedAdditiveSpine_CP;                    // 0x0ACC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    LastRotation_CP;                                          // 0x0AD0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    Freelook_Body_CP;                                         // 0x0ADC(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    Freelook_Delta_CP;                                        // 0x0AE8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	int                                                IdleIndex_CP;                                             // 0x0AF4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LastIdleIndex_CP;                                         // 0x0AF8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              IdleTimer_CP;                                             // 0x0AFC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              IdleTriggerRandom;                                        // 0x0B00(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              IdleTriggerTimeMin_CP;                                    // 0x0B04(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              IdleTriggerTimeVariation_CP;                              // 0x0B08(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData33[0x4];                                       // 0x0B0C(0x0004) MISSED OFFSET
	class UAnimMontage*                                PickupMontage_CP;                                         // 0x0B10(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PickingUpAlpha_CP;                                        // 0x0B18(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData34[0x4];                                       // 0x0B1C(0x0004) MISSED OFFSET
	struct FTransform                                  SlotPrimary_CP;                                           // 0x0B20(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FTransform                                  SlotSecondary_CP;                                         // 0x0B50(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FTransform                                  SlotMelee_CP;                                             // 0x0B80(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FTransform                                  SlotThrown_CP;                                            // 0x0BB0(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotPrimary_Offset_CP;                                    // 0x0BE0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotSecondary_Offset_CP;                                  // 0x0BEC(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotPrimary_Location_CP;                                  // 0x0BF8(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotSecondary_Location_CP;                                // 0x0C04(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotMelee_Location_CP;                                    // 0x0C10(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     SlotThrown_Location_CP;                                   // 0x0C1C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SlotPrimary_Rotation_CP;                                  // 0x0C28(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SlotSecondary_Rotation_CP;                                // 0x0C34(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SlotMelee_Rotation_CP;                                    // 0x0C40(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    SlotThrown_Rotation_CP;                                   // 0x0C4C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	TMap<class UClass*, struct FTransform>             SlotPrimaryOffsetsPerWeapon;                              // 0x0C58(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TMap<class UClass*, struct FTransform>             SlotSecondaryOffsetsPerWeapon;                            // 0x0CA8(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              AnimDynamicsStandAlpha_CP;                                // 0x0CF8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimDynamicsStandSprintAlpha_CP;                          // 0x0CFC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimDynamicsCrouchAlpha_CP;                               // 0x0D00(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimDynamicsProneAlpha_CP;                                // 0x0D04(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     EFCoat_CP;                                                // 0x0D08(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      bLocalFPP_CP : 1;                                         // 0x0D14(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData35[0x3];                                       // 0x0D15(0x0003) MISSED OFFSET
	float                                              LocalFPPAlpha_CP;                                         // 0x0D18(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocalFPPAlphaVehicleAimAO_CP;                             // 0x0D1C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsInAircraft_CP : 1;                                     // 0x0D20(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsDriver_CP : 1;                                         // 0x0D21(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSitting_CP : 1;                                        // 0x0D22(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsInVehicle_CP : 1;                                      // 0x0D23(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocalSteerInput_CP;                                       // 0x0D24(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocalSteerInputMoto_CP;                                   // 0x0D28(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocalStopMoto_CP;                                         // 0x0D2C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocalThrottleInput_CP;                                    // 0x0D30(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LocalMotoFPPSpine_CP;                                     // 0x0D34(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LocalMotoFPPSpine01Scale_CP;                              // 0x0D38(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     LocalMotoFPPSpine03Scale_CP;                              // 0x0D44(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    GasThighRot_CP;                                           // 0x0D50(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    GasAnkleRot_CP;                                           // 0x0D5C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData36[0x8];                                       // 0x0D68(0x0008) MISSED OFFSET
	struct FTransform                                  GasKneeTransformX_CP;                                     // 0x0D70(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              LocalBrakeInput_CP;                                       // 0x0DA0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData37[0xC];                                       // 0x0DA4(0x000C) MISSED OFFSET
	struct FTransform                                  BrakeKneeTransform_CP;                                    // 0x0DB0(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FRotator                                    BrakeAnkleRot_CP;                                         // 0x0DE0(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              BackwardAOAlpha_CP;                                       // 0x0DEC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AimBlendAlpha_CP;                                         // 0x0DF0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasContact_CP : 1;                                       // 0x0DF4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData38[0x3];                                       // 0x0DF5(0x0003) MISSED OFFSET
	float                                              GroundContactMoto_CP;                                     // 0x0DF8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirControlPitchInput_CP;                                  // 0x0DFC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FTransform                                  DriverIK_CP;                                              // 0x0E00(0x0030) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              PassengerIKAlpha_CP;                                      // 0x0E30(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     DriverSpineLocWS_CP;                                      // 0x0E34(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData39[0x1];                                       // 0x0E40(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.VehicleSeatType_CP
	unsigned char                                      bMotoHasDriver_CP : 1;                                    // 0x0E41(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bVaultCanceled : 1;                                       // 0x0E42(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsVaulting_CP : 1;                                       // 0x0E43(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimHairAlpha;                                            // 0x0E44(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultTimer_CP;                                            // 0x0E48(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultTimerLast_CP;                                        // 0x0E4C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData40[0x1];                                       // 0x0E50(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.LocalVaultType_CP
	unsigned char                                      UnknownData41[0x7];                                       // 0x0E51(0x0007) MISSED OFFSET
	class UAnimSequenceBase*                           VaultAnimSequence_CP;                                     // 0x0E58(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultAnimLength_CP;                                       // 0x0E60(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData42[0x4];                                       // 0x0E64(0x0004) MISSED OFFSET
	class UCurveFloat*                                 VaultCurve_CP;                                            // 0x0E68(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultBlendInTime_CP;                                      // 0x0E70(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultBlendOutTime_CP;                                     // 0x0E74(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEndVaultToFall_CP : 1;                                   // 0x0E78(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData43[0x3];                                       // 0x0E79(0x0003) MISSED OFFSET
	float                                              VaultBlendOutProgressTime_CP;                             // 0x0E7C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultBlendOutExactTime_CP;                                // 0x0E80(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultLastActionTimer_CP;                                  // 0x0E84(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultAnimTime_CP;                                         // 0x0E88(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VaultBlendOutTimeBuffer;                                  // 0x0E8C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData44[0x1];                                       // 0x0E90(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslAnimInstance.CurrentCastAnim_CP
	unsigned char                                      bIsCasting_CP : 1;                                        // 0x0E91(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsActiveRagdoll_CP : 1;                                  // 0x0E92(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData45[0x1];                                       // 0x0E93(0x0001) MISSED OFFSET
	float                                              WeaponIKLH_CP;                                            // 0x0E94(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WeaponIKRH_CP;                                            // 0x0E98(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MontageIKLH_CP;                                           // 0x0E9C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MontageIKRH_CP;                                           // 0x0EA0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              IgnoreWeaponTransform_CP;                                 // 0x0EA4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceBasePose_CP;                                         // 0x0EA8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceNoAimOffset_CP;                                      // 0x0EAC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UseProceduralAimOffset_CP;                                // 0x0EB0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PickupIKAlpha_CP;                                         // 0x0EB4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TargetIKRH_CP;                                            // 0x0EB8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TargetIKLH_CP;                                            // 0x0EBC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceLegsFromAnim_CP;                                     // 0x0EC0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData46[0x4];                                       // 0x0EC4(0x0004) MISSED OFFSET
	class ATslWeapon_Gun*                              LastGunCache_CP;                                          // 0x0EC8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslWheeledVehicle*                          CachedWheeledVehicle_CP;                                  // 0x0ED0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ATslFloatingVehicle*                         CachedFloatingVehicle_CP;                                 // 0x0ED8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             PassengerAimBS_CP;                                        // 0x0EE0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             PassengerTransitionOut_CP;                                // 0x0EE8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBlendSpaceBase*                             PassengerTransitionIn_CP;                                 // 0x0EF0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Rifle_CP;                                   // 0x0EF8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Unarmed_CP;                                 // 0x0F00(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Grenade_CP;                                 // 0x0F08(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Melee_CP;                                   // 0x0F10(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCurveFloat*                                 CurveAimState_CP;                                         // 0x0F18(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverMain;                                               // 0x0F20(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanHorizontalMeshSpaceAdditive;                    // 0x0F28(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanVerticalMeshSpaceAdditive;                      // 0x0F30(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_FrontBack;                               // 0x0F38(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_LeftRight;                               // 0x0F40(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopBase;                                           // 0x0F48(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopMeshSpaceAdditive;                              // 0x0F50(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData47[0x8];                                       // 0x0F58(0x0008) MISSED OFFSET
	unsigned char                                      bIsLOD1 : 1;                                              // 0x0F60(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsLowUpdateRate : 1;                                     // 0x0F61(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData48[0x2];                                       // 0x0F62(0x0002) MISSED OFFSET
	float                                              UseIK;                                                    // 0x0F64(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsWearingCoat : 1;                                       // 0x0F68(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsCold : 1;                                              // 0x0F69(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCanDisplayAnimationOnRemote : 1;                         // 0x0F6A(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData49[0x5];                                       // 0x0F6B(0x0005) MISSED OFFSET
	class ATslGameState*                               GameState;                                                // 0x0F70(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData50[0x10];                                      // 0x0F78(0x0010) MISSED OFFSET
	float                                              AnimatedHairsAlpha;                                       // 0x0F88(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsParentalControl : 1;                                   // 0x0F8C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsShadowMesh : 1;                                        // 0x0F8D(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData51[0x2];                                       // 0x0F8E(0x0002) MISSED OFFSET
	struct FVector                                     DBNOAdjustment_CP;                                        // 0x0F90(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              DBNOAdjustMax_CP;                                         // 0x0F9C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DBNOAdjustMin_CP;                                         // 0x0FA0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DBNOSpeedSlowDown_CP;                                     // 0x0FA4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              DBNOAdjustAlpha_CP;                                       // 0x0FA8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DBNOAnimSpeed_CP;                                         // 0x0FAC(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData52[0x8];                                       // 0x0FB0(0x0008) MISSED OFFSET
	class UAnimMontage*                                MontageMeleeAttack1;                                      // 0x0FB8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimMontage*                                MontageMeleeAttack2;                                      // 0x0FC0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimMontage*                                MontageMeleeAttack3;                                      // 0x0FC8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimMontage*                                MontagePunchingAttack1;                                   // 0x0FD0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimMontage*                                MontagePunchingAttack2;                                   // 0x0FD8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimMontage*                                MontagePunchingAttack3;                                   // 0x0FE0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FPPSprintAnimScalar;                                      // 0x0FE8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     FPP_PrimaryAndSecondaryItemOffset;                        // 0x0FEC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PunchingAlphaOneTarget_CP;                                // 0x0FF8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              PunchingAlphaInterpSpeed;                                 // 0x0FFC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintWeaponLoweringScalar_CP;                            // 0x1000(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ThrowStateSwitchInterpSpeed;                              // 0x1004(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              VaultingEvalTimeout;                                      // 0x1008(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData53[0x4];                                       // 0x100C(0x0004) MISSED OFFSET
	class UAnimDB*                                     UnarmedAnimDB_CP;                                         // 0x1010(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimDB*                                     RifleAnimDB_CP;                                           // 0x1018(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimDB*                                     ShieldAnimDB_CP;                                          // 0x1020(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimDB*                                     MeleeAnimDB_CP;                                           // 0x1028(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UAnimDB*                                     GrenadeAnimDB_CP;                                         // 0x1030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UFreefallAnimData*                           Freefall_DataAsset;                                       // 0x1038(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotPrimary_Male_CP;                               // 0x1040(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Male_CP;                             // 0x1070(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotMelee_Male_CP;                                 // 0x10A0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotThrown_Male_CP;                                // 0x10D0(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotPrimary_Female_CP;                             // 0x1100(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Female_CP;                           // 0x1130(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotThrown_Female_CP;                              // 0x1160(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FTransform                                  DefaultSlotMelee_Female_CP;                               // 0x1190(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoTimeMultiplier;                                 // 0x11C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoTimeMultiplier_FPP;                             // 0x11C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoTimeAlphaScalar;                                // 0x11C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoTimeAlphaScalar_FPP;                            // 0x11CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoInstantScalar;                                  // 0x11D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LocomotionDirectionInterp;                                // 0x11D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LeanYawInterpSpeedMin;                                    // 0x11D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LeanYawInterpSpeedMax;                                    // 0x11DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LeanYawGlobalMultiplier;                                  // 0x11E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LeanYawClamp;                                             // 0x11E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoStandLimit_High;                                // 0x11E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoCrouchLimit_High;                               // 0x11EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoProneLimit_High;                                // 0x11F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoStandLimit_Low;                                 // 0x11F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoCrouchLimit_Low;                                // 0x11F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoProneLimit_Low;                                 // 0x11FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              SprintLocoLimitInterpSpeed;                               // 0x1200(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlarePitchActivationLimit_Stand;                          // 0x1204(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlarePitchActivationLimit_Prone;                          // 0x1208(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              FlareReadyInterpSpeed;                                    // 0x120C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AnimDynamicsForceClamp;                                   // 0x1210(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AnimDynamicsForceRandInMap;                               // 0x1214(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector2D                                   AnimDynamicsForceRandOutMap;                              // 0x121C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AnimDynamicsRandVectorRad;                                // 0x1224(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRotator                                    RightClavicleCompensation;                                // 0x1228(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      bIsReplayJumping_CP : 1;                                  // 0x1234(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData54[0x23];                                      // 0x1235(0x0023) MISSED OFFSET
	struct FVector                                     CameraFPPPosition_CP;                                     // 0x1258(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     ShieldReloadLocation_CP;                                  // 0x1264(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FVector                                     ShieldReloadRotation_CP;                                  // 0x1270(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData55[0x14];                                      // 0x127C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAnimInstance");
		return ptr;
	}


	void TslPlayMontage(class UAnimMontage* MontageToPlay, float InPlayRate, float InTimeToStartMontageAt, float InBlendIn);
	void SetWeaponThrowableStanceExtension(float Time);
	void SetWeaponStatesEvaluationCooldown(float Time);
	void SetLandPredictionVector(const struct FVector& newLandVector);
	void SetJumpStartLocation(const struct FVector& NewLocation, float DefaultFallHeight);
	void ResetRecoilRoll();
	void ResetIdle();
	void RandomizeIdleIndex_CP(bool ExludeLastIndex);
	void ProcessCodePaths();
	void PreEvaluatePawnState();
	void OnHitReaction(const struct FName& BoneName, const struct FVector& Direction);
	bool IsInspectingWeapon();
	void HandleSpeedAndDirection_CP();
	void HandleItemOffsets_CP();
	unsigned char HandleCardinalDirection90(float InDirection);
	void HandleAnimCurves();
	void HandleADSSocketOffset();
	void GetVehicleAO(float* Yaw, float* Pitch);
	class UBlendSpace* GetBlendSpaceRelaxed_TS(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP, class UAnimDB* InAnimDB);
	class UBlendSpace* GetBlendSpace_TS(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP, class UAnimDB* InAnimDB);
	float GetAnimSpeed_TS(TEnumAsByte<EAnimStanceType> AnimStance, float Direction, float InSpeed, class UAnimDB* InAnimDB, bool bIsSprinting, float* PlayRate, float* SprintAlpha);
	bool GetAbsActorToBaseRotation(bool bInUseMin, float InAngle);
	float FindPositionFromDistanceCurve(float Distance, class UAnimSequenceBase* InAnimSequence);
	void EvaluateWeaponStates();
	void EvaluateWeaponStability();
	void EvaluateWeaponInertia();
	void EvaluateWeaponCollision();
	void EvaluateVehicle();
	void EvaluateVaulting();
	void EvaluateSwimming();
	void EvaluateShield();
	void EvaluateRotations();
	void EvaluateRecoilRoll();
	void EvaluatePawnStates();
	void EvaluateMeleeAttack();
	void EvaluateLocalPawnStates();
	void EvaluateLeaning();
	void EvaluateJumping();
	void EvaluateJumpCamera();
	void EvaluateItemOffsets();
	void EvaluateIdle();
	void EvaluateFreelook();
	void EvaluateFreefallAndParachute();
	void EvaluateFPP();
	void EvaluateFallingAndLanding();
	void EvaluateCoatExternalForce();
	void EvaluateCharacterStates();
	void EvaluateCasting();
	void EvaluateAnimDynamics();
	void EvaluateAimStates();
	void EvaluateAimOffsets();
	void CacheCharacterReference(class ATslCharacter* InCharacter);
};


// Class TslGame.TslAnimNotify_HideBone
// 0x0028 (0x0060 - 0x0038)
class UTslAnimNotify_HideBone : public UAnimNotify
{
public:
	struct FString                                     NotifyName;                                               // 0x0038(0x0010) (CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FName>                               BoneNames;                                                // 0x0048(0x0010) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TEnumAsByte<EPhysBodyOp>                           PhysBodyOp;                                               // 0x0058(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bVisibility : 1;                                          // 0x0059(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAnimNotify_HideBone");
		return ptr;
	}

};


// Class TslGame.TslAnimNotifyState_Ragdoll
// 0x0028 (0x0058 - 0x0030)
class UTslAnimNotifyState_Ragdoll : public UAnimNotifyState
{
public:
	float                                              TimeDilation;                                             // 0x0030(0x0004) (CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              PassedTime;                                               // 0x0034(0x0004) (CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     LinearVelocity;                                           // 0x0038(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FName                                       SimulatePhysicsBoneName;                                  // 0x0048(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIncludePhysicsBone : 1;                                  // 0x0050(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideLinearVelocity : 1;                              // 0x0051(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAddLinearVelocity : 1;                                   // 0x0052(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseCCD : 1;                                              // 0x0053(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRagdollOnHit : 1;                                        // 0x0054(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAnimNotifyState_Ragdoll");
		return ptr;
	}

};


// Class TslGame.TslAnimNotifyState_ThrowableReleased
// 0x0010 (0x0040 - 0x0030)
class UTslAnimNotifyState_ThrowableReleased : public UAnimNotifyState
{
public:
	unsigned char                                      bPlayEquipAnimationAtStateEnd : 1;                        // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintReadOnly)
	unsigned char                                      bHideWeaponMesh : 1;                                      // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintReadOnly)
	unsigned char                                      bPreventAnimInstanceEvaluation : 1;                       // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0031(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAnimNotifyState_ThrowableReleased");
		return ptr;
	}

};


// Class TslGame.TslAuroraActor
// 0x00A0 (0x0488 - 0x03E8)
class ATslAuroraActor : public AActor
{
public:
	class USplineComponent*                            SplineComponent;                                          // 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMesh*                                 SplineMeshStart;                                          // 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          SplineMaterialStart;                                      // 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 SplineMeshMid;                                            // 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          SplineMaterialMid;                                        // 0x0408(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 SplineMeshEnd;                                            // 0x0410(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          SplineMaterialEnd;                                        // 0x0418(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESplineMeshAxis>                       Forward;                                                  // 0x0420(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	float                                              Color_Intensity;                                          // 0x0424(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HeightOpa_Pow;                                            // 0x0428(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Speed;                                                    // 0x042C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                TopColor;                                                 // 0x0430(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	struct FLinearColor                                BottomColor;                                              // 0x0440(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_IsPlainOldData)
	float                                              Pattern_Random;                                           // 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Hightlight_Str;                                           // 0x0454(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Line_Str;                                                 // 0x0458(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WP_Speed;                                                 // 0x045C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WP_Str;                                                   // 0x0460(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0468(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0478(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslAuroraActor");
		return ptr;
	}

};


// Class TslGame.TslBall
// 0x0000 (0x03E8 - 0x03E8)
class ATslBall : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBall");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslBaseCheatManager
// 0x0000 (0x0078 - 0x0078)
class UTslBaseCheatManager : public UCheatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslBaseCheatManager");
		return ptr;
	}


	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void VidMem();
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void Slomo(float NewTimeDilation);
	void SetWorldOrigin();
	void SetNavDrawDistance(float DrawDistance);
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void RebuildNavigation();
	void PrivateDataSize();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void ListAllTextures(const struct FString& Params);
	void ListAllStaticMeshes(const struct FString& Params);
	void ListAllSkeletalMeshes(const struct FString& Params);
	void ListAllRenderResources(const struct FString& Params);
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyPawns(class UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void CheatScript(const struct FString& ScriptName);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
};


// Class TslGame.TslCheatManager
// 0x0078 (0x00F0 - 0x0078)
class UTslCheatManager : public UTslBaseCheatManager
{
public:
	TArray<struct FString>                             CheatSpawnClassName;                                      // 0x0078(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0088(0x0018) MISSED OFFSET
	TArray<struct FTestCheatCommand>                   TestCheatList;                                            // 0x00A0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FTimerHandle                                TimerHandle_TestCheat;                                    // 0x00B0(0x0008) (CPF_Transient)
	int                                                TestCheatIndex;                                           // 0x00B8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                TestCheatStep;                                            // 0x00BC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                TestCheatLoopingCounter;                                  // 0x00C0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	class ACharacter*                                  AutoAimTarget;                                            // 0x00C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	float                                              AimPunchDebugShowDuration;                                // 0x00D8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                WorldOriginMaxX;                                          // 0x00DC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                WorldOriginMaxY;                                          // 0x00E0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_WorldOrigin;                                  // 0x00E8(0x0008) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslCheatManager");
		return ptr;
	}


	void WriteInstanceProperty(const struct FString& InInstanceName);
	void VehicleJump(float Pitch, float VelScale);
	void VaultToSky();
	void UpdateSmoothTargetViewRotationSpeed(float Speed);
	void ToggleVisibilityOfDestructibleComponents();
	void ToggleVehicleCCD();
	void ToggleParticleManager();
	void ToggleMatchTimer();
	void ToggleII(float Interval);
	void ToggleFreeMode();
	void ToggleComponentRegisterationManager();
	void ToggleCollisionOfDestructibleComponents();
	void ToggleAutoAim();
	void TickAutoAim();
	void TestVoiceAccessToken();
	void TestTriggerAchievement(const struct FString& ID, int Num);
	void TestShowAllOption();
	void TestResetAchievementAll();
	void TestResetAchievement(const struct FString& ID);
	void TestCheat(int InIndex, int InLoopingCounter);
	void TeleportDebug(int InIndex);
	void SweepToFloor(bool bInServer, bool bInComplex, float InExtentX, float InExtentY, float InExtentZ);
	void SweepLinePerformanceCheck();
	void StopTestCheat();
	void StopOutputCapture();
	void StopOtherPlayersTestCheat();
	void StartWave(int InWaveIndex);
	void StartOutputCapture(const struct FString& InfilePath);
	void StartMapBenchmarkSequence();
	void SpawnNpcFromLocation(float InX, float InY, float InZ, int InNpcArrayIndex, int InNum);
	void SpawnNpc(int InNpcArrayIndex, int InNum, float InDistance);
	void SpawnItemPackageByDead();
	void SpawnBot();
	void ShowVehicleComplexCollisionMeshes(int Show);
	void ShowNearDoors(float dist, bool bShow);
	void ShowLoadingScreen(bool OnOff);
	void ShowKeyGuideWidget(int bShow);
	void SetVehicleRepRotCorrection(float AngularDeltaThreshold, float AngularInterpAlpha, float AngularRecipFixTime);
	void SetVehicleRepPosCorrection(float LinearDeltaThresholdSq, float LinearInterpAlpha, float LinearRecipFixTime, float BodySpeedThresholdSq);
	void SetPktLagAndLoss(int InLag, int InLossPct);
	void SetHealth(float InHealth);
	void SetClientConnectionTimeout(float TimeoutSeconds);
	void SetCinematicMode(int Mode);
	void SetAllMeshCollisionEnabled(int EnumValue);
	void SetAASBpFactor(float factor);
	void Run_KGB_AF(int Opt);
	void Run_AutoHeal();
	void ReturnLookAt();
	void ResumeAllNpc();
	void Respawn(bool bCurrentPosition);
	void ResetWheeledVehicleTransform();
	void RemoveAllVehicleButSelected();
	void RaycastToFloor(bool bInServer, bool bInComplex);
	void RaycastInDirection(bool bInServer, bool bInComplex);
	void ProcessTestCheat();
	void PrintWeaponInformation();
	void PrintVehicleInformation();
	void PrintGameOptionHierarchy();
	void PrintCharacterInformation();
	void PlayEmoteAnimation(const struct FName& InEmoteName);
	void PauseAllNpc();
	void PauseAfterTick();
	void OtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void OnInteract();
	void OnFullMapSequenceStop();
	void NpcStopMovement();
	void NpcGod();
	void NPCDrawMovement(bool bFlag);
	void NpcDebugCamera();
	void NotifyPlayerEnd();
	void NeedHitchOnRenderThread();
	void NeedHitchOnGameThread();
	void MoveVehicleOnClient(float X, float Y, float Z);
	void MatchLeavingMap();
	void MatchInProgress();
	void MatchAborted();
	void MasteryItemAdd(const struct FString& ItemName);
	void MarkCharacterMeshDirty(int Num);
	void MapStatAnalyzer(const struct FString& Argument);
	void LookAt(float Pitch, float Yaw, float Roll);
	void LoadMapBenchmarkSequence();
	void ListCharacters();
	void LandingDamage(int InDamage);
	void KnockdownNpc(float InDuration);
	void KillOtherPlayers();
	void KillAllNpc();
	void InsertCrashMeCommand();
	void InfiniteAmmo(bool bTurnOn);
	void Infinite_WorldOriginInternal();
	void Infinite_WorldOrigin(int InRandMaxX, int InRandMaxY, float InRate);
	void Infinite_OriginShift();
	void IgnoreDoor();
	void HitReactionTest(float Damage);
	void GetWatchDogAndStatOneFrame(int Count);
	void ForceSetBaseNull();
	void ForceReloadGameOptionHierarchy();
	void ForceMatchStart();
	void ExplosionReactionTest(float Damage);
	void EndWatchDogAndStatStartFile();
	void DumpVoiceDevices();
	void DumpReplicatedItems();
	void DumpParticleManager(int Detail);
	void DumpNearestInstancedReactionComponent();
	void DumpDestructibleComponents();
	void DrawVehicleCenterOfMass();
	void DrawItemPackageExtent();
	void DiveStart();
	void DestoryAllItemPackage();
	void DelayCrash(float DelaySeconds);
	void DebugCancelAuthTicket();
	void CtrlShortCutOnOff(bool OnOff);
	void CopyDebugInfoRotation();
	void CopyDebugInfoLocation();
	void CopyDebugInfo();
	void CheatSpawnActor(int InClassIndex, int InHeight);
	void CheatDestroyActors();
	void Cheat(const struct FString& Msg);
	void ChangeTeam(int NewTeamNumber);
	void ChangeCameraMode(int Mode);
	void BugItNoScreenshot(const struct FString& Description);
	void BeginWatchDogAndStatStartFile();
	void ApplyWorldOrigin(int InOriginX, int InOriginY);
	void AimPunchDebugDuration(float Duration);
};


// Class TslGame.TslDamageType
// 0x0050 (0x0090 - 0x0040)
class UTslDamageType : public UDamageType
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0040(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.TslDamageType.DamageTypeCategory
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	class UForceFeedbackEffect*                        HitForceFeedback;                                         // 0x0048(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UForceFeedbackEffect*                        KilledForceFeedback;                                      // 0x0050(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bFallDamage : 1;                                          // 0x0058(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	TArray<struct FDamageRatioInfo>                    DamageRatioInfos;                                         // 0x0060(0x0010) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	TArray<struct FDamageRatioInfo>                    DamageRatioInfos_Console;                                 // 0x0070(0x0010) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      bIgnoreCharacterImpulse : 1;                              // 0x0080(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      HitReaction : 1;                                          // 0x0081(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bUseDamageCameraShake : 1;                                // 0x0082(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0083(0x0005) MISSED OFFSET
	class UClass*                                      DamageCameraShake;                                        // 0x0088(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslDamageType");
		return ptr;
	}

};


// Class TslGame.TslHUD
// 0x04A0 (0x0AA0 - 0x0600)
class ATslHUD : public ATslBaseHUD
{
public:
	struct FScriptMulticastDelegate                    OnPossessPawnChange;                                      // 0x0600(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplaySystemMessage;                                   // 0x0610(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayVoiceChannelStateMessage;                        // 0x0620(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayKilledMessage;                                   // 0x0630(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKillCountChanged;                                       // 0x0640(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAlivePlayerCountChanged;                                // 0x0650(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJoinPlayerCountChanged;                                 // 0x0660(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyHit;                                              // 0x0670(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamPlayerJoin;                                         // 0x0680(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamPlayerRemove;                                       // 0x0690(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMatchStarted;                                           // 0x06A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParachuteLanding;                                       // 0x06B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyStartBuff;                                        // 0x06C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyHealAmount;                                       // 0x06D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyRestrictingPlayArea;                              // 0x06E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyNextGasIn;                                        // 0x06F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyDisplayMessage;                                   // 0x0700(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyTeamElimination;                                  // 0x0710(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyPersonalKillingSpree;                             // 0x0720(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyTeamKillingSpree;                                 // 0x0730(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyWeaponChange;                                     // 0x0740(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyWeaponUnarm;                                      // 0x0750(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyHeal;                                             // 0x0760(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyDropSlotOnOtherContainer;                         // 0x0770(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyBlockingWidgetOpened;                             // 0x0780(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUseHealItemPad;                                         // 0x0790(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnSelectNextHealItemPad;                                  // 0x07A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyReloadingNeed;                                    // 0x07B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyReloaded;                                         // 0x07C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyVehicleRide;                                      // 0x07D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyVehicleLeave;                                     // 0x07E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterDeath;                                         // 0x07F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnMyCharacterDeath;                                       // 0x0800(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyGroggy;                                           // 0x0810(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyExtendMinimap;                                    // 0x0820(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyMatchIdUpdated;                                   // 0x0830(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnStanceChanged;                                          // 0x0840(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnReportPlayer;                                           // 0x0850(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	int                                                BluezoneState;                                            // 0x0860(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bGpsReset : 1;                                            // 0x0864(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bBluezoneReset : 1;                                       // 0x0865(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPlayzoneReset : 1;                                       // 0x0866(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0867(0x0001) MISSED OFFSET
	float                                              GpsResetTimeCheck;                                        // 0x0868(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x086C(0x002C) MISSED OFFSET
	class UTslSceneCaptureWorld*                       SceneCaptureWorld;                                        // 0x0898(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ACharacterStudio*                            CharacterStudio;                                          // 0x08A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x08A8(0x0010) MISSED OFFSET
	struct FVector                                     NextPlayzonePosition;                                     // 0x08B8(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	float                                              NextPlayzoneRadius;                                       // 0x08C4(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     CurrentPlayzonePosition;                                  // 0x08C8(0x000C) (CPF_BlueprintVisible, CPF_IsPlainOldData)
	float                                              CurrentPlayzoneRadius;                                    // 0x08D4(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x48];                                      // 0x08D8(0x0048) MISSED OFFSET
	TMap<int, class AItemStudio*>                      ItemStudioMap;                                            // 0x0920(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	class UAkComponent*                                AkSound;                                                  // 0x0970(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0978(0x0008) MISSED OFFSET
	struct FString                                     SceneCapturePackageName;                                  // 0x0980(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData05[0xE0];                                      // 0x0990(0x00E0) MISSED OFFSET
	struct FName                                       DisplayBoneName;                                          // 0x0A70(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDisplayMyCharacterAnim : 1;                              // 0x0A78(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDisplayOtherCharacterAnim : 1;                           // 0x0A79(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDisplayOtherWeaponAnim : 1;                              // 0x0A7A(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDisplayMyWeaponAnim : 1;                                 // 0x0A7B(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDisplayAudioListener : 1;                                // 0x0A7C(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0A7D(0x0003) MISSED OFFSET
	class UTslHoldButtonWidget*                        HoldButtons[0x4];                                         // 0x0A80(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.TslHUD");
		return ptr;
	}


	void TestSendSystemMessage(const struct FText& Message, float Duration);
	void TestSendImportantMessage(const struct FText& Message, float Duration);
	void TestKillMessage(const struct FString& KillerName, const struct FString& VictimName, int KillerTeamNum, int VictimTeamNum, bool bKillerIsOwner, bool bVictimIsOwner);
	void TestGameEvent_MatchEnded();
	void TestGameEvent_KillOtherPlayer(bool bGroggy);
	void TestGameEvent_Die(bool bGroggy);
	void SpawnActorInSceneCaptureWorld(class UClass* ActorClass, const struct FTransform& SpawnTransform, const struct FScriptDelegate& DelegateToCall);
	void ShowSystemMenuWidgetCanvasPanel(bool bShow);
	void SetTslHoldButtonWidget(class UTslHoldButtonWidget* Widget);
	void SetHighlightProvider(const struct FString& Provider);
	void RunTestKillMessages(bool bRun, float MessageInterval);
	void RecordReplayHighlightSession(float timeLength);
	void OnMicVuMeterUpdated(bool bIsMicActive, float FastMicEnergy, float CurrNoiseLevel);
	void NotifyTeamKillingSpree(int TeamNum, int KillCount);
	void NotifyTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int EliminatedTeamRankingDetermined);
	void NotifyStanceChanged(TEnumAsByte<EStanceMode> OldStance, TEnumAsByte<EStanceMode> NewStance);
	void NotifyPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount);
	void NotifyExtendMinimap();
	void NotifyDropSlotOnOtherContainer(const TScriptInterface<class USlotContainerInterface>& Container, const TScriptInterface<class USlotInterface>& Slot, const TScriptInterface<class USlotContainerInterface>& OtherContainer);
	bool IsInitCaptureWorld();
	bool IsGameEnded();
	void InitCaptureWorld();
	void GoToLobby(bool bInSkipServerRPC);
	class UTslHoldButtonWidget* GetTslHoldButtonWidget();
	class APawn* GetPossessPawn();
	class ATslCharacter* GetPossessCharacter();
	float GetHealAmount();
	void DisplayVoiceChannelStateMessage();
	void DisplayOtherWeaponAnim();
	void DisplayOtherCharacterAnim();
	void DisplayMyWeaponAnim();
	void DisplayMyCharacterAnim();
	void DisplayBone(const struct FName& InDisplayBoneName);
	void DisplayAudioListener();
};


// Class TslGame.LobbyHUD
// 0x0260 (0x0D00 - 0x0AA0)
class ALobbyHUD : public ATslHUD
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0AA0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnShowCurtain;                                            // 0x0AA8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHideCurtain;                                            // 0x0AB8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0AC8(0x0010) MISSED OFFSET
	struct FString                                     StartURL;                                                 // 0x0AD8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<class UCoherentCommonBinder*>               CommonBinders;                                            // 0x0AE8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0AF8(0x0010) MISSED OFFSET
	unsigned char                                      bSaveBlur : 1;                                            // 0x0B08(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0B09(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRequestSystemMenu;                                      // 0x0B10(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnToggleSystemMenu;                                       // 0x0B20(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0B30(0x0004) MISSED OFFSET
	int                                                CachedTslMovableLightShadowSetting;                       // 0x0B34(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              CachedTextureMipBias;                                     // 0x0B38(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CachedAASamples;                                          // 0x0B3C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                RollbackStreamingBoost;                                   // 0x0B40(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CachedDynamicRes;                                         // 0x0B44(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CachedHBAOEnabled;                                        // 0x0B48(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CachedShadowMaxRes;                                       // 0x0B4C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	class ULobbySceneManagerComponent*                 LobbySceneManagerComponent;                               // 0x0B58(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnCreateCharacter;                                        // 0x0B60(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestroyCharacter;                                       // 0x0B70(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TAssetPtr<class UClass>                            LobbyCharacterMaleClass;                                  // 0x0B80(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	TAssetPtr<class UClass>                            LobbyCharacterFemaleClass;                                // 0x0BA0(0x0020) (CPF_Edit, CPF_DisableEditOnInstance)
	TMap<uint32_t, class ALobbyCharacter*>             LobbyCharacters;                                          // 0x0BC0(0x0050) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bSaveIsGenderMale : 1;                                    // 0x0C10(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0C11(0x0007) MISSED OFFSET
	class ATslWeaponDisplay*                           LobbyWeaponDisplay;                                       // 0x0C18(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bResetRotation : 1;                                       // 0x0C20(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0C21(0x0003) MISSED OFFSET
	float                                              ResetStartTime;                                           // 0x0C24(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       CameraSocketName;                                         // 0x0C28(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewModeInterpSpeed;                                      // 0x0C30(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0C34(0x0004) MISSED OFFSET
	class AActor*                                      ViewModeActor;                                            // 0x0C38(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AActor*                                      ViewModeActor_Character;                                  // 0x0C40(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UMeshComponent*                              VIewModeMeshCom;                                          // 0x0C48(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0C50(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.LobbyHUD.LastViewModeCategory
	unsigned char                                      UnknownData10[0x1];                                       // 0x0C51(0x0001) UNKNOWN PROPERTY: EnumProperty TslGame.LobbyHUD.LastLobbyCharacterCameraType
	unsigned char                                      UnknownData11[0x6];                                       // 0x0C52(0x0006) MISSED OFFSET
	class AActor*                                      CachedViewModePivot;                                      // 0x0C58(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FRotator                                    ViewModeCurrentRotation;                                  // 0x0C60(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	struct FRotator                                    ViewModeTargetRotation;                                   // 0x0C6C(0x000C) (CPF_Transient, CPF_IsPlainOldData)
	float                                              ViewModeCurrentScale;                                     // 0x0C78(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ViewModeTargetScale;                                      // 0x0C7C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FLightingChannels                           ViewModeLightingChannels;                                 // 0x0C80(0x0003) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData12[0x1];                                       // 0x0C83(0x0001) MISSED OFFSET
	float                                              MaxRotationValue;                                         // 0x0C84(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ComputeValue;                                             // 0x0C88(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsRotationInputReceive : 1;                              // 0x0C8C(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0C8D(0x0003) MISSED OFFSET
	class UClass*                                      LobbyParachute;                                           // 0x0C90(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bSimulateWind : 1;                                        // 0x0C98(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x4F];                                      // 0x0C99(0x004F) MISSED OFFSET
	class UClass*                                      ViewModeStudioClass;                                      // 0x0CE8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AViewModeStudio*                             ViewModeStudio;                                           // 0x0CF0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0CF8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TslGame.LobbyHUD");
		return ptr;
	}


	void WMShowWeapon(const struct FString& WeaponId, const struct FString& CharmId, const struct FString& VariantId, const struct FString& SkinId, bool PlayAnimation);
	void WMRotateWeapon(float AngleInDegreeX, float AngleInDegreeY);
	void WMHideWeapon();
	void UpdateStatTrak(uint32_t Value, int NumKills);
	void UnBindUIIndex(int ViewIndex);
	void UnBindUIAll();
	void ToggleSystemMenu();
	void Timeout_CheckConectingLobby();
	void TestShowWebPopup(const struct FString& Uri, bool bShowButtonGroup);
	void TestShowCharacterPreview();
	void TestPreloadWebPopup();
	void TestLobbyCharacterReady(uint32_t SlotIndex, bool bReady);
	void TestLobbyCharacterHost(uint32_t SlotIndex);
	void TestLobbyCharacterAddAngle(int SlotIndex, float InYawInDegree);
	void TestLobbyCamera_SpawnCharacters(int Num);
	void TestChinaPCCafeApi();
	void Test_UpdateLobbyCharacterRank(uint32_t SlotIndex, int InRankTypeInteger);
	void Test_UpdateLobbyCharacter(uint32_t SlotIndex);
	void Test_ShowCharacterViewModeEx(const struct FString& SceneName, int CameraType);
	void Test_SetCharacterViewModeCamera(int CameraType, int bForceUpdate);
	void Test_RemoveLobbyItem(const struct FString& ItemId);
	void Test_RemoveAllLobbyItem();
	void Test_PrintWeaponItem(uint32_t SlotIndex);
	void Test_PrintSkinItem(uint32_t SlotIndex);
	void Test_ForceLodLevel(int ForceLodLevel);
	void Test_CreateLobbyCharacter(uint32_t SlotIndex, bool IsGenderMale, const struct FString& NetId, const struct FString& Nickname);
	void Test_AddLobbyItem(const struct FString& ItemId);
	void ShowWeaponOrGearViewModeEnum(const struct FString& SceneName, const struct FString& TargetId, const struct FString& SkinItemId);
	void ShowWeaponOrGearViewMode(const struct FString& SceneName, uint32_t ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemId);
	void ShowViewMode(uint32_t ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemId);
	void ShowTermsOfService();
	void ShowSystemMenuWidgetCanvasPanel(bool bShow);
	void ShowControllerGuide();
	void SetWidgetForBinding(int ViewIndex, class UCoherentUIGTWidget* Widget);
	void SetShowLobbyUI(bool bShow);
	void SetRotationInputReceive(bool bNewIsRotationInputReceive);
	void SetOverrideCharacterVisibility(uint32_t SlotIndex, bool bShow);
	void SetMainCoherentWidgetVisiblity();
	void SetLocalUserData(const struct FString& Key, const struct FString& Value);
	void SetLobbyCharacterHiddenInGame(uint32_t SlotIndex, bool bNewHidden);
	void SetLobbyCharacterCustomizationScene(uint32_t SlotIndex, bool bCustomScene);
	void SetLobbyCharacterBlur(bool bBlur);
	void SetCurrentCameraLocation(const struct FVector& Location);
	void SetCharacterViewModeCameraEnum(bool bForceUpdate);
	void ResetViewMode();
	void RequestSystemMenu();
	void PlayEmoteAnimation(const struct FName& InEmoteName);
	void OnStopRotation();
	void OnStartRotation();
	void OnReplaySummary(const struct FTslReplaySummary& ReplaySummary);
	void OnReplayList();
	void OnDeleteOldReplays(int RemainedReplayNum);
	void OnCloseControllerGuide();
	void NotifyPressedEsc();
	void NotifyLobbyConnecting();
	bool NotifyLobbyCharacterDestroyedForLevelActor(int Index);
	void NotifyLobbyCharacterDestroyed(int InSlotIndex);
	bool NotifyLobbyCharacterCreatedForLevelActor(int Index);
	void NotifyLobbyCharacterCreated(int InSlotIndex);
	bool IsViewModeScene();
	bool IsTransitionPlaying();
	bool IsSystemMenuButtonEnabled();
	bool IsSceneLevelVisible(const struct FName& SceneLevelName);
	bool IsRotationInputReceive();
	void HideViewMode();
	void HideCharacterPreview();
	TArray<struct FLobbyWeaonItemPair> GetWeaponItemPairs();
	void GetViewModeCategory();
	int GetUsableViewIndex();
	struct FString GetStartUrl();
	TArray<struct FLobbySkinPair> GetSkinItemPairs(const struct FName& SkinTag);
	struct FName GetNextSceneLevelName();
	void GetNextLobbyCameraState();
	class ALobbyCharacter* GetMainLobbyCharacter();
	class UCoherentUIGTWidget* GetMainCoherentWidget();
	struct FString GetLocalUserData(const struct FString& Key);
	TArray<struct FVector2D> GetLobbyCharacterZoomRect();
	int GetLobbyCharacterNum();
	void GetLobbyCharacterCameraType();
	class ALobbyCharacter* GetLobbyCharacter(int SlotIndex);
	void GetLobbyCameraState();
	void GetLastViewModeCategory();
	struct FName GetCurrentSceneLevelName();
	void GetCharacterCameratypeFromMousePosition(const struct FVector2D& MousePosition);
	void EnableSystemMenuButton();
	void DisableSystemMenuButton();
	void CoherentGTFailLoadHandler(const struct FString& path, const struct FString& Error, bool isMainFrame);
	void CloseControllerGuide();
	void ClearWidget(int Index);
	void ClearAllWidget();
	void CheckLobbyConecting();
	void ChangeSceneFromName(const struct FString& SceneName);
	void CancelOverrideCharacterVisibility(uint32_t SlotIndex);
	void AddLobbyViewModeScale(int ViewModeCategory, float Value);
	void AddLobbyViewModeAngleXYFromEnum(float XAngleInDegree, float YAngleInDegree);
	void AddLobbyViewModeAngleXY(int ViewModeCategory, float XAngleInDegree, float YAngleInDegree);
	void AddLobbyViewModeAngle(uint32_t ViewModeCategory, float AngleInDegree);
	void AddLobbyCharacterAngle(int SlotIndex, float AngleInDegree);
	void AddCurrentCameraZoomIn(float AddValue);
	void AddCurrentCameraZoom(float AddValue);
	void AddCurrentCameraDirection(const struct FVector& Dir);
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
